{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/generated/generated/decode-data-html.ts", "../../../../../node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/generated/generated/decode-data-xml.ts", "../../../../../node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/decode_codepoint.ts", "../../../../../node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/decode.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/util/location.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parse-error/module-errors.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parse-error/to-node-description.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parse-error/standard-errors.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parse-error.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/options.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/estree.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/tokenizer/context.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/tokenizer/types.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/util/identifier.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/util/scope.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/flow/scope.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/flow/index.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/jsx/xhtml.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/util/whitespace.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/jsx/index.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/typescript/scope.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/util/production-parameter.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parser/base.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parser/comments.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/tokenizer/state.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/babel-helper-string-parser/src/index.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/tokenizer/index.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/util/class-scope.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/util/expression-scope.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parser/util.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parser/node.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parser/lval.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/typescript/index.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/placeholders.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugins/v8intrinsic.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/plugin-utils.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parser/expression.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parser/statement.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/parser/index.ts", "../../../../../node_modules/.pnpm/@babel+parser@7.27.2/node_modules/@babel/parser/src/index.ts", "../../../../../node_modules/.pnpm/estree-walker@2.0.2/node_modules/estree-walker/dist/umd/estree-walker.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/base64.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/base64-vlq.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/util.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/array-set.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/mapping-list.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/source-map-generator.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/binary-search.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/quick-sort.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/source-map-consumer.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/lib/source-node.js", "../../../../../node_modules/.pnpm/source-map-js@1.2.1/node_modules/source-map-js/source-map.js", "../../../../../node_modules/.pnpm/@vue+compiler-core@3.5.14/node_modules/@vue/compiler-core/dist/compiler-core.cjs.js", "../../../../../node_modules/.pnpm/@vue+compiler-core@3.5.14/node_modules/@vue/compiler-core/index.js", "../../../../../node_modules/.pnpm/@vue+compiler-dom@3.5.14/node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js", "../../../../../node_modules/.pnpm/@vue+server-renderer@3.5.14_vue@3.5.14_typescript@5.8.3_/node_modules/@vue/server-renderer/dist/server-renderer.esm-bundler.js"],
  "sourcesContent": [null, null, null, null, "export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n", "const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  YieldNotInGeneratorFunction:\n    \"'yield' is only allowed within generator functions.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: process.env.BABEL_8_BREAKING\n    ? 'Topic references are only supported when using the `\"proposal\": \"hack\"` version of the pipeline proposal.'\n    : 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  ...(process.env.BABEL_8_BREAKING\n    ? {}\n    : {\n        // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n        // are retained for backwards compatibility\n        // with the deprecated smart-mix pipe operator proposal plugin.\n        // They are subject to removal in a future major version.\n        PipelineBodyNoArrow:\n          'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n        PipelineBodySequenceExpression:\n          \"Pipeline body may not be a comma-separated sequence expression.\",\n        PipelineHeadSequenceExpression:\n          \"Pipeline head should not be a comma-separated sequence expression.\",\n        PipelineTopicUnused:\n          \"Pipeline is in topic style but does not use topic reference.\",\n        PrimaryTopicNotAllowed:\n          \"Topic reference was used in a lexical context without topic binding.\",\n        PrimaryTopicRequiresSmartPipeline:\n          'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n      }),\n} satisfies ParseErrorTemplates;\n", "import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n\n  if (!process.env.BABEL_8_BREAKING) {\n    const oldReasonCodes: Record<string, string> = {\n      AccessorCannotDeclareThisParameter: \"AccesorCannotDeclareThisParameter\",\n      AccessorCannotHaveTypeParameters: \"AccesorCannotHaveTypeParameters\",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n        \"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference\",\n      SetAccessorCannotHaveOptionalParameter:\n        \"SetAccesorCannotHaveOptionalParameter\",\n      SetAccessorCannotHaveRestParameter: \"SetAccesorCannotHaveRestParameter\",\n      SetAccessorCannotHaveReturnType: \"SetAccesorCannotHaveReturnType\",\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n", "import type { Plugin } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  /**\n   * By default, import and export declarations can only appear at a program's top level.\n   * Setting this option to true allows them anywhere where a statement is allowed.\n   */\n  allowImportExportEverywhere?: boolean;\n\n  /**\n   * By default, await use is not allowed outside of an async function.\n   * Set this to true to accept such code.\n   */\n  allowAwaitOutsideFunction?: boolean;\n\n  /**\n   * By default, a return statement at the top level raises an error.\n   * Set this to true to accept such code.\n   */\n  allowReturnOutsideFunction?: boolean;\n\n  /**\n   * By default, new.target use is not allowed outside of a function or class.\n   * Set this to true to accept such code.\n   */\n  allowNewTargetOutsideFunction?: boolean;\n\n  allowSuperOutsideMethod?: boolean;\n\n  /**\n   * By default, exported identifiers must refer to a declared variable.\n   * Set this to true to allow export statements to reference undeclared variables.\n   */\n  allowUndeclaredExports?: boolean;\n\n  /**\n   * By default, yield use is not allowed outside of a generator function.\n   * Set this to true to accept such code.\n   */\n\n  allowYieldOutsideFunction?: boolean;\n\n  /**\n   * By default, Babel parser JavaScript code according to Annex B syntax.\n   * Set this to `false` to disable such behavior.\n   */\n  annexB?: boolean;\n\n  /**\n   * By default, Babel attaches comments to adjacent AST nodes.\n   * When this option is set to false, comments are not attached.\n   * It can provide up to 30% performance improvement when the input code has many comments.\n   * @babel/eslint-parser will set it for you.\n   * It is not recommended to use attachComment: false with Babel transform,\n   * as doing so removes all the comments in output code, and renders annotations such as\n   * /* istanbul ignore next *\\/ nonfunctional.\n   */\n  attachComment?: boolean;\n\n  /**\n   * By default, Babel always throws an error when it finds some invalid code.\n   * When this option is set to true, it will store the parsing error and\n   * try to continue parsing the invalid input file.\n   */\n  errorRecovery?: boolean;\n\n  /**\n   * Indicate the mode the code should be parsed in.\n   * Can be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\".\n   * \"unambiguous\" will make @babel/parser attempt to guess, based on the presence\n   * of ES6 import or export statements.\n   * Files with ES6 imports and exports are considered \"module\" and are otherwise \"script\".\n   */\n  sourceType?: \"script\" | \"module\" | \"unambiguous\";\n\n  /**\n   * Correlate output AST nodes with their source filename.\n   * Useful when generating code and source maps from the ASTs of multiple input files.\n   */\n  sourceFilename?: string;\n\n  /**\n   * By default, all source indexes start from 0.\n   * You can provide a start index to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startIndex?: number;\n\n  /**\n   * By default, the first line of code parsed is treated as line 1.\n   * You can provide a line number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startLine?: number;\n\n  /**\n   * By default, the parsed code is treated as if it starts from line 1, column 0.\n   * You can provide a column number to alternatively start with.\n   * Useful for integration with other source tools.\n   */\n  startColumn?: number;\n\n  /**\n   * Array containing the plugins that you want to enable.\n   */\n  plugins?: Plugin[];\n\n  /**\n   * Should the parser work in strict mode.\n   * Defaults to true if sourceType === 'module'. Otherwise, false.\n   */\n  strictMode?: boolean;\n\n  /**\n   * Adds a ranges property to each node: [node.start, node.end]\n   */\n  ranges?: boolean;\n\n  /**\n   * Adds all parsed tokens to a tokens property on the File node.\n   */\n  tokens?: boolean;\n\n  /**\n   * By default, the parser adds information about parentheses by setting\n   * `extra.parenthesized` to `true` as needed.\n   * When this option is `true` the parser creates `ParenthesizedExpression`\n   * AST nodes instead of using the `extra` property.\n   */\n  createParenthesizedExpressions?: boolean;\n\n  /**\n   * The default is false in Babel 7 and true in Babel 8\n   * Set this to true to parse it as an `ImportExpression` node.\n   * Otherwise `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\n   */\n  createImportExpressions?: boolean;\n}\n\nexport const enum OptionFlags {\n  AllowAwaitOutsideFunction = 1 << 0,\n  AllowReturnOutsideFunction = 1 << 1,\n  AllowNewTargetOutsideFunction = 1 << 2,\n  AllowImportExportEverywhere = 1 << 3,\n  AllowSuperOutsideMethod = 1 << 4,\n  AllowYieldOutsideFunction = 1 << 5,\n  AllowUndeclaredExports = 1 << 6,\n  Ranges = 1 << 7,\n  Tokens = 1 << 8,\n  CreateImportExpressions = 1 << 9,\n  CreateParenthesizedExpressions = 1 << 10,\n  ErrorRecovery = 1 << 11,\n  AttachComment = 1 << 12,\n  AnnexB = 1 << 13,\n}\n\ntype OptionsWithDefaults = Required<Options>;\n\nfunction createDefaultOptions(): OptionsWithDefaults {\n  return {\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // Source filename.\n    sourceFilename: undefined,\n    // Index (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startIndex: 0,\n    // Column (0-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startColumn: 0,\n    // Line (1-based) from which to start counting source. Useful for\n    // integration with other tools.\n    startLine: 1,\n    // When enabled, await at the top level is not considered an\n    // error.\n    allowAwaitOutsideFunction: false,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, new.target outside a function or class is not\n    // considered an error.\n    allowNewTargetOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // TODO\n    allowSuperOutsideMethod: false,\n    // When enabled, export statements can reference undeclared variables.\n    allowUndeclaredExports: false,\n    allowYieldOutsideFunction: false,\n    // An array of plugins to enable\n    plugins: [],\n    // TODO\n    strictMode: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // Adds all parsed tokens to a `tokens` property on the `File` node\n    tokens: false,\n    // Whether to create ImportExpression AST nodes (if false\n    // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n    createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n    // Whether to create ParenthesizedExpression AST nodes (if false\n    // the parser sets extra.parenthesized on the expression nodes instead).\n    createParenthesizedExpressions: false,\n    // When enabled, errors are attached to the AST instead of being directly thrown.\n    // Some errors will still throw, because @babel/parser can't always recover.\n    errorRecovery: false,\n    // When enabled, comments will be attached to adjacent AST nodes as one of\n    // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n    // is vital to preserve comments after transform. If you don't print AST back,\n    // consider set this option to `false` for performance\n    attachComment: true,\n    // When enabled, the parser will support Annex B syntax.\n    // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n    annexB: true,\n  };\n}\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  // https://github.com/babel/babel/pull/16918\n  // `options` is accessed frequently, please make sure it is a fast object.\n  // `%ToFastProperties` can make it a fast object, but the performance is the same as the slow object.\n  const options: any = createDefaultOptions();\n\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  for (const key of Object.keys(options) as (keyof Options)[]) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null || process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"With a `startLine > 1` you must also specify `startIndex` and `startColumn`.\",\n      );\n    }\n  }\n\n  return options;\n}\n", "import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport { OptionFlags } from \"../options.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.optionFlags & OptionFlags.Tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n    estreeParseChainExpression(\n      node: N.Expression,\n      endLoc: Position,\n    ): N.EstreeChainExpression {\n      const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n      chain.expression = node;\n      return this.finishNodeAt(chain, \"ChainExpression\", endLoc);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      this.castNodeTo(expression, \"Literal\");\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = this.castNodeTo(directive, \"ExpressionStatement\");\n      stmt.expression = expression;\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    /**\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     * This hook will be implemented by the typescript plugin.\n     *\n     * Note: This hook should be manually invoked when we change the `type` of a given AST\n     * node, to ensure that the optional properties are correctly filled.\n     * @param node The AST node finished by finishNode\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    fillOptionalPropertiesForTSESLint(node: NodeType) {}\n\n    cloneEstreeStringLiteral(node: N.EstreeLiteral): N.EstreeLiteral {\n      const { start, end, loc, range, raw, value } = node;\n      const cloned = Object.create(node.constructor.prototype);\n      cloned.type = \"Literal\";\n      cloned.start = start;\n      cloned.end = end;\n      cloned.loc = loc;\n      cloned.range = range;\n      cloned.raw = raw;\n      cloned.value = value;\n      return cloned;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      return this.castNodeTo(node, \"PrivateIdentifier\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ):\n      | N.EstreeProperty\n      | N.EstreeMethodDefinition\n      | N.EstreeTSAbstractMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      delete funcNode.kind;\n      const { typeParameters } = node;\n      if (typeParameters) {\n        delete node.typeParameters;\n        funcNode.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(funcNode, typeParameters);\n      }\n      const valueNode = this.castNodeTo(\n        funcNode as N.MethodLike,\n        process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"typescript\") &&\n          !funcNode.body\n          ? \"TSEmptyBodyFunctionExpression\"\n          : \"FunctionExpression\",\n      );\n      (\n        node as unknown as Undone<\n          | N.EstreeProperty\n          | N.EstreeMethodDefinition\n          | N.EstreeTSAbstractMethodDefinition\n        >\n      ).value = valueNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      if (process.env.BABEL_8_BREAKING && this.hasPlugin(\"typescript\")) {\n        // @ts-expect-error todo(flow->ts) property not defined for all types in union\n        if (node.abstract) {\n          // @ts-expect-error remove abstract from TSAbstractMethodDefinition\n          delete node.abstract;\n          return this.finishNode(\n            // @ts-expect-error cast methods to estree types\n            node as Undone<N.EstreeTSAbstractMethodDefinition>,\n            \"TSAbstractMethodDefinition\",\n          );\n        }\n      }\n      if (type === \"ObjectMethod\") {\n        if ((node as any as N.ObjectMethod).kind === \"method\") {\n          (node as any as N.EstreeProperty).kind = \"init\";\n        }\n        (node as any as N.EstreeProperty).shorthand = false;\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeProperty>,\n          \"Property\",\n        );\n      } else {\n        return this.finishNode(\n          // @ts-expect-error cast methods to estree types\n          node as Undone<N.EstreeMethodDefinition>,\n          \"MethodDefinition\",\n        );\n      }\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        delete propertyNode.abstract;\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      return propertyNode;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as unknown as N.EstreePropertyDefinition;\n        }\n      }\n      if (\n        process.env.BABEL_8_BREAKING &&\n        propertyNode.abstract &&\n        this.hasPlugin(\"typescript\")\n      ) {\n        this.castNodeTo(propertyNode, \"TSAbstractPropertyDefinition\");\n      } else {\n        this.castNodeTo(propertyNode, \"PropertyDefinition\");\n      }\n      propertyNode.computed = false;\n      return propertyNode;\n    }\n\n    parseClassAccessorProperty(\n      this: Parser,\n      node: N.ClassAccessorProperty,\n    ): any {\n      const accessorPropertyNode = super.parseClassAccessorProperty(node);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return accessorPropertyNode;\n        }\n      }\n      if (accessorPropertyNode.abstract && this.hasPlugin(\"typescript\")) {\n        delete accessorPropertyNode.abstract;\n        this.castNodeTo(accessorPropertyNode, \"TSAbstractAccessorProperty\");\n      } else {\n        this.castNodeTo(accessorPropertyNode, \"AccessorProperty\");\n      }\n      return accessorPropertyNode;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        this.castNodeTo(node, \"Property\");\n      }\n\n      return node as any;\n    }\n\n    finishObjectProperty(node: Undone<N.ObjectProperty>): N.ObjectProperty {\n      (node as unknown as Undone<N.EstreeProperty>).kind = \"init\";\n      return this.finishNode(\n        node as unknown as Undone<N.EstreeProperty>,\n        \"Property\",\n      ) as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        this.castNodeTo(node, \"ImportExpression\");\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        (node as N.Node as N.EstreeImportExpression).options =\n          (node.arguments[1] as N.Expression) ?? null;\n        // compatibility with previous ESTree AST\n        // TODO(Babel 8): Remove this\n        (node as N.Node as N.EstreeImportExpression).attributes =\n          (node.arguments[1] as N.Expression) ?? null;\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      } else if (node.type === \"OptionalCallExpression\") {\n        this.castNodeTo(node, \"CallExpression\");\n      } else {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            this.castNodeTo(node, \"ExportAllDeclaration\");\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    stopParseSubscript(base: N.Expression, state: N.ParseSubscriptState) {\n      const node = super.stopParseSubscript(base, state);\n      if (state.optionalChainMember) {\n        return this.estreeParseChainExpression(node, base.loc.end);\n      }\n      return node;\n    }\n\n    parseMember(\n      base: N.Expression,\n      startLoc: Position,\n      state: N.ParseSubscriptState,\n      computed: boolean,\n      optional: boolean,\n    ) {\n      const node = super.parseMember(base, startLoc, state, computed, optional);\n      if (node.type === \"OptionalMemberExpression\") {\n        this.castNodeTo(node, \"MemberExpression\");\n      } else {\n        node.optional = false;\n      }\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    castNodeTo<T extends N.Node[\"type\"]>(\n      node: N.Node,\n      type: T,\n    ): Extract<N.Node, { type: T }> {\n      const result = super.castNodeTo(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      this.fillOptionalPropertiesForTSESLint(cloned);\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Literal\") {\n        return this.cloneEstreeStringLiteral(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    // Override for TS-ESLint that does not allow optional AST properties\n    finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n      const result = super.finishNode(node, type);\n      this.fillOptionalPropertiesForTSESLint(result);\n      return result;\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  // TODO: Remove this in Babel 8\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  // TODO: Remove this in Babel 8\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  // TODO: Remove this in Babel 8\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.placeholder;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.placeholder;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.cjs`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.cjs`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.default = false;\n            delete node.exportKind;\n            return this.castNodeTo(\n              node as N.ExportNamedDeclaration,\n              \"DeclareExportDeclaration\",\n            );\n          } else {\n            return this.castNodeTo(\n              node as N.ExportAllDeclaration,\n              \"DeclareExportAllDeclaration\",\n            );\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareTypeAlias\");\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      this.castNodeTo(finished, \"DeclareOpaqueType\");\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    flowInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    flowParseTypeParameterInstantiationInExpression():\n      | N.TypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.flowParseTypeParameterInstantiation();\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n\n      this.state.inType = true;\n      node.params = [];\n      this.flowInTopLevelContext(() => {\n        this.expect(tt.lt);\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n        while (!this.match(tt.gt)) {\n          node.params.push(this.flowParseType());\n          if (!this.match(tt.gt)) {\n            this.expect(tt.comma);\n          }\n        }\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      });\n\n      this.state.inType = oldInType;\n      if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      if (this.reScan_lt() !== tt.lt) return;\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (type === tt._enum || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the fact that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (\n        node.superClass &&\n        (this.match(tt.lt) ||\n          // handles `class extends C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        } else {\n          node.superTypeParameters =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseFunctionParamType(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = this.cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = this.cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(\n          this.offsetToSourcePos(node.start),\n        )\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow &&\n          !this.state.noArrowAt.includes(\n            this.sourceToOffsetPos(this.state.start),\n          ),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments =\n          this.flowParseTypeParameterInstantiationInExpression();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        (this.match(tt.lt) ||\n          // also handles `new C<<T>`\n          this.match(tt.bitShiftL))\n      ) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.shouldParseTypes()) {\n        if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationInExpression();\n        }\n      }\n\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n", "import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport type ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n", "// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n", "import type { OptionFlags, Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare optionFlags: OptionFlags;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  declare startIndex: number;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  sourceToOffsetPos(sourcePos: number) {\n    return sourcePos + this.startIndex;\n  }\n\n  offsetToSourcePos(offsetPos: number) {\n    return offsetPos - this.startIndex;\n  }\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n", "/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (\n        this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) ===\n        charCodes.comma\n      ) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          case \"TSEnumDeclaration\":\n            if (!process.env.BABEL_8_BREAKING) {\n              adjustInnerComments(node, node.members, commentWS);\n            } else {\n              setInnerComments(node, comments);\n            }\n            break;\n          case \"TSEnumBody\":\n            adjustInnerComments(node, node.members, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *​/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *​/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *​/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *​/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  startIndex: number;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn,\n  }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(\n      startLine,\n      startColumn,\n      startIndex,\n    );\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(\n      this.curLine,\n      this.pos - this.lineStart,\n      this.pos + this.startIndex,\n    );\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: State[\"curPosition\"];\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "/*:: declare var invariant; */\n\nimport { OptionFlags, type Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.optionFlags & OptionFlags.Tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.lookaheadCharCodeSince(this.state.pos);\n  }\n\n  lookaheadCharCodeSince(pos: number): number {\n    return this.input.charCodeAt(this.nextTokenStartSince(pos));\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.optionFlags & OptionFlags.Tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments: N.Comment[] =\n      this.optionFlags & OptionFlags.AttachComment ? [] : null;\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.optionFlags & OptionFlags.AnnexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                comments?.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments?.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      (next === charCodes.leftCurlyBrace ||\n        (next === charCodes.leftSquareBracket &&\n          this.hasPlugin(\"recordAndTuple\")))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      // eslint-disable-next-line no-var\n      var isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        this.sourceToOffsetPos(firstInvalidLoc.pos),\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!(this.optionFlags & OptionFlags.ErrorRecovery)) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!(this.optionFlags & OptionFlags.ErrorRecovery)) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n", "import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n", "import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\nimport type { Undone } from \"../parser/node.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M | V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Undone<Node>,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.offsetToSourcePos(this.state.lastTokEndLoc.index),\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    if (this.optionFlags & OptionFlags.AllowYieldOutsideFunction) {\n      paramFlags |= ParamKind.PARAM_YIELD;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to null\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKeyLoc**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n *   It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n", "import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type {\n  Comment,\n  Node as NodeType,\n  NodeBase,\n  EstreeLiteral,\n  Identifier,\n  Placeholder,\n  StringLiteral,\n} from \"../types.ts\";\nimport { OptionFlags } from \"../options.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.optionFlags & OptionFlags.Ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n    if (this.optionFlags & OptionFlags.AttachComment) {\n      this.processComment(node as T);\n    }\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.optionFlags & OptionFlags.Ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n\n  castNodeTo<T extends NodeType[\"type\"]>(\n    node: NodeType,\n    type: T,\n  ): Extract<NodeType, { type: T }> {\n    node.type = type;\n    return node as Extract<NodeType, { type: T }>;\n  }\n\n  cloneIdentifier<T extends Identifier | Placeholder>(node: T): T {\n    // We don't need to clone `typeAnnotations` and `optional`: because\n    // cloneIdentifier is only used in object shorthand and named import/export.\n    // Neither of them allow type annotations after the identifier or optional identifier\n    const { type, start, end, loc, range, name } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.name = name;\n    if (node.extra) cloned.extra = node.extra;\n    return cloned;\n  }\n\n  cloneStringLiteral<T extends StringLiteral | EstreeLiteral | Placeholder>(\n    node: T,\n  ): T {\n    const { type, start, end, loc, range, extra } = node;\n    const cloned = Object.create(NodePrototype);\n    cloned.type = type;\n    cloned.start = start;\n    cloned.end = end;\n    cloned.loc = loc;\n    cloned.range = range;\n    cloned.extra = extra;\n    cloned.value = (node as StringLiteral).value;\n    return cloned;\n  }\n}\n", "import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        this.castNodeTo(node, \"ObjectPattern\");\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        this.castNodeTo(node, \"ArrayPattern\");\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        this.castNodeTo(node, \"AssignmentPattern\");\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      this.castNodeTo(prop, \"RestElement\");\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement | null)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      this.toAssignableListItem(exprList, i, isLHS);\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  toAssignableListItem(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    index: number,\n    isLHS: boolean,\n  ): void {\n    const node = exprList[index];\n    if (node.type === \"SpreadElement\") {\n      this.castNodeTo(node, \"RestElement\");\n      const arg = node.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ true);\n      this.toAssignable(arg, isLHS);\n    } else {\n      this.toAssignable(node, isLHS);\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        let rest: Pattern = this.parseRestBinding();\n        if (\n          (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n          flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n        ) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n          if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(\n              Errors.UnsupportedParameterDecorator,\n              this.state.startLoc,\n            );\n          }\n          // invariant: hasPlugin(\"decorators-legacy\")\n          while (this.match(tt.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n        elts.push(this.parseBindingElement(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseBindingElement(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    if (\n      (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"flow\")) ||\n      flags & ParseBindingListFlags.IS_FUNCTION_PARAMS\n    ) {\n      this.parseFunctionParamType(left);\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n      this.resetStartLocationFromNode(left, decorators[0]);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseFunctionParamType(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n", "import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { ClassWithMixin, IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\nimport { OptionFlags } from \"../../options.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  AccessorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccessorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list can only include identifiers or qualified-names with optional type arguments.`,\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccessorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccessorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccessorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\nfunction tsIsEntityName(\n  node: N.Expression,\n): node is N.MemberExpression | N.Identifier | N.TsInstantiationExpression {\n  if (node.extra?.parenthesized) {\n    return false;\n  }\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return !node.computed && tsIsEntityName(node.object);\n    case \"TSInstantiationExpression\":\n      return tsIsEntityName(node.expression);\n    default:\n      return false;\n  }\n}\n\nexport const enum tsParseEntityNameFlags {\n  NONE = 0b00,\n  ALLOW_RESERVED_WORDS = 0b01,\n  LEADING_THIS_AS_IDENTIFIER = 0b10,\n}\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        this.match(tt.bracketL) ||\n        this.match(tt.braceL) ||\n        this.match(tt.star) ||\n        this.match(tt.ellipsis) ||\n        this.match(tt.privateName) ||\n        this.isLiteralPropertyName()\n      );\n    }\n\n    tsNextTokenOnSameLineAndCanFollowModifier() {\n      this.next();\n      if (this.hasPrecedingLineBreak()) {\n        return false;\n      }\n      return this.tsTokenCanFollowModifier();\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      if (this.match(tt._static)) {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n      return this.tsNextTokenOnSameLineAndCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n        if (process.env.BABEL_8_BREAKING) {\n          // Consume as an non-conditional type so that we can recover from this error\n          node.argument = this.tsParseNonConditionalType() as any;\n        } else {\n          node.argument = super.parseExprAtom() as any;\n        }\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.argument = this.tsParseLiteralTypeNode();\n        } else {\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          node.argument = this.parseStringLiteral(this.state.value);\n        }\n      }\n      if (this.eat(tt.comma)) {\n        node.options = this.tsParseImportTypeOptions();\n      } else {\n        node.options = null;\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName(\n          tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n            tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n        );\n      }\n      if (this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseImportTypeOptions(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      this.expect(tt.braceL);\n      const withProperty = this.startNode<N.ObjectProperty>();\n      if (this.isContextual(tt._with)) {\n        withProperty.method = false;\n        withProperty.key = this.parseIdentifier(true);\n        withProperty.computed = false;\n        withProperty.shorthand = false;\n      } else {\n        this.unexpected(null, tt._with);\n      }\n      this.expect(tt.colon);\n      withProperty.value = this.tsParseImportTypeWithPropertyValue();\n      node.properties = [this.finishObjectProperty(withProperty)];\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseImportTypeWithPropertyValue(): N.ObjectExpression {\n      const node = this.startNode<N.ObjectExpression>();\n      const properties = [];\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        const type = this.state.type;\n        if (tokenIsIdentifier(type) || type === tt.string) {\n          properties.push(super.parsePropertyDefinition(null));\n        } else {\n          this.unexpected();\n        }\n        this.eat(tt.comma);\n      }\n      node.properties = properties;\n      this.next(); // eat }\n      return this.finishNode(node, \"ObjectExpression\");\n    }\n\n    tsParseEntityName(flags: tsParseEntityNameFlags): N.TsEntityName {\n      let entity: N.TsEntityName;\n      if (\n        flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS &&\n        this.match(tt._this)\n      ) {\n        if (flags & tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER) {\n          entity = this.parseIdentifier(true);\n        } else {\n          const node = this.startNode<N.ThisExpression>();\n          this.next();\n          entity = this.finishNode(node, \"ThisExpression\");\n        }\n      } else {\n        entity = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n      }\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(\n          !!(flags & tsParseEntityNameFlags.ALLOW_RESERVED_WORDS),\n        );\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName(\n        tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n      );\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        if (process.env.BABEL_8_BREAKING) {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS,\n          );\n        } else {\n          node.exprName = this.tsParseEntityName(\n            tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n              tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n          );\n        }\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = this.tsParseTypeArguments();\n        } else {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: Undone<N.TsPropertySignature | N.TsMethodSignature>,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method = node as Undone<N.TsMethodSignature>;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccessorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccessorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccessorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccessorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property = node as Undone<N.TsPropertySignature>;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n        // Allow < here so that we can recover from get key<T> later\n        if (!this.match(tt.parenL) && !this.match(tt.lt)) {\n          this.unexpected(null, tt.parenL);\n        }\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      if (process.env.BABEL_8_BREAKING) {\n        node.key = this.tsParseTypeParameterName() as N.Identifier;\n        node.constraint = this.tsExpectThenParseType(tt._in);\n      } else {\n        const typeParameter = this.startNode<N.TsTypeParameter>();\n        typeParameter.name = this.tsParseTypeParameterName();\n        typeParameter.constraint = this.tsExpectThenParseType(tt._in);\n        // @ts-expect-error for Babel 7\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      }\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const restStartLoc = this.state.startLoc;\n\n      const rest = this.eat(tt.ellipsis);\n      const { startLoc } = this.state;\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAt<N.TsNamedTupleMember>(startLoc);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAt<N.TsOptionalType>(startLoc);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(restStartLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsTemplateLiteralType | N.TsLiteralType {\n      if (process.env.BABEL_8_BREAKING) {\n        const startLoc = this.state.startLoc;\n        let curElt = this.parseTemplateElement(false);\n        const quasis = [curElt];\n        if (curElt.tail) {\n          const node = this.startNodeAt<N.TsLiteralType>(startLoc);\n          const literal = this.startNodeAt<N.TemplateLiteral>(startLoc);\n          literal.expressions = [];\n          literal.quasis = quasis;\n          node.literal = this.finishNode(literal, \"TemplateLiteral\");\n          return this.finishNode(node, \"TSLiteralType\");\n        } else {\n          const substitutions: N.TsType[] = [];\n          while (!curElt.tail) {\n            substitutions.push(this.tsParseType());\n            this.readTemplateContinuation();\n            quasis.push((curElt = this.parseTemplateElement(false)));\n          }\n          const node = this.startNodeAt<N.TsTemplateLiteralType>(startLoc);\n          node.types = substitutions;\n          node.quasis = quasis;\n          return this.finishNode(node, \"TSTemplateLiteralType\");\n        }\n      } else {\n        const node = this.startNode<N.TsLiteralType>();\n        node.literal = super.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (\n              !(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)\n            ) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      const { startLoc } = this.state;\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAt<N.TsArrayType>(startLoc);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAt<N.TsIndexedAccessType>(startLoc);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(token: \"extends\"): Array<N.TSInterfaceHeritage>;\n    tsParseHeritageClause(token: \"implements\"): Array<N.TSClassImplements>;\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TSClassImplements> | Array<N.TSInterfaceHeritage> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          if (process.env.BABEL_8_BREAKING) {\n            const expression = super.parseExprSubscripts();\n            if (!tsIsEntityName(expression)) {\n              this.raise(\n                TSErrors.InvalidHeritageClauseType,\n                expression.loc.start,\n                { token },\n              );\n            }\n            const nodeType =\n              token === \"extends\" ? \"TSInterfaceHeritage\" : \"TSClassImplements\";\n            if (expression.type === \"TSInstantiationExpression\") {\n              // @ts-expect-error cast TSInstantiationExpression to TSInterfaceHeritage/TSClassImplements\n              expression.type = nodeType;\n              return expression;\n            }\n            const node = this.startNodeAtNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >(expression);\n            node.expression = expression;\n            // The last element can not form a TSInstantiationExpression because of the bail condition in\n            // `parseSubscript`, in this case we have to parse type arguments again\n            if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n              node.typeArguments = this.tsParseTypeArgumentsInExpression();\n            }\n            return this.finishNode(node, nodeType);\n          } else {\n            const node = this.startNode<\n              N.TSInterfaceHeritage | N.TSClassImplements\n            >();\n            // @ts-expect-error Babel 7 vs Babel 8\n            node.expression = this.tsParseEntityName(\n              tsParseEntityNameFlags.ALLOW_RESERVED_WORDS |\n                tsParseEntityNameFlags.LEADING_THIS_AS_IDENTIFIER,\n            );\n            if (this.match(tt.lt)) {\n              // @ts-expect-error Babel 7 vs Babel 8\n              node.typeParameters = this.tsParseTypeArguments();\n            }\n\n            return this.finishNode(\n              node,\n              // @ts-expect-error Babel 7 vs Babel 8\n              \"TSExpressionWithTypeArguments\",\n            );\n          }\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList as\n        | Array<N.TSClassImplements>\n        | Array<N.TSInterfaceHeritage>;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    // Parse in top level normal context if we are in a JSX context\n    tsInTopLevelContext<T>(cb: () => T): T {\n      if (this.curContext() !== tc.brace) {\n        const oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      } else {\n        return cb();\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      if (process.env.BABEL_8_BREAKING) {\n        node.body = this.tsParseEnumBody();\n      } else {\n        this.expect(tt.braceL);\n        node.members = this.tsParseDelimitedList(\n          \"EnumMembers\",\n          this.tsParseEnumMember.bind(this),\n        );\n        this.expect(tt.braceR);\n      }\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseEnumBody(): N.TsEnumBody {\n      const node = this.startNode<N.TsEnumBody>();\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumBody\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = process.env.BABEL_8_BREAKING\n        ? this.tsParseEntityName(tsParseEntityNameFlags.ALLOW_RESERVED_WORDS)\n        : this.parseIdentifier();\n\n      if (\n        process.env.BABEL_8_BREAKING ? node.id.type === \"Identifier\" : !nested\n      ) {\n        // @ts-expect-error checked above\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (!process.env.BABEL_8_BREAKING && this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.kind = \"global\";\n        if (!process.env.BABEL_8_BREAKING) {\n          node.global = true;\n        }\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.kind = \"module\";\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      if (!process.env.BABEL_8_BREAKING) {\n        node.isExport = isExport || false;\n      }\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(tsParseEntityNameFlags.NONE);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any) {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany as Undone<N.ClassDeclaration>,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.kind = \"global\";\n            if (!process.env.BABEL_8_BREAKING) {\n              node.global = true;\n            }\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ) {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              node.kind = \"module\";\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            node.kind = \"namespace\";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES or JSX productions, where the first token\n    // has been created without state.inType. Thus we need to re-scan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        this.tsInTopLevelContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseBindingElement(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include decorators/modifiers in range\n      const startLoc = decorators.length\n        ? decorators[0].loc.start\n        : this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      if (flags & ParseBindingListFlags.IS_FUNCTION_PARAMS) {\n        this.parseFunctionParamType(left);\n      }\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            if (process.env.BABEL_8_BREAKING) {\n              result.typeArguments = typeArguments;\n            } else {\n              result.typeParameters = typeArguments;\n            }\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(tt.parenR);\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            if (process.env.BABEL_8_BREAKING) {\n              node.typeArguments = typeArguments;\n            } else {\n              node.typeParameters = typeArguments;\n            }\n\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (result.type === \"TSInstantiationExpression\") {\n            if (\n              this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis)\n            ) {\n              this.raise(\n                TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n                this.state.startLoc,\n              );\n            }\n            if (!this.match(tt.dot) && !this.match(tt.questionDot)) {\n              // If TSInstantiationExpression is not followed by . / ?.,\n              // it must be the end of a subscript chain. Note that `(` already forms\n              // call expression arguments\n              result.expression = super.stopParseSubscript(base, state);\n            }\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.typeArguments = callee.typeArguments;\n        } else {\n          node.typeParameters = callee.typeParameters;\n        }\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        const nodeImportEquals = process.env.BABEL_8_BREAKING\n          ? this.startNode<N.TsImportEqualsDeclaration>()\n          : (node as Undone<N.TsImportEqualsDeclaration>);\n        this.next(); // eat `tt._import`\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        const declaration = this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n        if (process.env.BABEL_8_BREAKING) {\n          (node as Undone<N.ExportNamedDeclaration>).attributes = [];\n          (node as Undone<N.ExportNamedDeclaration>).declaration = declaration;\n          (node as Undone<N.ExportNamedDeclaration>).exportKind = \"value\";\n          (node as Undone<N.ExportNamedDeclaration>).source = null;\n          (node as Undone<N.ExportNamedDeclaration>).specifiers = [];\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        } else {\n          return declaration;\n        }\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare && declaration.type !== \"TSImportEqualsDeclaration\") {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        (node as unknown as N.EstreeMethodDefinition).value.body == null\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        if (process.env.BABEL_8_BREAKING) {\n          node.superTypeArguments = this.tsParseTypeArgumentsInExpression();\n        } else {\n          node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n        }\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseFunctionParamType(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(\n      expr: N.Expression,\n      startLoc: Position,\n    ): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n            startLoc,\n          ) as N.CallExpression;\n          if (process.env.BABEL_8_BREAKING) {\n            call.typeArguments = typeArguments;\n          } else {\n            call.typeParameters = typeArguments;\n          }\n\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr, startLoc);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableListItem(\n      exprList: (N.Expression | N.SpreadElement | N.RestElement)[],\n      index: number,\n      isLHS: boolean,\n    ): void {\n      const node = exprList[index];\n      if (node.type === \"TSTypeCastExpression\") {\n        exprList[index] = this.typeCastToParameter(node);\n      }\n      super.toAssignableListItem(exprList, index, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) {\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments = typeArguments;\n          } else {\n            node.typeParameters = typeArguments;\n          }\n        }\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract || method.type === \"TSAbstractMethodDefinition\") {\n        const hasEstreePlugin = this.hasPlugin(\"estree\");\n        const methodFn = hasEstreePlugin\n          ? // @ts-expect-error estree typings\n            method.value\n          : method;\n        if (methodFn.body) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = this.cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n\n    /**\n     * This hook is defined in the ESTree plugin.\n     * The TS-ESLint always define optional AST properties, here we provide the\n     * default value for such properties immediately after `finishNode` was invoked.\n     *\n     * @param node The AST node finished by finishNode\n     * @returns\n     */\n    fillOptionalPropertiesForTSESLint(node: N.Node): void {\n      switch (node.type) {\n        case \"ExpressionStatement\":\n          node.directive ??= undefined;\n          return;\n        case \"RestElement\":\n          node.value = undefined;\n        /* fallthrough */\n        case \"Identifier\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"ObjectPattern\":\n          node.decorators ??= [];\n          node.optional ??= false;\n          node.typeAnnotation ??= undefined;\n          return;\n        case \"TSParameterProperty\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSEmptyBodyFunctionExpression\":\n          node.body = null;\n        /* fallthrough */\n        case \"TSDeclareFunction\":\n        case \"FunctionDeclaration\":\n        case \"FunctionExpression\":\n        case \"ClassMethod\":\n        case \"ClassPrivateMethod\":\n          node.declare ??= false;\n          node.returnType ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"Property\":\n          node.optional ??= false;\n          return;\n        case \"TSMethodSignature\":\n        case \"TSPropertySignature\":\n          node.optional ??= false;\n        /* fallthrough */\n        case \"TSIndexSignature\":\n          node.accessibility ??= undefined;\n          node.readonly ??= false;\n          node.static ??= false;\n          return;\n        case \"TSAbstractPropertyDefinition\":\n        case \"PropertyDefinition\":\n        case \"TSAbstractAccessorProperty\":\n        case \"AccessorProperty\":\n          node.declare ??= false;\n          node.definite ??= false;\n          node.readonly ??= false;\n          node.typeAnnotation ??= undefined;\n        /* fallthrough */\n        case \"TSAbstractMethodDefinition\":\n        case \"MethodDefinition\":\n          node.accessibility ??= undefined;\n          node.decorators ??= [];\n          node.override ??= false;\n          node.optional ??= false;\n          return;\n        case \"ClassExpression\":\n          node.id ??= null;\n        /* fallthrough */\n        case \"ClassDeclaration\":\n          node.abstract ??= false;\n          node.declare ??= false;\n          node.decorators ??= [];\n          node.implements ??= [];\n          node.superTypeArguments ??= undefined;\n          node.typeParameters ??= undefined;\n          return;\n        case \"TSTypeAliasDeclaration\":\n        case \"VariableDeclaration\":\n          node.declare ??= false;\n          return;\n        case \"VariableDeclarator\":\n          node.definite ??= false;\n          return;\n        case \"TSEnumDeclaration\":\n          node.const ??= false;\n          node.declare ??= false;\n          return;\n        case \"TSEnumMember\":\n          node.computed ??= false;\n          return;\n        case \"TSImportType\":\n          node.qualifier ??= null;\n          node.options ??= null;\n          if (process.env.BABEL_8_BREAKING) {\n            node.typeArguments ??= null;\n          }\n          return;\n        case \"TSInterfaceDeclaration\":\n          node.declare ??= false;\n          node.extends ??= [];\n          return;\n        case \"TSModuleDeclaration\":\n          node.declare ??= false;\n          node.global ??= node.kind === \"global\";\n          return;\n        case \"TSTypeParameter\":\n          node.const ??= false;\n          node.in ??= false;\n          node.out ??= false;\n          return;\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n", "import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.ts                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.ts                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/node.ts                                               *\n     * ============================================================ */\n\n    cloneIdentifier<T extends N.Identifier | N.Placeholder>(node: T): T {\n      const cloned = super.cloneIdentifier(node);\n      if (cloned.type === \"Placeholder\") {\n        cloned.expectedNode = (node as N.Placeholder).expectedNode;\n      }\n      return cloned;\n    }\n\n    cloneStringLiteral<\n      T extends N.EstreeLiteral | N.StringLiteral | N.Placeholder,\n    >(node: T): T {\n      if (node.type === \"Placeholder\") {\n        return this.cloneIdentifier(node) as T;\n      }\n      return super.cloneStringLiteral(node);\n    }\n\n    /* ============================================================ *\n     * parser/lval.ts                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.ts                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (\n        this.state.start >\n        this.offsetToSourcePos(this.state.lastTokEndLoc.index)\n      ) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n", "import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          this.castNodeTo(identifier, \"V8IntrinsicIdentifier\");\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n", "import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = process.env.BABEL_8_BREAKING\n  ? [\"fsharp\", \"hack\"]\n  : [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (\n          topicToken === \"#\" &&\n          pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n        ) {\n          throw new Error(\n            `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n          );\n        }\n      }\n    } else if (\n      !process.env.BABEL_8_BREAKING &&\n      proposal === \"smart\" &&\n      pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\"\n    ) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please migrate to import attributes instead.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"deprecatedImportAssert\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (pluginsMap.has(\"importAssertions\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`importAssertions` has been removed in Babel 8, please use import attributes instead.\" +\n          \" To use the non-standard `assert` syntax you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else if (pluginsMap.has(\"deprecatedImportAssert\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and deprecatedImportAssert plugins.\",\n      );\n    }\n  }\n  if (\n    !pluginsMap.has(\"deprecatedImportAssert\") &&\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.get(\"importAttributes\").deprecatedAssertSyntax\n  ) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'importAttributes' plugin has been removed in Babel 8. If you need to enable support \" +\n          \"for the deprecated `assert` syntax, you can enable the `deprecatedImportAssert` parser plugin.\",\n      );\n    } else {\n      pluginsMap.set(\"deprecatedImportAssert\", {});\n    }\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"The 'recordAndTuple' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    } else {\n      const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n      if (syntaxType != null) {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n\n  if (process.env.BABEL_8_BREAKING) {\n    if (pluginsMap.has(\"decimal\")) {\n      throw new Error(\n        \"The 'decimal' plugin has been removed in Babel 8. Please remove it from your configuration.\",\n      );\n    }\n    if (pluginsMap.has(\"importReflection\")) {\n      throw new Error(\n        \"The 'importReflection' plugin has been removed in Babel 8. Use 'sourcePhaseImports' instead, and \" +\n          \"replace 'import module' with 'import source' in your code.\",\n      );\n    }\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n", "// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport { OptionFlags, type SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    sawProto: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): boolean {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return sawProto;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return true;\n      }\n      if (sawProto) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      return true;\n    }\n\n    return sawProto;\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" &&\n      this.offsetToSourcePos(expr.start) === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.optionFlags & OptionFlags.Tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(refExpressionErrors: ExpressionErrors) {\n    refExpressionErrors.optionalParametersLoc = this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isYield = this.isContextual(tt._yield);\n    if (isYield) {\n      if (this.prodParam.hasYield) {\n        this.next();\n        let left = this.parseYield(startLoc);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (isYield) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.YieldNotInGeneratorFunction, startLoc);\n        return this.parseYield(startLoc);\n      }\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          op === tt.pipeline &&\n          // @ts-expect-error: Only in Babel 7\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          // @ts-expect-error: Babel 7 only\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n        ) {\n          return this.withTopicBindingContext(() => {\n            if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n              throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n            }\n            return this.parseSmartPipelineBodyInStyle(\n              this.parseExprOpBaseRightExpr(op, prec),\n              startLoc,\n            );\n          });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousPrefixOrIdentifier()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          return this.stopParseSubscript(base, state);\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        return this.stopParseSubscript(base, state);\n      }\n    }\n  }\n\n  stopParseSubscript(\n    this: Parser,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n  ) {\n    state.stop = true;\n    return base;\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as Undone<N.OptionalMemberExpression>).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      (node as Undone<N.OptionalCallExpression>).optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      this.offsetToSourcePos(base.start) === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: Undone<N.Node> | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.optionFlags & OptionFlags.CreateImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (!process.env.BABEL_8_BREAKING) {\n          if (type === tt.decimal) {\n            return this.parseDecimalLiteral(this.state.value);\n          } else if (type === tt.bracketBarL || type === tt.bracketHashL) {\n            return this.parseArrayLike(\n              this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n              /* canBePattern */ false,\n              /* isTuple */ true,\n            );\n          } else if (type === tt.braceBarL || type === tt.braceHashL) {\n            return this.parseObjectLike(\n              this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n              /* isPattern */ false,\n              /* isRecord */ true,\n            );\n          }\n        }\n\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      if (process.env.BABEL_8_BREAKING || pipeProposal === \"hack\") {\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PipeTopicUnbound, startLoc);\n        }\n\n        // Register the topic reference so that its pipe body knows\n        // that its topic was used at least once.\n        this.registerTopicReference();\n\n        return this.finishNode(node, \"TopicReference\");\n      } else {\n        // pipeProposal is \"smart\"\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          this.raise(Errors.PrimaryTopicNotAllowed, startLoc);\n        }\n        this.registerTopicReference();\n        return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n      }\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\"(Babel 7) or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !(this.optionFlags & OptionFlags.AllowSuperOutsideMethod)\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!(this.optionFlags & OptionFlags.CreateImportExpressions)) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  // TODO: Remove this in Babel 8\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(\n      node,\n      \"raw\",\n      this.input.slice(this.offsetToSourcePos(node.start), this.state.end),\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!(this.optionFlags & OptionFlags.CreateParenthesizedExpressions)) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !(this.optionFlags & OptionFlags.AllowNewTargetOutsideFunction)\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    let sawProto = false;\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        sawProto = this.checkProto(\n          prop,\n          isRecord,\n          sawProto,\n          refExpressionErrors,\n        );\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: Undone<N.Node>): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishObjectProperty(prop);\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          this.cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = this.cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishObjectProperty(prop);\n    }\n  }\n\n  finishObjectProperty(node: Undone<N.ObjectProperty>) {\n    return this.finishNode(node, \"ObjectProperty\");\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            if (!process.env.BABEL_8_BREAKING && type === tt.decimal) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.optionFlags & OptionFlags.AllowAwaitOutsideFunction &&\n        !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (\n      !this.scope.inFunction &&\n      !(this.optionFlags & OptionFlags.AllowAwaitOutsideFunction)\n    ) {\n      if (this.isAmbiguousPrefixOrIdentifier()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousPrefixOrIdentifier(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser, startLoc: Position): N.YieldExpression {\n    const node = this.startNodeAt<N.YieldExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      node,\n    );\n\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(tt.comma)) {\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n\n        if (this.eat(tt.comma) && !this.match(tt.parenR)) {\n          // keep consuming arguments, to then throw ImportCallArity\n          // instead of \"expected )\"\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(tt.comma) && !this.match(tt.parenR));\n\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    // @ts-expect-error Remove this in Babel 8\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    // TODO(Babel 8): Remove this method\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      // @ts-expect-error Babel 7 only\n      this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])\n    ) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\"(Babel 7), \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n", "import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport { OptionFlags, type SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport type { Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(\n  tokens: (Token | N.Comment)[],\n  input: string,\n  startIndex: number,\n) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.optionFlags & OptionFlags.Tokens) {\n      file.tokens = babel7CompatTokens(\n        this.tokens,\n        this.input,\n        this.startIndex,\n      );\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !(this.optionFlags & OptionFlags.AllowUndeclaredExports) &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.ExpressionStatement): N.Directive {\n    const directive = this.castNodeTo(stmt, \"Directive\");\n\n    const directiveLiteral = this.castNodeTo(\n      stmt.expression,\n      \"DirectiveLiteral\",\n    );\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(\n      this.offsetToSourcePos(directiveLiteral.start),\n      this.offsetToSourcePos(directiveLiteral.end),\n    );\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directive.value = directiveLiteral;\n    delete stmt.expression;\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  allowsForUsing(): boolean {\n    const { type, containsEsc, end } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `for( using of` must start either a for-lhs-of statement\n      // or a for lexical declaration\n      const nextCharAfterOf = this.lookaheadCharCodeSince(end);\n      if (\n        nextCharAfterOf !== charCodes.equalsTo &&\n        nextCharAfterOf !== charCodes.colon &&\n        // recover from `for(using of;...);`\n        nextCharAfterOf !== charCodes.semicolon\n      ) {\n        return false;\n      }\n    }\n    if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n    return false;\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (\n          !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n          !topLevel\n        ) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportNamedDeclaration\n            >,\n            decorators,\n          );\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (\n      !(this.optionFlags & OptionFlags.AllowImportExportEverywhere) &&\n      !this.inModule\n    ) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators?.length) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr, startLoc);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n  ): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAt<N.CallExpression>(startLoc);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.allowsForUsing());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (\n      !this.prodParam.hasReturn &&\n      !(this.optionFlags & OptionFlags.AllowReturnOutsideFunction)\n    ) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start),\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): stmt is N.ExpressionStatement {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      this.sawUnambiguousESM = true;\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      } else {\n        node2.attributes = [];\n      }\n      node2.declaration = null;\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      } else {\n        node.attributes = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = this.cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = this.cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      (!process.env.BABEL_8_BREAKING && this.isContextual(tt._module))\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (\n          (!process.env.BABEL_8_BREAKING && phase === \"module\") ||\n          phase === \"source\"\n        ) {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (!process.env.BABEL_8_BREAKING && phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `source` in `import source x from \"x\"`, disambiguating\n   * `import source from \"x\"` and `import source from from \"x\"`.\n   *\n   * This function might return an identifier representing the `source`\n   * if it eats `source` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins, and for parsing `import defer`.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    if (!process.env.BABEL_8_BREAKING) {\n      // eslint-disable-next-line no-var\n      var useWith = false;\n    }\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING && this.hasPlugin(\"moduleAttributes\")) {\n        attributes = this.parseModuleAttributes();\n        this.addExtra(node, \"deprecatedWithLegacySyntax\", true);\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      if (!process.env.BABEL_8_BREAKING) {\n        useWith = true;\n      }\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (\n        !this.hasPlugin(\"deprecatedImportAssert\") &&\n        (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\"))\n      ) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (process.env.BABEL_8_BREAKING || !this.hasPlugin(\"importAssertions\")) {\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n\n    if (\n      !process.env.BABEL_8_BREAKING &&\n      !useWith &&\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = this.cloneIdentifier(imported as N.Identifier);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions, OptionFlags } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n\n    let optionFlags = 0;\n    if (options.allowAwaitOutsideFunction) {\n      optionFlags |= OptionFlags.AllowAwaitOutsideFunction;\n    }\n    if (options.allowReturnOutsideFunction) {\n      optionFlags |= OptionFlags.AllowReturnOutsideFunction;\n    }\n    if (options.allowImportExportEverywhere) {\n      optionFlags |= OptionFlags.AllowImportExportEverywhere;\n    }\n    if (options.allowSuperOutsideMethod) {\n      optionFlags |= OptionFlags.AllowSuperOutsideMethod;\n    }\n    if (options.allowUndeclaredExports) {\n      optionFlags |= OptionFlags.AllowUndeclaredExports;\n    }\n    if (options.allowNewTargetOutsideFunction) {\n      optionFlags |= OptionFlags.AllowNewTargetOutsideFunction;\n    }\n    if (options.allowYieldOutsideFunction) {\n      optionFlags |= OptionFlags.AllowYieldOutsideFunction;\n    }\n    if (options.ranges) {\n      optionFlags |= OptionFlags.Ranges;\n    }\n    if (options.tokens) {\n      optionFlags |= OptionFlags.Tokens;\n    }\n    if (options.createImportExpressions) {\n      optionFlags |= OptionFlags.CreateImportExpressions;\n    }\n    if (options.createParenthesizedExpressions) {\n      optionFlags |= OptionFlags.CreateParenthesizedExpressions;\n    }\n    if (options.errorRecovery) {\n      optionFlags |= OptionFlags.ErrorRecovery;\n    }\n    if (options.attachComment) {\n      optionFlags |= OptionFlags.AttachComment;\n    }\n    if (options.annexB) {\n      optionFlags |= OptionFlags.AnnexB;\n    }\n\n    this.optionFlags = optionFlags;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n", "import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nexport type {\n  PluginConfig as ParserPlugin,\n  DecoratorsPluginOptions,\n  FlowPluginOptions,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n  TypeScriptPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\nexport type { Token } from \"./tokenizer/index.ts\";\n\n// TODO: Rather than type-casting the internal AST definitions to the\n// @babel/types one, we should actually unify them.\nimport type { Expression, File } from \"@babel/types\";\nexport type { Expression, File };\n\nexport type ParserOptions = Partial<Options>;\n\nexport interface ParseError {\n  code: string;\n  reasonCode: string;\n}\nexport type ParseResult<Result extends File | Expression = File> = Result & {\n  errors: null | ParseError[];\n};\n\n/**\n * Parse the provided code as an entire ECMAScript program.\n */\nexport function parse(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<File> {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast as unknown as ParseResult<File>;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(\n            options,\n            input,\n          ).parse() as unknown as ParseResult<File>;\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast as unknown as ParseResult<File>;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(\n          options,\n          input,\n        ).parse() as unknown as ParseResult<File>;\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse() as unknown as ParseResult<File>;\n  }\n}\n\nexport function parseExpression(\n  input: string,\n  options?: ParserOptions,\n): ParseResult<Expression> {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression() as unknown as ParseResult<Expression>;\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n", "(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.estreeWalker = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// @ts-check\n\t/** @typedef { import('estree').BaseNode} BaseNode */\n\n\t/** @typedef {{\n\t\tskip: () => void;\n\t\tremove: () => void;\n\t\treplace: (node: BaseNode) => void;\n\t}} WalkerContext */\n\n\tclass WalkerBase {\n\t\tconstructor() {\n\t\t\t/** @type {boolean} */\n\t\t\tthis.should_skip = false;\n\n\t\t\t/** @type {boolean} */\n\t\t\tthis.should_remove = false;\n\n\t\t\t/** @type {BaseNode | null} */\n\t\t\tthis.replacement = null;\n\n\t\t\t/** @type {WalkerContext} */\n\t\t\tthis.context = {\n\t\t\t\tskip: () => (this.should_skip = true),\n\t\t\t\tremove: () => (this.should_remove = true),\n\t\t\t\treplace: (node) => (this.replacement = node)\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {any} parent\n\t\t * @param {string} prop\n\t\t * @param {number} index\n\t\t * @param {BaseNode} node\n\t\t */\n\t\treplace(parent, prop, index, node) {\n\t\t\tif (parent) {\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tparent[prop][index] = node;\n\t\t\t\t} else {\n\t\t\t\t\tparent[prop] = node;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {any} parent\n\t\t * @param {string} prop\n\t\t * @param {number} index\n\t\t */\n\t\tremove(parent, prop, index) {\n\t\t\tif (parent) {\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tparent[prop].splice(index, 1);\n\t\t\t\t} else {\n\t\t\t\t\tdelete parent[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// @ts-check\n\n\t/** @typedef { import('estree').BaseNode} BaseNode */\n\t/** @typedef { import('./walker.js').WalkerContext} WalkerContext */\n\n\t/** @typedef {(\n\t *    this: WalkerContext,\n\t *    node: BaseNode,\n\t *    parent: BaseNode,\n\t *    key: string,\n\t *    index: number\n\t * ) => void} SyncHandler */\n\n\tclass SyncWalker extends WalkerBase {\n\t\t/**\n\t\t *\n\t\t * @param {SyncHandler} enter\n\t\t * @param {SyncHandler} leave\n\t\t */\n\t\tconstructor(enter, leave) {\n\t\t\tsuper();\n\n\t\t\t/** @type {SyncHandler} */\n\t\t\tthis.enter = enter;\n\n\t\t\t/** @type {SyncHandler} */\n\t\t\tthis.leave = leave;\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {BaseNode} node\n\t\t * @param {BaseNode} parent\n\t\t * @param {string} [prop]\n\t\t * @param {number} [index]\n\t\t * @returns {BaseNode}\n\t\t */\n\t\tvisit(node, parent, prop, index) {\n\t\t\tif (node) {\n\t\t\t\tif (this.enter) {\n\t\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\t\tthis.should_skip = false;\n\t\t\t\t\tthis.should_remove = false;\n\t\t\t\t\tthis.replacement = null;\n\n\t\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\t\tif (this.replacement) {\n\t\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.should_remove) {\n\t\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\t\tif (skipped) return node;\n\t\t\t\t\tif (removed) return null;\n\t\t\t\t}\n\n\t\t\t\tfor (const key in node) {\n\t\t\t\t\tconst value = node[key];\n\n\t\t\t\t\tif (typeof value !== \"object\") {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t\t\tif (value[i] !== null && typeof value[i].type === 'string') {\n\t\t\t\t\t\t\t\tif (!this.visit(value[i], node, key, i)) {\n\t\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== null && typeof value.type === \"string\") {\n\t\t\t\t\t\tthis.visit(value, node, key, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.leave) {\n\t\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\t\tthis.replacement = null;\n\t\t\t\t\tthis.should_remove = false;\n\n\t\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\t\tif (this.replacement) {\n\t\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.should_remove) {\n\t\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\t\tthis.replacement = _replacement;\n\t\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\t\tif (removed) return null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn node;\n\t\t}\n\t}\n\n\t// @ts-check\n\n\t/** @typedef { import('estree').BaseNode} BaseNode */\n\t/** @typedef { import('./walker').WalkerContext} WalkerContext */\n\n\t/** @typedef {(\n\t *    this: WalkerContext,\n\t *    node: BaseNode,\n\t *    parent: BaseNode,\n\t *    key: string,\n\t *    index: number\n\t * ) => Promise<void>} AsyncHandler */\n\n\tclass AsyncWalker extends WalkerBase {\n\t\t/**\n\t\t *\n\t\t * @param {AsyncHandler} enter\n\t\t * @param {AsyncHandler} leave\n\t\t */\n\t\tconstructor(enter, leave) {\n\t\t\tsuper();\n\n\t\t\t/** @type {AsyncHandler} */\n\t\t\tthis.enter = enter;\n\n\t\t\t/** @type {AsyncHandler} */\n\t\t\tthis.leave = leave;\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {BaseNode} node\n\t\t * @param {BaseNode} parent\n\t\t * @param {string} [prop]\n\t\t * @param {number} [index]\n\t\t * @returns {Promise<BaseNode>}\n\t\t */\n\t\tasync visit(node, parent, prop, index) {\n\t\t\tif (node) {\n\t\t\t\tif (this.enter) {\n\t\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\t\tthis.should_skip = false;\n\t\t\t\t\tthis.should_remove = false;\n\t\t\t\t\tthis.replacement = null;\n\n\t\t\t\t\tawait this.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\t\tif (this.replacement) {\n\t\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.should_remove) {\n\t\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\t\tif (skipped) return node;\n\t\t\t\t\tif (removed) return null;\n\t\t\t\t}\n\n\t\t\t\tfor (const key in node) {\n\t\t\t\t\tconst value = node[key];\n\n\t\t\t\t\tif (typeof value !== \"object\") {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t\t\tif (value[i] !== null && typeof value[i].type === 'string') {\n\t\t\t\t\t\t\t\tif (!(await this.visit(value[i], node, key, i))) {\n\t\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== null && typeof value.type === \"string\") {\n\t\t\t\t\t\tawait this.visit(value, node, key, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.leave) {\n\t\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\t\tthis.replacement = null;\n\t\t\t\t\tthis.should_remove = false;\n\n\t\t\t\t\tawait this.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\t\tif (this.replacement) {\n\t\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.should_remove) {\n\t\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\t\tthis.replacement = _replacement;\n\t\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\t\tif (removed) return null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn node;\n\t\t}\n\t}\n\n\t// @ts-check\n\n\t/** @typedef { import('estree').BaseNode} BaseNode */\n\t/** @typedef { import('./sync.js').SyncHandler} SyncHandler */\n\t/** @typedef { import('./async.js').AsyncHandler} AsyncHandler */\n\n\t/**\n\t *\n\t * @param {BaseNode} ast\n\t * @param {{\n\t *   enter?: SyncHandler\n\t *   leave?: SyncHandler\n\t * }} walker\n\t * @returns {BaseNode}\n\t */\n\tfunction walk(ast, { enter, leave }) {\n\t\tconst instance = new SyncWalker(enter, leave);\n\t\treturn instance.visit(ast, null);\n\t}\n\n\t/**\n\t *\n\t * @param {BaseNode} ast\n\t * @param {{\n\t *   enter?: AsyncHandler\n\t *   leave?: AsyncHandler\n\t * }} walker\n\t * @returns {Promise<BaseNode>}\n\t */\n\tasync function asyncWalk(ast, { enter, leave }) {\n\t\tconst instance = new AsyncWalker(enter, leave);\n\t\treturn await instance.visit(ast, null);\n\t}\n\n\texports.asyncWalk = asyncWalk;\n\texports.walk = walk;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\nvar MAX_CACHED_INPUTS = 32;\n\n/**\n * Takes some function `f(input) -> result` and returns a memoized version of\n * `f`.\n *\n * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The\n * memoization is a dumb-simple, linear least-recently-used cache.\n */\nfunction lruMemoize(f) {\n  var cache = [];\n\n  return function(input) {\n    for (var i = 0; i < cache.length; i++) {\n      if (cache[i].input === input) {\n        var temp = cache[0];\n        cache[0] = cache[i];\n        cache[i] = temp;\n        return cache[0].result;\n      }\n    }\n\n    var result = f(input);\n\n    cache.unshift({\n      input,\n      result,\n    });\n\n    if (cache.length > MAX_CACHED_INPUTS) {\n      cache.pop();\n    }\n\n    return result;\n  };\n}\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nvar normalize = lruMemoize(function normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n  // Split the path into parts between `/` characters. This is much faster than\n  // using `.split(/\\/+/g)`.\n  var parts = [];\n  var start = 0;\n  var i = 0;\n  while (true) {\n    start = i;\n    i = path.indexOf(\"/\", start);\n    if (i === -1) {\n      parts.push(path.slice(start));\n      break;\n    } else {\n      parts.push(path.slice(start, i));\n      while (i < path.length && path[i] === \"/\") {\n        i++;\n      }\n    }\n  }\n\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n});\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\nfunction compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._ignoreInvalidMapping = util.getArg(aArgs, 'ignoreInvalidMapping', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer, generatorOps) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator(Object.assign(generatorOps || {}, {\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    }));\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      if (this._validateMapping(generated, original, source, name) === false) {\n        return;\n      }\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n      var message = 'original.line and original.column are not numbers -- you probably meant to omit ' +\n      'the original mapping entirely and only map the generated position. If so, pass ' +\n      'null for the original mapping instead of an object with empty or null values.'\n\n      if (this._ignoreInvalidMapping) {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(message);\n        }\n        return false;\n      } else {\n        throw new Error(message);\n      }\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      var message = 'Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      });\n\n      if (this._ignoreInvalidMapping) {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(message);\n        }\n        return false;\n      } else {\n        throw new Error(message)\n      }\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\nfunction SortTemplate(comparator) {\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot, false) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n  return doQuickSort;\n}\n\nfunction cloneSort(comparator) {\n  let template = SortTemplate.toString();\n  let templateFn = new Function(`return ${template}`)();\n  return templateFn(comparator);\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\n\nlet sortCache = new WeakMap();\nexports.quickSort = function (ary, comparator, start = 0) {\n  let doQuickSort = sortCache.get(comparator);\n  if (doQuickSort === void 0) {\n    doQuickSort = cloneSort(comparator);\n    sortCache.set(comparator, doQuickSort);\n  }\n  doQuickSort(ary, comparator, start, ary.length - 1);\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    var boundCallback = aCallback.bind(context);\n    var names = this._names;\n    var sources = this._sources;\n    var sourceMapURL = this._sourceMapURL;\n\n    for (var i = 0, n = mappings.length; i < n; i++) {\n      var mapping = mappings[i];\n      var source = mapping.source === null ? null : sources.at(mapping.source);\n      if(source !== null) {\n        source = util.computeSourceURL(sourceRoot, source, sourceMapURL);\n      }\n      boundCallback({\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : names.at(mapping.name)\n      });\n    }\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\nconst compareGenerated = util.compareByGeneratedPositionsDeflatedNoLine;\nfunction sortGenerated(array, start) {\n  let l = array.length;\n  let n = array.length - start;\n  if (n <= 1) {\n    return;\n  } else if (n == 2) {\n    let a = array[start];\n    let b = array[start + 1];\n    if (compareGenerated(a, b) > 0) {\n      array[start] = b;\n      array[start + 1] = a;\n    }\n  } else if (n < 20) {\n    for (let i = start; i < l; i++) {\n      for (let j = i; j > start; j--) {\n        let a = array[j - 1];\n        let b = array[j];\n        if (compareGenerated(a, b) <= 0) {\n          break;\n        }\n        array[j - 1] = b;\n        array[j] = a;\n      }\n    }\n  } else {\n    quickSort(array, compareGenerated, start);\n  }\n}\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    let subarrayStart = 0;\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n\n        sortGenerated(generatedMappings, subarrayStart);\n        subarrayStart = generatedMappings.length;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = [];\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          let currentSource = mapping.source;\n          while (originalMappings.length <= currentSource) {\n            originalMappings.push(null);\n          }\n          if (originalMappings[currentSource] === null) {\n            originalMappings[currentSource] = [];\n          }\n          originalMappings[currentSource].push(mapping);\n        }\n      }\n    }\n\n    sortGenerated(generatedMappings, subarrayStart);\n    this.__generatedMappings = generatedMappings;\n\n    for (var i = 0; i < originalMappings.length; i++) {\n      if (originalMappings[i] != null) {\n        quickSort(originalMappings[i], util.compareByOriginalPositionsNoSource);\n      }\n    }\n    this.__originalMappings = [].concat(...originalMappings);\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content || content === '') {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if(source !== null) {\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n", "/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n", "/**\n* @vue/compiler-core v3.5.14\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar shared = require('@vue/shared');\nvar decode_js = require('entities/lib/decode.js');\nvar parser = require('@babel/parser');\nvar estreeWalker = require('estree-walker');\nvar sourceMapJs = require('source-map-js');\n\nconst FRAGMENT = Symbol(`Fragment` );\nconst TELEPORT = Symbol(`Teleport` );\nconst SUSPENSE = Symbol(`Suspense` );\nconst KEEP_ALIVE = Symbol(`KeepAlive` );\nconst BASE_TRANSITION = Symbol(\n  `BaseTransition` \n);\nconst OPEN_BLOCK = Symbol(`openBlock` );\nconst CREATE_BLOCK = Symbol(`createBlock` );\nconst CREATE_ELEMENT_BLOCK = Symbol(\n  `createElementBlock` \n);\nconst CREATE_VNODE = Symbol(`createVNode` );\nconst CREATE_ELEMENT_VNODE = Symbol(\n  `createElementVNode` \n);\nconst CREATE_COMMENT = Symbol(\n  `createCommentVNode` \n);\nconst CREATE_TEXT = Symbol(\n  `createTextVNode` \n);\nconst CREATE_STATIC = Symbol(\n  `createStaticVNode` \n);\nconst RESOLVE_COMPONENT = Symbol(\n  `resolveComponent` \n);\nconst RESOLVE_DYNAMIC_COMPONENT = Symbol(\n  `resolveDynamicComponent` \n);\nconst RESOLVE_DIRECTIVE = Symbol(\n  `resolveDirective` \n);\nconst RESOLVE_FILTER = Symbol(\n  `resolveFilter` \n);\nconst WITH_DIRECTIVES = Symbol(\n  `withDirectives` \n);\nconst RENDER_LIST = Symbol(`renderList` );\nconst RENDER_SLOT = Symbol(`renderSlot` );\nconst CREATE_SLOTS = Symbol(`createSlots` );\nconst TO_DISPLAY_STRING = Symbol(\n  `toDisplayString` \n);\nconst MERGE_PROPS = Symbol(`mergeProps` );\nconst NORMALIZE_CLASS = Symbol(\n  `normalizeClass` \n);\nconst NORMALIZE_STYLE = Symbol(\n  `normalizeStyle` \n);\nconst NORMALIZE_PROPS = Symbol(\n  `normalizeProps` \n);\nconst GUARD_REACTIVE_PROPS = Symbol(\n  `guardReactiveProps` \n);\nconst TO_HANDLERS = Symbol(`toHandlers` );\nconst CAMELIZE = Symbol(`camelize` );\nconst CAPITALIZE = Symbol(`capitalize` );\nconst TO_HANDLER_KEY = Symbol(\n  `toHandlerKey` \n);\nconst SET_BLOCK_TRACKING = Symbol(\n  `setBlockTracking` \n);\nconst PUSH_SCOPE_ID = Symbol(`pushScopeId` );\nconst POP_SCOPE_ID = Symbol(`popScopeId` );\nconst WITH_CTX = Symbol(`withCtx` );\nconst UNREF = Symbol(`unref` );\nconst IS_REF = Symbol(`isRef` );\nconst WITH_MEMO = Symbol(`withMemo` );\nconst IS_MEMO_SAME = Symbol(`isMemoSame` );\nconst helperNameMap = {\n  [FRAGMENT]: `Fragment`,\n  [TELEPORT]: `Teleport`,\n  [SUSPENSE]: `Suspense`,\n  [KEEP_ALIVE]: `KeepAlive`,\n  [BASE_TRANSITION]: `BaseTransition`,\n  [OPEN_BLOCK]: `openBlock`,\n  [CREATE_BLOCK]: `createBlock`,\n  [CREATE_ELEMENT_BLOCK]: `createElementBlock`,\n  [CREATE_VNODE]: `createVNode`,\n  [CREATE_ELEMENT_VNODE]: `createElementVNode`,\n  [CREATE_COMMENT]: `createCommentVNode`,\n  [CREATE_TEXT]: `createTextVNode`,\n  [CREATE_STATIC]: `createStaticVNode`,\n  [RESOLVE_COMPONENT]: `resolveComponent`,\n  [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,\n  [RESOLVE_DIRECTIVE]: `resolveDirective`,\n  [RESOLVE_FILTER]: `resolveFilter`,\n  [WITH_DIRECTIVES]: `withDirectives`,\n  [RENDER_LIST]: `renderList`,\n  [RENDER_SLOT]: `renderSlot`,\n  [CREATE_SLOTS]: `createSlots`,\n  [TO_DISPLAY_STRING]: `toDisplayString`,\n  [MERGE_PROPS]: `mergeProps`,\n  [NORMALIZE_CLASS]: `normalizeClass`,\n  [NORMALIZE_STYLE]: `normalizeStyle`,\n  [NORMALIZE_PROPS]: `normalizeProps`,\n  [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,\n  [TO_HANDLERS]: `toHandlers`,\n  [CAMELIZE]: `camelize`,\n  [CAPITALIZE]: `capitalize`,\n  [TO_HANDLER_KEY]: `toHandlerKey`,\n  [SET_BLOCK_TRACKING]: `setBlockTracking`,\n  [PUSH_SCOPE_ID]: `pushScopeId`,\n  [POP_SCOPE_ID]: `popScopeId`,\n  [WITH_CTX]: `withCtx`,\n  [UNREF]: `unref`,\n  [IS_REF]: `isRef`,\n  [WITH_MEMO]: `withMemo`,\n  [IS_MEMO_SAME]: `isMemoSame`\n};\nfunction registerRuntimeHelpers(helpers) {\n  Object.getOwnPropertySymbols(helpers).forEach((s) => {\n    helperNameMap[s] = helpers[s];\n  });\n}\n\nconst Namespaces = {\n  \"HTML\": 0,\n  \"0\": \"HTML\",\n  \"SVG\": 1,\n  \"1\": \"SVG\",\n  \"MATH_ML\": 2,\n  \"2\": \"MATH_ML\"\n};\nconst NodeTypes = {\n  \"ROOT\": 0,\n  \"0\": \"ROOT\",\n  \"ELEMENT\": 1,\n  \"1\": \"ELEMENT\",\n  \"TEXT\": 2,\n  \"2\": \"TEXT\",\n  \"COMMENT\": 3,\n  \"3\": \"COMMENT\",\n  \"SIMPLE_EXPRESSION\": 4,\n  \"4\": \"SIMPLE_EXPRESSION\",\n  \"INTERPOLATION\": 5,\n  \"5\": \"INTERPOLATION\",\n  \"ATTRIBUTE\": 6,\n  \"6\": \"ATTRIBUTE\",\n  \"DIRECTIVE\": 7,\n  \"7\": \"DIRECTIVE\",\n  \"COMPOUND_EXPRESSION\": 8,\n  \"8\": \"COMPOUND_EXPRESSION\",\n  \"IF\": 9,\n  \"9\": \"IF\",\n  \"IF_BRANCH\": 10,\n  \"10\": \"IF_BRANCH\",\n  \"FOR\": 11,\n  \"11\": \"FOR\",\n  \"TEXT_CALL\": 12,\n  \"12\": \"TEXT_CALL\",\n  \"VNODE_CALL\": 13,\n  \"13\": \"VNODE_CALL\",\n  \"JS_CALL_EXPRESSION\": 14,\n  \"14\": \"JS_CALL_EXPRESSION\",\n  \"JS_OBJECT_EXPRESSION\": 15,\n  \"15\": \"JS_OBJECT_EXPRESSION\",\n  \"JS_PROPERTY\": 16,\n  \"16\": \"JS_PROPERTY\",\n  \"JS_ARRAY_EXPRESSION\": 17,\n  \"17\": \"JS_ARRAY_EXPRESSION\",\n  \"JS_FUNCTION_EXPRESSION\": 18,\n  \"18\": \"JS_FUNCTION_EXPRESSION\",\n  \"JS_CONDITIONAL_EXPRESSION\": 19,\n  \"19\": \"JS_CONDITIONAL_EXPRESSION\",\n  \"JS_CACHE_EXPRESSION\": 20,\n  \"20\": \"JS_CACHE_EXPRESSION\",\n  \"JS_BLOCK_STATEMENT\": 21,\n  \"21\": \"JS_BLOCK_STATEMENT\",\n  \"JS_TEMPLATE_LITERAL\": 22,\n  \"22\": \"JS_TEMPLATE_LITERAL\",\n  \"JS_IF_STATEMENT\": 23,\n  \"23\": \"JS_IF_STATEMENT\",\n  \"JS_ASSIGNMENT_EXPRESSION\": 24,\n  \"24\": \"JS_ASSIGNMENT_EXPRESSION\",\n  \"JS_SEQUENCE_EXPRESSION\": 25,\n  \"25\": \"JS_SEQUENCE_EXPRESSION\",\n  \"JS_RETURN_STATEMENT\": 26,\n  \"26\": \"JS_RETURN_STATEMENT\"\n};\nconst ElementTypes = {\n  \"ELEMENT\": 0,\n  \"0\": \"ELEMENT\",\n  \"COMPONENT\": 1,\n  \"1\": \"COMPONENT\",\n  \"SLOT\": 2,\n  \"2\": \"SLOT\",\n  \"TEMPLATE\": 3,\n  \"3\": \"TEMPLATE\"\n};\nconst ConstantTypes = {\n  \"NOT_CONSTANT\": 0,\n  \"0\": \"NOT_CONSTANT\",\n  \"CAN_SKIP_PATCH\": 1,\n  \"1\": \"CAN_SKIP_PATCH\",\n  \"CAN_CACHE\": 2,\n  \"2\": \"CAN_CACHE\",\n  \"CAN_STRINGIFY\": 3,\n  \"3\": \"CAN_STRINGIFY\"\n};\nconst locStub = {\n  start: { line: 1, column: 1, offset: 0 },\n  end: { line: 1, column: 1, offset: 0 },\n  source: \"\"\n};\nfunction createRoot(children, source = \"\") {\n  return {\n    type: 0,\n    source,\n    children,\n    helpers: /* @__PURE__ */ new Set(),\n    components: [],\n    directives: [],\n    hoists: [],\n    imports: [],\n    cached: [],\n    temps: 0,\n    codegenNode: void 0,\n    loc: locStub\n  };\n}\nfunction createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent = false, loc = locStub) {\n  if (context) {\n    if (isBlock) {\n      context.helper(OPEN_BLOCK);\n      context.helper(getVNodeBlockHelper(context.inSSR, isComponent));\n    } else {\n      context.helper(getVNodeHelper(context.inSSR, isComponent));\n    }\n    if (directives) {\n      context.helper(WITH_DIRECTIVES);\n    }\n  }\n  return {\n    type: 13,\n    tag,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    directives,\n    isBlock,\n    disableTracking,\n    isComponent,\n    loc\n  };\n}\nfunction createArrayExpression(elements, loc = locStub) {\n  return {\n    type: 17,\n    loc,\n    elements\n  };\n}\nfunction createObjectExpression(properties, loc = locStub) {\n  return {\n    type: 15,\n    loc,\n    properties\n  };\n}\nfunction createObjectProperty(key, value) {\n  return {\n    type: 16,\n    loc: locStub,\n    key: shared.isString(key) ? createSimpleExpression(key, true) : key,\n    value\n  };\n}\nfunction createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {\n  return {\n    type: 4,\n    loc,\n    content,\n    isStatic,\n    constType: isStatic ? 3 : constType\n  };\n}\nfunction createInterpolation(content, loc) {\n  return {\n    type: 5,\n    loc,\n    content: shared.isString(content) ? createSimpleExpression(content, false, loc) : content\n  };\n}\nfunction createCompoundExpression(children, loc = locStub) {\n  return {\n    type: 8,\n    loc,\n    children\n  };\n}\nfunction createCallExpression(callee, args = [], loc = locStub) {\n  return {\n    type: 14,\n    loc,\n    callee,\n    arguments: args\n  };\n}\nfunction createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {\n  return {\n    type: 18,\n    params,\n    returns,\n    newline,\n    isSlot,\n    loc\n  };\n}\nfunction createConditionalExpression(test, consequent, alternate, newline = true) {\n  return {\n    type: 19,\n    test,\n    consequent,\n    alternate,\n    newline,\n    loc: locStub\n  };\n}\nfunction createCacheExpression(index, value, needPauseTracking = false, inVOnce = false) {\n  return {\n    type: 20,\n    index,\n    value,\n    needPauseTracking,\n    inVOnce,\n    needArraySpread: false,\n    loc: locStub\n  };\n}\nfunction createBlockStatement(body) {\n  return {\n    type: 21,\n    body,\n    loc: locStub\n  };\n}\nfunction createTemplateLiteral(elements) {\n  return {\n    type: 22,\n    elements,\n    loc: locStub\n  };\n}\nfunction createIfStatement(test, consequent, alternate) {\n  return {\n    type: 23,\n    test,\n    consequent,\n    alternate,\n    loc: locStub\n  };\n}\nfunction createAssignmentExpression(left, right) {\n  return {\n    type: 24,\n    left,\n    right,\n    loc: locStub\n  };\n}\nfunction createSequenceExpression(expressions) {\n  return {\n    type: 25,\n    expressions,\n    loc: locStub\n  };\n}\nfunction createReturnStatement(returns) {\n  return {\n    type: 26,\n    returns,\n    loc: locStub\n  };\n}\nfunction getVNodeHelper(ssr, isComponent) {\n  return ssr || isComponent ? CREATE_VNODE : CREATE_ELEMENT_VNODE;\n}\nfunction getVNodeBlockHelper(ssr, isComponent) {\n  return ssr || isComponent ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;\n}\nfunction convertToBlock(node, { helper, removeHelper, inSSR }) {\n  if (!node.isBlock) {\n    node.isBlock = true;\n    removeHelper(getVNodeHelper(inSSR, node.isComponent));\n    helper(OPEN_BLOCK);\n    helper(getVNodeBlockHelper(inSSR, node.isComponent));\n  }\n}\n\nconst defaultDelimitersOpen = new Uint8Array([123, 123]);\nconst defaultDelimitersClose = new Uint8Array([125, 125]);\nfunction isTagStartChar(c) {\n  return c >= 97 && c <= 122 || c >= 65 && c <= 90;\n}\nfunction isWhitespace(c) {\n  return c === 32 || c === 10 || c === 9 || c === 12 || c === 13;\n}\nfunction isEndOfTagSection(c) {\n  return c === 47 || c === 62 || isWhitespace(c);\n}\nfunction toCharCodes(str) {\n  const ret = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    ret[i] = str.charCodeAt(i);\n  }\n  return ret;\n}\nconst Sequences = {\n  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),\n  // CDATA[\n  CdataEnd: new Uint8Array([93, 93, 62]),\n  // ]]>\n  CommentEnd: new Uint8Array([45, 45, 62]),\n  // `-->`\n  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),\n  // `<\\/script`\n  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),\n  // `</style`\n  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),\n  // `</title`\n  TextareaEnd: new Uint8Array([\n    60,\n    47,\n    116,\n    101,\n    120,\n    116,\n    97,\n    114,\n    101,\n    97\n  ])\n  // `</textarea\n};\nclass Tokenizer {\n  constructor(stack, cbs) {\n    this.stack = stack;\n    this.cbs = cbs;\n    /** The current state the tokenizer is in. */\n    this.state = 1;\n    /** The read buffer. */\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n    this.index = 0;\n    /** The start of the last entity. */\n    this.entityStart = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n    this.baseState = 1;\n    /** For special parsing behavior inside of script and style tags. */\n    this.inRCDATA = false;\n    /** For disabling RCDATA tags handling */\n    this.inXML = false;\n    /** For disabling interpolation parsing in v-pre */\n    this.inVPre = false;\n    /** Record newline positions for fast line / column calculation */\n    this.newlines = [];\n    this.mode = 0;\n    this.delimiterOpen = defaultDelimitersOpen;\n    this.delimiterClose = defaultDelimitersClose;\n    this.delimiterIndex = -1;\n    this.currentSequence = void 0;\n    this.sequenceIndex = 0;\n    {\n      this.entityDecoder = new decode_js.EntityDecoder(\n        decode_js.htmlDecodeTree,\n        (cp, consumed) => this.emitCodePoint(cp, consumed)\n      );\n    }\n  }\n  get inSFCRoot() {\n    return this.mode === 2 && this.stack.length === 0;\n  }\n  reset() {\n    this.state = 1;\n    this.mode = 0;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this.index = 0;\n    this.baseState = 1;\n    this.inRCDATA = false;\n    this.currentSequence = void 0;\n    this.newlines.length = 0;\n    this.delimiterOpen = defaultDelimitersOpen;\n    this.delimiterClose = defaultDelimitersClose;\n  }\n  /**\n   * Generate Position object with line / column information using recorded\n   * newline positions. We know the index is always going to be an already\n   * processed index, so all the newlines up to this index should have been\n   * recorded.\n   */\n  getPos(index) {\n    let line = 1;\n    let column = index + 1;\n    for (let i = this.newlines.length - 1; i >= 0; i--) {\n      const newlineIndex = this.newlines[i];\n      if (index > newlineIndex) {\n        line = i + 2;\n        column = index - newlineIndex;\n        break;\n      }\n    }\n    return {\n      column,\n      line,\n      offset: index\n    };\n  }\n  peek() {\n    return this.buffer.charCodeAt(this.index + 1);\n  }\n  stateText(c) {\n    if (c === 60) {\n      if (this.index > this.sectionStart) {\n        this.cbs.ontext(this.sectionStart, this.index);\n      }\n      this.state = 5;\n      this.sectionStart = this.index;\n    } else if (c === 38) {\n      this.startEntity();\n    } else if (!this.inVPre && c === this.delimiterOpen[0]) {\n      this.state = 2;\n      this.delimiterIndex = 0;\n      this.stateInterpolationOpen(c);\n    }\n  }\n  stateInterpolationOpen(c) {\n    if (c === this.delimiterOpen[this.delimiterIndex]) {\n      if (this.delimiterIndex === this.delimiterOpen.length - 1) {\n        const start = this.index + 1 - this.delimiterOpen.length;\n        if (start > this.sectionStart) {\n          this.cbs.ontext(this.sectionStart, start);\n        }\n        this.state = 3;\n        this.sectionStart = start;\n      } else {\n        this.delimiterIndex++;\n      }\n    } else if (this.inRCDATA) {\n      this.state = 32;\n      this.stateInRCDATA(c);\n    } else {\n      this.state = 1;\n      this.stateText(c);\n    }\n  }\n  stateInterpolation(c) {\n    if (c === this.delimiterClose[0]) {\n      this.state = 4;\n      this.delimiterIndex = 0;\n      this.stateInterpolationClose(c);\n    }\n  }\n  stateInterpolationClose(c) {\n    if (c === this.delimiterClose[this.delimiterIndex]) {\n      if (this.delimiterIndex === this.delimiterClose.length - 1) {\n        this.cbs.oninterpolation(this.sectionStart, this.index + 1);\n        if (this.inRCDATA) {\n          this.state = 32;\n        } else {\n          this.state = 1;\n        }\n        this.sectionStart = this.index + 1;\n      } else {\n        this.delimiterIndex++;\n      }\n    } else {\n      this.state = 3;\n      this.stateInterpolation(c);\n    }\n  }\n  stateSpecialStartSequence(c) {\n    const isEnd = this.sequenceIndex === this.currentSequence.length;\n    const isMatch = isEnd ? (\n      // If we are at the end of the sequence, make sure the tag name has ended\n      isEndOfTagSection(c)\n    ) : (\n      // Otherwise, do a case-insensitive comparison\n      (c | 32) === this.currentSequence[this.sequenceIndex]\n    );\n    if (!isMatch) {\n      this.inRCDATA = false;\n    } else if (!isEnd) {\n      this.sequenceIndex++;\n      return;\n    }\n    this.sequenceIndex = 0;\n    this.state = 6;\n    this.stateInTagName(c);\n  }\n  /** Look for an end tag. For <title> and <textarea>, also decode entities. */\n  stateInRCDATA(c) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (c === 62 || isWhitespace(c)) {\n        const endOfText = this.index - this.currentSequence.length;\n        if (this.sectionStart < endOfText) {\n          const actualIndex = this.index;\n          this.index = endOfText;\n          this.cbs.ontext(this.sectionStart, endOfText);\n          this.index = actualIndex;\n        }\n        this.sectionStart = endOfText + 2;\n        this.stateInClosingTagName(c);\n        this.inRCDATA = false;\n        return;\n      }\n      this.sequenceIndex = 0;\n    }\n    if ((c | 32) === this.currentSequence[this.sequenceIndex]) {\n      this.sequenceIndex += 1;\n    } else if (this.sequenceIndex === 0) {\n      if (this.currentSequence === Sequences.TitleEnd || this.currentSequence === Sequences.TextareaEnd && !this.inSFCRoot) {\n        if (c === 38) {\n          this.startEntity();\n        } else if (!this.inVPre && c === this.delimiterOpen[0]) {\n          this.state = 2;\n          this.delimiterIndex = 0;\n          this.stateInterpolationOpen(c);\n        }\n      } else if (this.fastForwardTo(60)) {\n        this.sequenceIndex = 1;\n      }\n    } else {\n      this.sequenceIndex = Number(c === 60);\n    }\n  }\n  stateCDATASequence(c) {\n    if (c === Sequences.Cdata[this.sequenceIndex]) {\n      if (++this.sequenceIndex === Sequences.Cdata.length) {\n        this.state = 28;\n        this.currentSequence = Sequences.CdataEnd;\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n      }\n    } else {\n      this.sequenceIndex = 0;\n      this.state = 23;\n      this.stateInDeclaration(c);\n    }\n  }\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n  fastForwardTo(c) {\n    while (++this.index < this.buffer.length) {\n      const cc = this.buffer.charCodeAt(this.index);\n      if (cc === 10) {\n        this.newlines.push(this.index);\n      }\n      if (cc === c) {\n        return true;\n      }\n    }\n    this.index = this.buffer.length - 1;\n    return false;\n  }\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n  stateInCommentLike(c) {\n    if (c === this.currentSequence[this.sequenceIndex]) {\n      if (++this.sequenceIndex === this.currentSequence.length) {\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(this.sectionStart, this.index - 2);\n        } else {\n          this.cbs.oncomment(this.sectionStart, this.index - 2);\n        }\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n        this.state = 1;\n      }\n    } else if (this.sequenceIndex === 0) {\n      if (this.fastForwardTo(this.currentSequence[0])) {\n        this.sequenceIndex = 1;\n      }\n    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n      this.sequenceIndex = 0;\n    }\n  }\n  startSpecial(sequence, offset) {\n    this.enterRCDATA(sequence, offset);\n    this.state = 31;\n  }\n  enterRCDATA(sequence, offset) {\n    this.inRCDATA = true;\n    this.currentSequence = sequence;\n    this.sequenceIndex = offset;\n  }\n  stateBeforeTagName(c) {\n    if (c === 33) {\n      this.state = 22;\n      this.sectionStart = this.index + 1;\n    } else if (c === 63) {\n      this.state = 24;\n      this.sectionStart = this.index + 1;\n    } else if (isTagStartChar(c)) {\n      this.sectionStart = this.index;\n      if (this.mode === 0) {\n        this.state = 6;\n      } else if (this.inSFCRoot) {\n        this.state = 34;\n      } else if (!this.inXML) {\n        if (c === 116) {\n          this.state = 30;\n        } else {\n          this.state = c === 115 ? 29 : 6;\n        }\n      } else {\n        this.state = 6;\n      }\n    } else if (c === 47) {\n      this.state = 8;\n    } else {\n      this.state = 1;\n      this.stateText(c);\n    }\n  }\n  stateInTagName(c) {\n    if (isEndOfTagSection(c)) {\n      this.handleTagName(c);\n    }\n  }\n  stateInSFCRootTagName(c) {\n    if (isEndOfTagSection(c)) {\n      const tag = this.buffer.slice(this.sectionStart, this.index);\n      if (tag !== \"template\") {\n        this.enterRCDATA(toCharCodes(`</` + tag), 0);\n      }\n      this.handleTagName(c);\n    }\n  }\n  handleTagName(c) {\n    this.cbs.onopentagname(this.sectionStart, this.index);\n    this.sectionStart = -1;\n    this.state = 11;\n    this.stateBeforeAttrName(c);\n  }\n  stateBeforeClosingTagName(c) {\n    if (isWhitespace(c)) ; else if (c === 62) {\n      {\n        this.cbs.onerr(14, this.index);\n      }\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = isTagStartChar(c) ? 9 : 27;\n      this.sectionStart = this.index;\n    }\n  }\n  stateInClosingTagName(c) {\n    if (c === 62 || isWhitespace(c)) {\n      this.cbs.onclosetag(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = 10;\n      this.stateAfterClosingTagName(c);\n    }\n  }\n  stateAfterClosingTagName(c) {\n    if (c === 62) {\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeAttrName(c) {\n    if (c === 62) {\n      this.cbs.onopentagend(this.index);\n      if (this.inRCDATA) {\n        this.state = 32;\n      } else {\n        this.state = 1;\n      }\n      this.sectionStart = this.index + 1;\n    } else if (c === 47) {\n      this.state = 7;\n      if (this.peek() !== 62) {\n        this.cbs.onerr(22, this.index);\n      }\n    } else if (c === 60 && this.peek() === 47) {\n      this.cbs.onopentagend(this.index);\n      this.state = 5;\n      this.sectionStart = this.index;\n    } else if (!isWhitespace(c)) {\n      if (c === 61) {\n        this.cbs.onerr(\n          19,\n          this.index\n        );\n      }\n      this.handleAttrStart(c);\n    }\n  }\n  handleAttrStart(c) {\n    if (c === 118 && this.peek() === 45) {\n      this.state = 13;\n      this.sectionStart = this.index;\n    } else if (c === 46 || c === 58 || c === 64 || c === 35) {\n      this.cbs.ondirname(this.index, this.index + 1);\n      this.state = 14;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = 12;\n      this.sectionStart = this.index;\n    }\n  }\n  stateInSelfClosingTag(c) {\n    if (c === 62) {\n      this.cbs.onselfclosingtag(this.index);\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n      this.inRCDATA = false;\n    } else if (!isWhitespace(c)) {\n      this.state = 11;\n      this.stateBeforeAttrName(c);\n    }\n  }\n  stateInAttrName(c) {\n    if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.onattribname(this.sectionStart, this.index);\n      this.handleAttrNameEnd(c);\n    } else if (c === 34 || c === 39 || c === 60) {\n      this.cbs.onerr(\n        17,\n        this.index\n      );\n    }\n  }\n  stateInDirName(c) {\n    if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.ondirname(this.sectionStart, this.index);\n      this.handleAttrNameEnd(c);\n    } else if (c === 58) {\n      this.cbs.ondirname(this.sectionStart, this.index);\n      this.state = 14;\n      this.sectionStart = this.index + 1;\n    } else if (c === 46) {\n      this.cbs.ondirname(this.sectionStart, this.index);\n      this.state = 16;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateInDirArg(c) {\n    if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.ondirarg(this.sectionStart, this.index);\n      this.handleAttrNameEnd(c);\n    } else if (c === 91) {\n      this.state = 15;\n    } else if (c === 46) {\n      this.cbs.ondirarg(this.sectionStart, this.index);\n      this.state = 16;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateInDynamicDirArg(c) {\n    if (c === 93) {\n      this.state = 14;\n    } else if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.ondirarg(this.sectionStart, this.index + 1);\n      this.handleAttrNameEnd(c);\n      {\n        this.cbs.onerr(\n          27,\n          this.index\n        );\n      }\n    }\n  }\n  stateInDirModifier(c) {\n    if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.ondirmodifier(this.sectionStart, this.index);\n      this.handleAttrNameEnd(c);\n    } else if (c === 46) {\n      this.cbs.ondirmodifier(this.sectionStart, this.index);\n      this.sectionStart = this.index + 1;\n    }\n  }\n  handleAttrNameEnd(c) {\n    this.sectionStart = this.index;\n    this.state = 17;\n    this.cbs.onattribnameend(this.index);\n    this.stateAfterAttrName(c);\n  }\n  stateAfterAttrName(c) {\n    if (c === 61) {\n      this.state = 18;\n    } else if (c === 47 || c === 62) {\n      this.cbs.onattribend(0, this.sectionStart);\n      this.sectionStart = -1;\n      this.state = 11;\n      this.stateBeforeAttrName(c);\n    } else if (!isWhitespace(c)) {\n      this.cbs.onattribend(0, this.sectionStart);\n      this.handleAttrStart(c);\n    }\n  }\n  stateBeforeAttrValue(c) {\n    if (c === 34) {\n      this.state = 19;\n      this.sectionStart = this.index + 1;\n    } else if (c === 39) {\n      this.state = 20;\n      this.sectionStart = this.index + 1;\n    } else if (!isWhitespace(c)) {\n      this.sectionStart = this.index;\n      this.state = 21;\n      this.stateInAttrValueNoQuotes(c);\n    }\n  }\n  handleInAttrValue(c, quote) {\n    if (c === quote || false) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(\n        quote === 34 ? 3 : 2,\n        this.index + 1\n      );\n      this.state = 11;\n    } else if (c === 38) {\n      this.startEntity();\n    }\n  }\n  stateInAttrValueDoubleQuotes(c) {\n    this.handleInAttrValue(c, 34);\n  }\n  stateInAttrValueSingleQuotes(c) {\n    this.handleInAttrValue(c, 39);\n  }\n  stateInAttrValueNoQuotes(c) {\n    if (isWhitespace(c) || c === 62) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(1, this.index);\n      this.state = 11;\n      this.stateBeforeAttrName(c);\n    } else if (c === 34 || c === 39 || c === 60 || c === 61 || c === 96) {\n      this.cbs.onerr(\n        18,\n        this.index\n      );\n    } else if (c === 38) {\n      this.startEntity();\n    }\n  }\n  stateBeforeDeclaration(c) {\n    if (c === 91) {\n      this.state = 26;\n      this.sequenceIndex = 0;\n    } else {\n      this.state = c === 45 ? 25 : 23;\n    }\n  }\n  stateInDeclaration(c) {\n    if (c === 62 || this.fastForwardTo(62)) {\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateInProcessingInstruction(c) {\n    if (c === 62 || this.fastForwardTo(62)) {\n      this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeComment(c) {\n    if (c === 45) {\n      this.state = 28;\n      this.currentSequence = Sequences.CommentEnd;\n      this.sequenceIndex = 2;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = 23;\n    }\n  }\n  stateInSpecialComment(c) {\n    if (c === 62 || this.fastForwardTo(62)) {\n      this.cbs.oncomment(this.sectionStart, this.index);\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeSpecialS(c) {\n    if (c === Sequences.ScriptEnd[3]) {\n      this.startSpecial(Sequences.ScriptEnd, 4);\n    } else if (c === Sequences.StyleEnd[3]) {\n      this.startSpecial(Sequences.StyleEnd, 4);\n    } else {\n      this.state = 6;\n      this.stateInTagName(c);\n    }\n  }\n  stateBeforeSpecialT(c) {\n    if (c === Sequences.TitleEnd[3]) {\n      this.startSpecial(Sequences.TitleEnd, 4);\n    } else if (c === Sequences.TextareaEnd[3]) {\n      this.startSpecial(Sequences.TextareaEnd, 4);\n    } else {\n      this.state = 6;\n      this.stateInTagName(c);\n    }\n  }\n  startEntity() {\n    {\n      this.baseState = this.state;\n      this.state = 33;\n      this.entityStart = this.index;\n      this.entityDecoder.startEntity(\n        this.baseState === 1 || this.baseState === 32 ? decode_js.DecodingMode.Legacy : decode_js.DecodingMode.Attribute\n      );\n    }\n  }\n  stateInEntity() {\n    {\n      const length = this.entityDecoder.write(this.buffer, this.index);\n      if (length >= 0) {\n        this.state = this.baseState;\n        if (length === 0) {\n          this.index = this.entityStart;\n        }\n      } else {\n        this.index = this.buffer.length - 1;\n      }\n    }\n  }\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n  parse(input) {\n    this.buffer = input;\n    while (this.index < this.buffer.length) {\n      const c = this.buffer.charCodeAt(this.index);\n      if (c === 10) {\n        this.newlines.push(this.index);\n      }\n      switch (this.state) {\n        case 1: {\n          this.stateText(c);\n          break;\n        }\n        case 2: {\n          this.stateInterpolationOpen(c);\n          break;\n        }\n        case 3: {\n          this.stateInterpolation(c);\n          break;\n        }\n        case 4: {\n          this.stateInterpolationClose(c);\n          break;\n        }\n        case 31: {\n          this.stateSpecialStartSequence(c);\n          break;\n        }\n        case 32: {\n          this.stateInRCDATA(c);\n          break;\n        }\n        case 26: {\n          this.stateCDATASequence(c);\n          break;\n        }\n        case 19: {\n          this.stateInAttrValueDoubleQuotes(c);\n          break;\n        }\n        case 12: {\n          this.stateInAttrName(c);\n          break;\n        }\n        case 13: {\n          this.stateInDirName(c);\n          break;\n        }\n        case 14: {\n          this.stateInDirArg(c);\n          break;\n        }\n        case 15: {\n          this.stateInDynamicDirArg(c);\n          break;\n        }\n        case 16: {\n          this.stateInDirModifier(c);\n          break;\n        }\n        case 28: {\n          this.stateInCommentLike(c);\n          break;\n        }\n        case 27: {\n          this.stateInSpecialComment(c);\n          break;\n        }\n        case 11: {\n          this.stateBeforeAttrName(c);\n          break;\n        }\n        case 6: {\n          this.stateInTagName(c);\n          break;\n        }\n        case 34: {\n          this.stateInSFCRootTagName(c);\n          break;\n        }\n        case 9: {\n          this.stateInClosingTagName(c);\n          break;\n        }\n        case 5: {\n          this.stateBeforeTagName(c);\n          break;\n        }\n        case 17: {\n          this.stateAfterAttrName(c);\n          break;\n        }\n        case 20: {\n          this.stateInAttrValueSingleQuotes(c);\n          break;\n        }\n        case 18: {\n          this.stateBeforeAttrValue(c);\n          break;\n        }\n        case 8: {\n          this.stateBeforeClosingTagName(c);\n          break;\n        }\n        case 10: {\n          this.stateAfterClosingTagName(c);\n          break;\n        }\n        case 29: {\n          this.stateBeforeSpecialS(c);\n          break;\n        }\n        case 30: {\n          this.stateBeforeSpecialT(c);\n          break;\n        }\n        case 21: {\n          this.stateInAttrValueNoQuotes(c);\n          break;\n        }\n        case 7: {\n          this.stateInSelfClosingTag(c);\n          break;\n        }\n        case 23: {\n          this.stateInDeclaration(c);\n          break;\n        }\n        case 22: {\n          this.stateBeforeDeclaration(c);\n          break;\n        }\n        case 25: {\n          this.stateBeforeComment(c);\n          break;\n        }\n        case 24: {\n          this.stateInProcessingInstruction(c);\n          break;\n        }\n        case 33: {\n          this.stateInEntity();\n          break;\n        }\n      }\n      this.index++;\n    }\n    this.cleanup();\n    this.finish();\n  }\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n  cleanup() {\n    if (this.sectionStart !== this.index) {\n      if (this.state === 1 || this.state === 32 && this.sequenceIndex === 0) {\n        this.cbs.ontext(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      } else if (this.state === 19 || this.state === 20 || this.state === 21) {\n        this.cbs.onattribdata(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      }\n    }\n  }\n  finish() {\n    if (this.state === 33) {\n      this.entityDecoder.end();\n      this.state = this.baseState;\n    }\n    this.handleTrailingData();\n    this.cbs.onend();\n  }\n  /** Handle any trailing data. */\n  handleTrailingData() {\n    const endIndex = this.buffer.length;\n    if (this.sectionStart >= endIndex) {\n      return;\n    }\n    if (this.state === 28) {\n      if (this.currentSequence === Sequences.CdataEnd) {\n        this.cbs.oncdata(this.sectionStart, endIndex);\n      } else {\n        this.cbs.oncomment(this.sectionStart, endIndex);\n      }\n    } else if (this.state === 6 || this.state === 11 || this.state === 18 || this.state === 17 || this.state === 12 || this.state === 13 || this.state === 14 || this.state === 15 || this.state === 16 || this.state === 20 || this.state === 19 || this.state === 21 || this.state === 9) ; else {\n      this.cbs.ontext(this.sectionStart, endIndex);\n    }\n  }\n  emitCodePoint(cp, consumed) {\n    {\n      if (this.baseState !== 1 && this.baseState !== 32) {\n        if (this.sectionStart < this.entityStart) {\n          this.cbs.onattribdata(this.sectionStart, this.entityStart);\n        }\n        this.sectionStart = this.entityStart + consumed;\n        this.index = this.sectionStart - 1;\n        this.cbs.onattribentity(\n          decode_js.fromCodePoint(cp),\n          this.entityStart,\n          this.sectionStart\n        );\n      } else {\n        if (this.sectionStart < this.entityStart) {\n          this.cbs.ontext(this.sectionStart, this.entityStart);\n        }\n        this.sectionStart = this.entityStart + consumed;\n        this.index = this.sectionStart - 1;\n        this.cbs.ontextentity(\n          decode_js.fromCodePoint(cp),\n          this.entityStart,\n          this.sectionStart\n        );\n      }\n    }\n  }\n}\n\nconst CompilerDeprecationTypes = {\n  \"COMPILER_IS_ON_ELEMENT\": \"COMPILER_IS_ON_ELEMENT\",\n  \"COMPILER_V_BIND_SYNC\": \"COMPILER_V_BIND_SYNC\",\n  \"COMPILER_V_BIND_OBJECT_ORDER\": \"COMPILER_V_BIND_OBJECT_ORDER\",\n  \"COMPILER_V_ON_NATIVE\": \"COMPILER_V_ON_NATIVE\",\n  \"COMPILER_V_IF_V_FOR_PRECEDENCE\": \"COMPILER_V_IF_V_FOR_PRECEDENCE\",\n  \"COMPILER_NATIVE_TEMPLATE\": \"COMPILER_NATIVE_TEMPLATE\",\n  \"COMPILER_INLINE_TEMPLATE\": \"COMPILER_INLINE_TEMPLATE\",\n  \"COMPILER_FILTERS\": \"COMPILER_FILTERS\"\n};\nconst deprecationData = {\n  [\"COMPILER_IS_ON_ELEMENT\"]: {\n    message: `Platform-native elements with \"is\" prop will no longer be treated as components in Vue 3 unless the \"is\" value is explicitly prefixed with \"vue:\".`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`\n  },\n  [\"COMPILER_V_BIND_SYNC\"]: {\n    message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \\`v-bind:${key}.sync\\` should be changed to \\`v-model:${key}\\`.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`\n  },\n  [\"COMPILER_V_BIND_OBJECT_ORDER\"]: {\n    message: `v-bind=\"obj\" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`\n  },\n  [\"COMPILER_V_ON_NATIVE\"]: {\n    message: `.native modifier for v-on has been removed as is no longer necessary.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`\n  },\n  [\"COMPILER_V_IF_V_FOR_PRECEDENCE\"]: {\n    message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`\n  },\n  [\"COMPILER_NATIVE_TEMPLATE\"]: {\n    message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`\n  },\n  [\"COMPILER_INLINE_TEMPLATE\"]: {\n    message: `\"inline-template\" has been removed in Vue 3.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`\n  },\n  [\"COMPILER_FILTERS\"]: {\n    message: `filters have been removed in Vue 3. The \"|\" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`\n  }\n};\nfunction getCompatValue(key, { compatConfig }) {\n  const value = compatConfig && compatConfig[key];\n  if (key === \"MODE\") {\n    return value || 3;\n  } else {\n    return value;\n  }\n}\nfunction isCompatEnabled(key, context) {\n  const mode = getCompatValue(\"MODE\", context);\n  const value = getCompatValue(key, context);\n  return mode === 3 ? value === true : value !== false;\n}\nfunction checkCompatEnabled(key, context, loc, ...args) {\n  const enabled = isCompatEnabled(key, context);\n  if (enabled) {\n    warnDeprecation(key, context, loc, ...args);\n  }\n  return enabled;\n}\nfunction warnDeprecation(key, context, loc, ...args) {\n  const val = getCompatValue(key, context);\n  if (val === \"suppress-warning\") {\n    return;\n  }\n  const { message, link } = deprecationData[key];\n  const msg = `(deprecation ${key}) ${typeof message === \"function\" ? message(...args) : message}${link ? `\n  Details: ${link}` : ``}`;\n  const err = new SyntaxError(msg);\n  err.code = key;\n  if (loc) err.loc = loc;\n  context.onWarn(err);\n}\n\nfunction defaultOnError(error) {\n  throw error;\n}\nfunction defaultOnWarn(msg) {\n  console.warn(`[Vue warn] ${msg.message}`);\n}\nfunction createCompilerError(code, loc, messages, additionalMessage) {\n  const msg = (messages || errorMessages)[code] + (additionalMessage || ``) ;\n  const error = new SyntaxError(String(msg));\n  error.code = code;\n  error.loc = loc;\n  return error;\n}\nconst ErrorCodes = {\n  \"ABRUPT_CLOSING_OF_EMPTY_COMMENT\": 0,\n  \"0\": \"ABRUPT_CLOSING_OF_EMPTY_COMMENT\",\n  \"CDATA_IN_HTML_CONTENT\": 1,\n  \"1\": \"CDATA_IN_HTML_CONTENT\",\n  \"DUPLICATE_ATTRIBUTE\": 2,\n  \"2\": \"DUPLICATE_ATTRIBUTE\",\n  \"END_TAG_WITH_ATTRIBUTES\": 3,\n  \"3\": \"END_TAG_WITH_ATTRIBUTES\",\n  \"END_TAG_WITH_TRAILING_SOLIDUS\": 4,\n  \"4\": \"END_TAG_WITH_TRAILING_SOLIDUS\",\n  \"EOF_BEFORE_TAG_NAME\": 5,\n  \"5\": \"EOF_BEFORE_TAG_NAME\",\n  \"EOF_IN_CDATA\": 6,\n  \"6\": \"EOF_IN_CDATA\",\n  \"EOF_IN_COMMENT\": 7,\n  \"7\": \"EOF_IN_COMMENT\",\n  \"EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT\": 8,\n  \"8\": \"EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT\",\n  \"EOF_IN_TAG\": 9,\n  \"9\": \"EOF_IN_TAG\",\n  \"INCORRECTLY_CLOSED_COMMENT\": 10,\n  \"10\": \"INCORRECTLY_CLOSED_COMMENT\",\n  \"INCORRECTLY_OPENED_COMMENT\": 11,\n  \"11\": \"INCORRECTLY_OPENED_COMMENT\",\n  \"INVALID_FIRST_CHARACTER_OF_TAG_NAME\": 12,\n  \"12\": \"INVALID_FIRST_CHARACTER_OF_TAG_NAME\",\n  \"MISSING_ATTRIBUTE_VALUE\": 13,\n  \"13\": \"MISSING_ATTRIBUTE_VALUE\",\n  \"MISSING_END_TAG_NAME\": 14,\n  \"14\": \"MISSING_END_TAG_NAME\",\n  \"MISSING_WHITESPACE_BETWEEN_ATTRIBUTES\": 15,\n  \"15\": \"MISSING_WHITESPACE_BETWEEN_ATTRIBUTES\",\n  \"NESTED_COMMENT\": 16,\n  \"16\": \"NESTED_COMMENT\",\n  \"UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME\": 17,\n  \"17\": \"UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME\",\n  \"UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE\": 18,\n  \"18\": \"UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE\",\n  \"UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME\": 19,\n  \"19\": \"UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME\",\n  \"UNEXPECTED_NULL_CHARACTER\": 20,\n  \"20\": \"UNEXPECTED_NULL_CHARACTER\",\n  \"UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME\": 21,\n  \"21\": \"UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME\",\n  \"UNEXPECTED_SOLIDUS_IN_TAG\": 22,\n  \"22\": \"UNEXPECTED_SOLIDUS_IN_TAG\",\n  \"X_INVALID_END_TAG\": 23,\n  \"23\": \"X_INVALID_END_TAG\",\n  \"X_MISSING_END_TAG\": 24,\n  \"24\": \"X_MISSING_END_TAG\",\n  \"X_MISSING_INTERPOLATION_END\": 25,\n  \"25\": \"X_MISSING_INTERPOLATION_END\",\n  \"X_MISSING_DIRECTIVE_NAME\": 26,\n  \"26\": \"X_MISSING_DIRECTIVE_NAME\",\n  \"X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END\": 27,\n  \"27\": \"X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END\",\n  \"X_V_IF_NO_EXPRESSION\": 28,\n  \"28\": \"X_V_IF_NO_EXPRESSION\",\n  \"X_V_IF_SAME_KEY\": 29,\n  \"29\": \"X_V_IF_SAME_KEY\",\n  \"X_V_ELSE_NO_ADJACENT_IF\": 30,\n  \"30\": \"X_V_ELSE_NO_ADJACENT_IF\",\n  \"X_V_FOR_NO_EXPRESSION\": 31,\n  \"31\": \"X_V_FOR_NO_EXPRESSION\",\n  \"X_V_FOR_MALFORMED_EXPRESSION\": 32,\n  \"32\": \"X_V_FOR_MALFORMED_EXPRESSION\",\n  \"X_V_FOR_TEMPLATE_KEY_PLACEMENT\": 33,\n  \"33\": \"X_V_FOR_TEMPLATE_KEY_PLACEMENT\",\n  \"X_V_BIND_NO_EXPRESSION\": 34,\n  \"34\": \"X_V_BIND_NO_EXPRESSION\",\n  \"X_V_ON_NO_EXPRESSION\": 35,\n  \"35\": \"X_V_ON_NO_EXPRESSION\",\n  \"X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET\": 36,\n  \"36\": \"X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET\",\n  \"X_V_SLOT_MIXED_SLOT_USAGE\": 37,\n  \"37\": \"X_V_SLOT_MIXED_SLOT_USAGE\",\n  \"X_V_SLOT_DUPLICATE_SLOT_NAMES\": 38,\n  \"38\": \"X_V_SLOT_DUPLICATE_SLOT_NAMES\",\n  \"X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN\": 39,\n  \"39\": \"X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN\",\n  \"X_V_SLOT_MISPLACED\": 40,\n  \"40\": \"X_V_SLOT_MISPLACED\",\n  \"X_V_MODEL_NO_EXPRESSION\": 41,\n  \"41\": \"X_V_MODEL_NO_EXPRESSION\",\n  \"X_V_MODEL_MALFORMED_EXPRESSION\": 42,\n  \"42\": \"X_V_MODEL_MALFORMED_EXPRESSION\",\n  \"X_V_MODEL_ON_SCOPE_VARIABLE\": 43,\n  \"43\": \"X_V_MODEL_ON_SCOPE_VARIABLE\",\n  \"X_V_MODEL_ON_PROPS\": 44,\n  \"44\": \"X_V_MODEL_ON_PROPS\",\n  \"X_INVALID_EXPRESSION\": 45,\n  \"45\": \"X_INVALID_EXPRESSION\",\n  \"X_KEEP_ALIVE_INVALID_CHILDREN\": 46,\n  \"46\": \"X_KEEP_ALIVE_INVALID_CHILDREN\",\n  \"X_PREFIX_ID_NOT_SUPPORTED\": 47,\n  \"47\": \"X_PREFIX_ID_NOT_SUPPORTED\",\n  \"X_MODULE_MODE_NOT_SUPPORTED\": 48,\n  \"48\": \"X_MODULE_MODE_NOT_SUPPORTED\",\n  \"X_CACHE_HANDLER_NOT_SUPPORTED\": 49,\n  \"49\": \"X_CACHE_HANDLER_NOT_SUPPORTED\",\n  \"X_SCOPE_ID_NOT_SUPPORTED\": 50,\n  \"50\": \"X_SCOPE_ID_NOT_SUPPORTED\",\n  \"X_VNODE_HOOKS\": 51,\n  \"51\": \"X_VNODE_HOOKS\",\n  \"X_V_BIND_INVALID_SAME_NAME_ARGUMENT\": 52,\n  \"52\": \"X_V_BIND_INVALID_SAME_NAME_ARGUMENT\",\n  \"__EXTEND_POINT__\": 53,\n  \"53\": \"__EXTEND_POINT__\"\n};\nconst errorMessages = {\n  // parse errors\n  [0]: \"Illegal comment.\",\n  [1]: \"CDATA section is allowed only in XML context.\",\n  [2]: \"Duplicate attribute.\",\n  [3]: \"End tag cannot have attributes.\",\n  [4]: \"Illegal '/' in tags.\",\n  [5]: \"Unexpected EOF in tag.\",\n  [6]: \"Unexpected EOF in CDATA section.\",\n  [7]: \"Unexpected EOF in comment.\",\n  [8]: \"Unexpected EOF in script.\",\n  [9]: \"Unexpected EOF in tag.\",\n  [10]: \"Incorrectly closed comment.\",\n  [11]: \"Incorrectly opened comment.\",\n  [12]: \"Illegal tag name. Use '&lt;' to print '<'.\",\n  [13]: \"Attribute value was expected.\",\n  [14]: \"End tag name was expected.\",\n  [15]: \"Whitespace was expected.\",\n  [16]: \"Unexpected '<!--' in comment.\",\n  [17]: `Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C (<).`,\n  [18]: \"Unquoted attribute value cannot contain U+0022 (\\\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).\",\n  [19]: \"Attribute name cannot start with '='.\",\n  [21]: \"'<?' is allowed only in XML context.\",\n  [20]: `Unexpected null character.`,\n  [22]: \"Illegal '/' in tags.\",\n  // Vue-specific parse errors\n  [23]: \"Invalid end tag.\",\n  [24]: \"Element is missing end tag.\",\n  [25]: \"Interpolation end sign was not found.\",\n  [27]: \"End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.\",\n  [26]: \"Legal directive name was expected.\",\n  // transform errors\n  [28]: `v-if/v-else-if is missing expression.`,\n  [29]: `v-if/else branches must use unique keys.`,\n  [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,\n  [31]: `v-for is missing expression.`,\n  [32]: `v-for has invalid expression.`,\n  [33]: `<template v-for> key should be placed on the <template> tag.`,\n  [34]: `v-bind is missing expression.`,\n  [52]: `v-bind with same-name shorthand only allows static argument.`,\n  [35]: `v-on is missing expression.`,\n  [36]: `Unexpected custom directive on <slot> outlet.`,\n  [37]: `Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,\n  [38]: `Duplicate slot names found. `,\n  [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,\n  [40]: `v-slot can only be used on components or <template> tags.`,\n  [41]: `v-model is missing expression.`,\n  [42]: `v-model value must be a valid JavaScript member expression.`,\n  [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,\n  [44]: `v-model cannot be used on a prop, because local prop bindings are not writable.\nUse a v-bind binding combined with a v-on listener that emits update:x event instead.`,\n  [45]: `Error parsing JavaScript expression: `,\n  [46]: `<KeepAlive> expects exactly one child component.`,\n  [51]: `@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.`,\n  // generic errors\n  [47]: `\"prefixIdentifiers\" option is not supported in this build of compiler.`,\n  [48]: `ES module mode is not supported in this build of compiler.`,\n  [49]: `\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.`,\n  [50]: `\"scopeId\" option is only supported in module mode.`,\n  // just to fulfill types\n  [53]: ``\n};\n\nfunction walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {\n  const rootExp = root.type === \"Program\" ? root.body[0].type === \"ExpressionStatement\" && root.body[0].expression : root;\n  estreeWalker.walk(root, {\n    enter(node, parent) {\n      parent && parentStack.push(parent);\n      if (parent && parent.type.startsWith(\"TS\") && !TS_NODE_TYPES.includes(parent.type)) {\n        return this.skip();\n      }\n      if (node.type === \"Identifier\") {\n        const isLocal = !!knownIds[node.name];\n        const isRefed = isReferencedIdentifier(node, parent, parentStack);\n        if (includeAll || isRefed && !isLocal) {\n          onIdentifier(node, parent, parentStack, isRefed, isLocal);\n        }\n      } else if (node.type === \"ObjectProperty\" && // eslint-disable-next-line no-restricted-syntax\n      (parent == null ? void 0 : parent.type) === \"ObjectPattern\") {\n        node.inPattern = true;\n      } else if (isFunctionType(node)) {\n        if (node.scopeIds) {\n          node.scopeIds.forEach((id) => markKnownIds(id, knownIds));\n        } else {\n          walkFunctionParams(\n            node,\n            (id) => markScopeIdentifier(node, id, knownIds)\n          );\n        }\n      } else if (node.type === \"BlockStatement\") {\n        if (node.scopeIds) {\n          node.scopeIds.forEach((id) => markKnownIds(id, knownIds));\n        } else {\n          walkBlockDeclarations(\n            node,\n            (id) => markScopeIdentifier(node, id, knownIds)\n          );\n        }\n      } else if (node.type === \"CatchClause\" && node.param) {\n        for (const id of extractIdentifiers(node.param)) {\n          markScopeIdentifier(node, id, knownIds);\n        }\n      } else if (isForStatement(node)) {\n        walkForStatement(\n          node,\n          false,\n          (id) => markScopeIdentifier(node, id, knownIds)\n        );\n      }\n    },\n    leave(node, parent) {\n      parent && parentStack.pop();\n      if (node !== rootExp && node.scopeIds) {\n        for (const id of node.scopeIds) {\n          knownIds[id]--;\n          if (knownIds[id] === 0) {\n            delete knownIds[id];\n          }\n        }\n      }\n    }\n  });\n}\nfunction isReferencedIdentifier(id, parent, parentStack) {\n  if (!parent) {\n    return true;\n  }\n  if (id.name === \"arguments\") {\n    return false;\n  }\n  if (isReferenced(id, parent)) {\n    return true;\n  }\n  switch (parent.type) {\n    case \"AssignmentExpression\":\n    case \"AssignmentPattern\":\n      return true;\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return isInDestructureAssignment(parent, parentStack);\n  }\n  return false;\n}\nfunction isInDestructureAssignment(parent, parentStack) {\n  if (parent && (parent.type === \"ObjectProperty\" || parent.type === \"ArrayPattern\")) {\n    let i = parentStack.length;\n    while (i--) {\n      const p = parentStack[i];\n      if (p.type === \"AssignmentExpression\") {\n        return true;\n      } else if (p.type !== \"ObjectProperty\" && !p.type.endsWith(\"Pattern\")) {\n        break;\n      }\n    }\n  }\n  return false;\n}\nfunction isInNewExpression(parentStack) {\n  let i = parentStack.length;\n  while (i--) {\n    const p = parentStack[i];\n    if (p.type === \"NewExpression\") {\n      return true;\n    } else if (p.type !== \"MemberExpression\") {\n      break;\n    }\n  }\n  return false;\n}\nfunction walkFunctionParams(node, onIdent) {\n  for (const p of node.params) {\n    for (const id of extractIdentifiers(p)) {\n      onIdent(id);\n    }\n  }\n}\nfunction walkBlockDeclarations(block, onIdent) {\n  for (const stmt of block.body) {\n    if (stmt.type === \"VariableDeclaration\") {\n      if (stmt.declare) continue;\n      for (const decl of stmt.declarations) {\n        for (const id of extractIdentifiers(decl.id)) {\n          onIdent(id);\n        }\n      }\n    } else if (stmt.type === \"FunctionDeclaration\" || stmt.type === \"ClassDeclaration\") {\n      if (stmt.declare || !stmt.id) continue;\n      onIdent(stmt.id);\n    } else if (isForStatement(stmt)) {\n      walkForStatement(stmt, true, onIdent);\n    }\n  }\n}\nfunction isForStatement(stmt) {\n  return stmt.type === \"ForOfStatement\" || stmt.type === \"ForInStatement\" || stmt.type === \"ForStatement\";\n}\nfunction walkForStatement(stmt, isVar, onIdent) {\n  const variable = stmt.type === \"ForStatement\" ? stmt.init : stmt.left;\n  if (variable && variable.type === \"VariableDeclaration\" && (variable.kind === \"var\" ? isVar : !isVar)) {\n    for (const decl of variable.declarations) {\n      for (const id of extractIdentifiers(decl.id)) {\n        onIdent(id);\n      }\n    }\n  }\n}\nfunction extractIdentifiers(param, nodes = []) {\n  switch (param.type) {\n    case \"Identifier\":\n      nodes.push(param);\n      break;\n    case \"MemberExpression\":\n      let object = param;\n      while (object.type === \"MemberExpression\") {\n        object = object.object;\n      }\n      nodes.push(object);\n      break;\n    case \"ObjectPattern\":\n      for (const prop of param.properties) {\n        if (prop.type === \"RestElement\") {\n          extractIdentifiers(prop.argument, nodes);\n        } else {\n          extractIdentifiers(prop.value, nodes);\n        }\n      }\n      break;\n    case \"ArrayPattern\":\n      param.elements.forEach((element) => {\n        if (element) extractIdentifiers(element, nodes);\n      });\n      break;\n    case \"RestElement\":\n      extractIdentifiers(param.argument, nodes);\n      break;\n    case \"AssignmentPattern\":\n      extractIdentifiers(param.left, nodes);\n      break;\n  }\n  return nodes;\n}\nfunction markKnownIds(name, knownIds) {\n  if (name in knownIds) {\n    knownIds[name]++;\n  } else {\n    knownIds[name] = 1;\n  }\n}\nfunction markScopeIdentifier(node, child, knownIds) {\n  const { name } = child;\n  if (node.scopeIds && node.scopeIds.has(name)) {\n    return;\n  }\n  markKnownIds(name, knownIds);\n  (node.scopeIds || (node.scopeIds = /* @__PURE__ */ new Set())).add(name);\n}\nconst isFunctionType = (node) => {\n  return /Function(?:Expression|Declaration)$|Method$/.test(node.type);\n};\nconst isStaticProperty = (node) => node && (node.type === \"ObjectProperty\" || node.type === \"ObjectMethod\") && !node.computed;\nconst isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;\nfunction isReferenced(node, parent, grandparent) {\n  switch (parent.type) {\n    // yes: PARENT[NODE]\n    // yes: NODE.child\n    // no: parent.NODE\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n    case \"JSXMemberExpression\":\n      return parent.object === node;\n    // no: let NODE = init;\n    // yes: let id = NODE;\n    case \"VariableDeclarator\":\n      return parent.init === node;\n    // yes: () => NODE\n    // no: (NODE) => {}\n    case \"ArrowFunctionExpression\":\n      return parent.body === node;\n    // no: class { #NODE; }\n    // no: class { get #NODE() {} }\n    // no: class { #NODE() {} }\n    // no: class { fn() { return this.#NODE; } }\n    case \"PrivateName\":\n      return false;\n    // no: class { NODE() {} }\n    // yes: class { [NODE]() {} }\n    // no: class { foo(NODE) {} }\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"ObjectMethod\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n    // yes: { [NODE]: \"\" }\n    // no: { NODE: \"\" }\n    // depends: { NODE }\n    // depends: { key: NODE }\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    // no: class { NODE = value; }\n    // yes: class { [NODE] = value; }\n    // yes: class { key = NODE; }\n    case \"ClassProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case \"ClassPrivateProperty\":\n      return parent.key !== node;\n    // no: class NODE {}\n    // yes: class Foo extends NODE {}\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.superClass === node;\n    // yes: left = NODE;\n    // no: NODE = right;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n    // no: [NODE = foo] = [];\n    // yes: [foo = NODE] = [];\n    case \"AssignmentPattern\":\n      return parent.right === node;\n    // no: NODE: for (;;) {}\n    case \"LabeledStatement\":\n      return false;\n    // no: try {} catch (NODE) {}\n    case \"CatchClause\":\n      return false;\n    // no: function foo(...NODE) {}\n    case \"RestElement\":\n      return false;\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n      return false;\n    // no: function NODE() {}\n    // no: function foo(NODE) {}\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      return false;\n    // no: export NODE from \"foo\";\n    // no: export * as NODE from \"foo\";\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n    // no: export { foo as NODE };\n    // yes: export { NODE as foo };\n    // no: export { NODE as foo } from \"foo\";\n    case \"ExportSpecifier\":\n      return parent.local === node;\n    // no: import NODE from \"foo\";\n    // no: import * as NODE from \"foo\";\n    // no: import { NODE as foo } from \"foo\";\n    // no: import { foo as NODE } from \"foo\";\n    // no: import NODE from \"bar\";\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n    // no: import \"foo\" assert { NODE: \"json\" }\n    case \"ImportAttribute\":\n      return false;\n    // no: <div NODE=\"foo\" />\n    case \"JSXAttribute\":\n      return false;\n    // no: [NODE] = [];\n    // no: ({ NODE }) = [];\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n    // no: new.NODE\n    // no: NODE.target\n    case \"MetaProperty\":\n      return false;\n    // yes: type X = { someProperty: NODE }\n    // no: type X = { NODE: OtherType }\n    case \"ObjectTypeProperty\":\n      return parent.key !== node;\n    // yes: enum X { Foo = NODE }\n    // no: enum X { NODE }\n    case \"TSEnumMember\":\n      return parent.id !== node;\n    // yes: { [NODE]: value }\n    // no: { NODE: value }\n    case \"TSPropertySignature\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n  }\n  return true;\n}\nconst TS_NODE_TYPES = [\n  \"TSAsExpression\",\n  // foo as number\n  \"TSTypeAssertion\",\n  // (<number>foo)\n  \"TSNonNullExpression\",\n  // foo!\n  \"TSInstantiationExpression\",\n  // foo<string>\n  \"TSSatisfiesExpression\"\n  // foo satisfies T\n];\nfunction unwrapTSNode(node) {\n  if (TS_NODE_TYPES.includes(node.type)) {\n    return unwrapTSNode(node.expression);\n  } else {\n    return node;\n  }\n}\n\nconst isStaticExp = (p) => p.type === 4 && p.isStatic;\nfunction isCoreComponent(tag) {\n  switch (tag) {\n    case \"Teleport\":\n    case \"teleport\":\n      return TELEPORT;\n    case \"Suspense\":\n    case \"suspense\":\n      return SUSPENSE;\n    case \"KeepAlive\":\n    case \"keep-alive\":\n      return KEEP_ALIVE;\n    case \"BaseTransition\":\n    case \"base-transition\":\n      return BASE_TRANSITION;\n  }\n}\nconst nonIdentifierRE = /^\\d|[^\\$\\w\\xA0-\\uFFFF]/;\nconst isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);\nconst validFirstIdentCharRE = /[A-Za-z_$\\xA0-\\uFFFF]/;\nconst validIdentCharRE = /[\\.\\?\\w$\\xA0-\\uFFFF]/;\nconst whitespaceRE = /\\s+[.[]\\s*|\\s*[.[]\\s+/g;\nconst getExpSource = (exp) => exp.type === 4 ? exp.content : exp.loc.source;\nconst isMemberExpressionBrowser = (exp) => {\n  const path = getExpSource(exp).trim().replace(whitespaceRE, (s) => s.trim());\n  let state = 0 /* inMemberExp */;\n  let stateStack = [];\n  let currentOpenBracketCount = 0;\n  let currentOpenParensCount = 0;\n  let currentStringType = null;\n  for (let i = 0; i < path.length; i++) {\n    const char = path.charAt(i);\n    switch (state) {\n      case 0 /* inMemberExp */:\n        if (char === \"[\") {\n          stateStack.push(state);\n          state = 1 /* inBrackets */;\n          currentOpenBracketCount++;\n        } else if (char === \"(\") {\n          stateStack.push(state);\n          state = 2 /* inParens */;\n          currentOpenParensCount++;\n        } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {\n          return false;\n        }\n        break;\n      case 1 /* inBrackets */:\n        if (char === `'` || char === `\"` || char === \"`\") {\n          stateStack.push(state);\n          state = 3 /* inString */;\n          currentStringType = char;\n        } else if (char === `[`) {\n          currentOpenBracketCount++;\n        } else if (char === `]`) {\n          if (!--currentOpenBracketCount) {\n            state = stateStack.pop();\n          }\n        }\n        break;\n      case 2 /* inParens */:\n        if (char === `'` || char === `\"` || char === \"`\") {\n          stateStack.push(state);\n          state = 3 /* inString */;\n          currentStringType = char;\n        } else if (char === `(`) {\n          currentOpenParensCount++;\n        } else if (char === `)`) {\n          if (i === path.length - 1) {\n            return false;\n          }\n          if (!--currentOpenParensCount) {\n            state = stateStack.pop();\n          }\n        }\n        break;\n      case 3 /* inString */:\n        if (char === currentStringType) {\n          state = stateStack.pop();\n          currentStringType = null;\n        }\n        break;\n    }\n  }\n  return !currentOpenBracketCount && !currentOpenParensCount;\n};\nconst isMemberExpressionNode = (exp, context) => {\n  try {\n    let ret = exp.ast || parser.parseExpression(getExpSource(exp), {\n      plugins: context.expressionPlugins ? [...context.expressionPlugins, \"typescript\"] : [\"typescript\"]\n    });\n    ret = unwrapTSNode(ret);\n    return ret.type === \"MemberExpression\" || ret.type === \"OptionalMemberExpression\" || ret.type === \"Identifier\" && ret.name !== \"undefined\";\n  } catch (e) {\n    return false;\n  }\n};\nconst isMemberExpression = isMemberExpressionNode;\nconst fnExpRE = /^\\s*(async\\s*)?(\\([^)]*?\\)|[\\w$_]+)\\s*(:[^=]+)?=>|^\\s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/;\nconst isFnExpressionBrowser = (exp) => fnExpRE.test(getExpSource(exp));\nconst isFnExpressionNode = (exp, context) => {\n  try {\n    let ret = exp.ast || parser.parseExpression(getExpSource(exp), {\n      plugins: context.expressionPlugins ? [...context.expressionPlugins, \"typescript\"] : [\"typescript\"]\n    });\n    if (ret.type === \"Program\") {\n      ret = ret.body[0];\n      if (ret.type === \"ExpressionStatement\") {\n        ret = ret.expression;\n      }\n    }\n    ret = unwrapTSNode(ret);\n    return ret.type === \"FunctionExpression\" || ret.type === \"ArrowFunctionExpression\";\n  } catch (e) {\n    return false;\n  }\n};\nconst isFnExpression = isFnExpressionNode;\nfunction advancePositionWithClone(pos, source, numberOfCharacters = source.length) {\n  return advancePositionWithMutation(\n    {\n      offset: pos.offset,\n      line: pos.line,\n      column: pos.column\n    },\n    source,\n    numberOfCharacters\n  );\n}\nfunction advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {\n  let linesCount = 0;\n  let lastNewLinePos = -1;\n  for (let i = 0; i < numberOfCharacters; i++) {\n    if (source.charCodeAt(i) === 10) {\n      linesCount++;\n      lastNewLinePos = i;\n    }\n  }\n  pos.offset += numberOfCharacters;\n  pos.line += linesCount;\n  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;\n  return pos;\n}\nfunction assert(condition, msg) {\n  if (!condition) {\n    throw new Error(msg || `unexpected compiler condition`);\n  }\n}\nfunction findDir(node, name, allowEmpty = false) {\n  for (let i = 0; i < node.props.length; i++) {\n    const p = node.props[i];\n    if (p.type === 7 && (allowEmpty || p.exp) && (shared.isString(name) ? p.name === name : name.test(p.name))) {\n      return p;\n    }\n  }\n}\nfunction findProp(node, name, dynamicOnly = false, allowEmpty = false) {\n  for (let i = 0; i < node.props.length; i++) {\n    const p = node.props[i];\n    if (p.type === 6) {\n      if (dynamicOnly) continue;\n      if (p.name === name && (p.value || allowEmpty)) {\n        return p;\n      }\n    } else if (p.name === \"bind\" && (p.exp || allowEmpty) && isStaticArgOf(p.arg, name)) {\n      return p;\n    }\n  }\n}\nfunction isStaticArgOf(arg, name) {\n  return !!(arg && isStaticExp(arg) && arg.content === name);\n}\nfunction hasDynamicKeyVBind(node) {\n  return node.props.some(\n    (p) => p.type === 7 && p.name === \"bind\" && (!p.arg || // v-bind=\"obj\"\n    p.arg.type !== 4 || // v-bind:[_ctx.foo]\n    !p.arg.isStatic)\n    // v-bind:[foo]\n  );\n}\nfunction isText$1(node) {\n  return node.type === 5 || node.type === 2;\n}\nfunction isVSlot(p) {\n  return p.type === 7 && p.name === \"slot\";\n}\nfunction isTemplateNode(node) {\n  return node.type === 1 && node.tagType === 3;\n}\nfunction isSlotOutlet(node) {\n  return node.type === 1 && node.tagType === 2;\n}\nconst propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);\nfunction getUnnormalizedProps(props, callPath = []) {\n  if (props && !shared.isString(props) && props.type === 14) {\n    const callee = props.callee;\n    if (!shared.isString(callee) && propsHelperSet.has(callee)) {\n      return getUnnormalizedProps(\n        props.arguments[0],\n        callPath.concat(props)\n      );\n    }\n  }\n  return [props, callPath];\n}\nfunction injectProp(node, prop, context) {\n  let propsWithInjection;\n  let props = node.type === 13 ? node.props : node.arguments[2];\n  let callPath = [];\n  let parentCall;\n  if (props && !shared.isString(props) && props.type === 14) {\n    const ret = getUnnormalizedProps(props);\n    props = ret[0];\n    callPath = ret[1];\n    parentCall = callPath[callPath.length - 1];\n  }\n  if (props == null || shared.isString(props)) {\n    propsWithInjection = createObjectExpression([prop]);\n  } else if (props.type === 14) {\n    const first = props.arguments[0];\n    if (!shared.isString(first) && first.type === 15) {\n      if (!hasProp(prop, first)) {\n        first.properties.unshift(prop);\n      }\n    } else {\n      if (props.callee === TO_HANDLERS) {\n        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\n          createObjectExpression([prop]),\n          props\n        ]);\n      } else {\n        props.arguments.unshift(createObjectExpression([prop]));\n      }\n    }\n    !propsWithInjection && (propsWithInjection = props);\n  } else if (props.type === 15) {\n    if (!hasProp(prop, props)) {\n      props.properties.unshift(prop);\n    }\n    propsWithInjection = props;\n  } else {\n    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\n      createObjectExpression([prop]),\n      props\n    ]);\n    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {\n      parentCall = callPath[callPath.length - 2];\n    }\n  }\n  if (node.type === 13) {\n    if (parentCall) {\n      parentCall.arguments[0] = propsWithInjection;\n    } else {\n      node.props = propsWithInjection;\n    }\n  } else {\n    if (parentCall) {\n      parentCall.arguments[0] = propsWithInjection;\n    } else {\n      node.arguments[2] = propsWithInjection;\n    }\n  }\n}\nfunction hasProp(prop, props) {\n  let result = false;\n  if (prop.key.type === 4) {\n    const propKeyName = prop.key.content;\n    result = props.properties.some(\n      (p) => p.key.type === 4 && p.key.content === propKeyName\n    );\n  }\n  return result;\n}\nfunction toValidAssetId(name, type) {\n  return `_${type}_${name.replace(/[^\\w]/g, (searchValue, replaceValue) => {\n    return searchValue === \"-\" ? \"_\" : name.charCodeAt(replaceValue).toString();\n  })}`;\n}\nfunction hasScopeRef(node, ids) {\n  if (!node || Object.keys(ids).length === 0) {\n    return false;\n  }\n  switch (node.type) {\n    case 1:\n      for (let i = 0; i < node.props.length; i++) {\n        const p = node.props[i];\n        if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {\n          return true;\n        }\n      }\n      return node.children.some((c) => hasScopeRef(c, ids));\n    case 11:\n      if (hasScopeRef(node.source, ids)) {\n        return true;\n      }\n      return node.children.some((c) => hasScopeRef(c, ids));\n    case 9:\n      return node.branches.some((b) => hasScopeRef(b, ids));\n    case 10:\n      if (hasScopeRef(node.condition, ids)) {\n        return true;\n      }\n      return node.children.some((c) => hasScopeRef(c, ids));\n    case 4:\n      return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];\n    case 8:\n      return node.children.some((c) => shared.isObject(c) && hasScopeRef(c, ids));\n    case 5:\n    case 12:\n      return hasScopeRef(node.content, ids);\n    case 2:\n    case 3:\n    case 20:\n      return false;\n    default:\n      return false;\n  }\n}\nfunction getMemoedVNodeCall(node) {\n  if (node.type === 14 && node.callee === WITH_MEMO) {\n    return node.arguments[1].returns;\n  } else {\n    return node;\n  }\n}\nconst forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+(\\S[\\s\\S]*)/;\n\nconst defaultParserOptions = {\n  parseMode: \"base\",\n  ns: 0,\n  delimiters: [`{{`, `}}`],\n  getNamespace: () => 0,\n  isVoidTag: shared.NO,\n  isPreTag: shared.NO,\n  isIgnoreNewlineTag: shared.NO,\n  isCustomElement: shared.NO,\n  onError: defaultOnError,\n  onWarn: defaultOnWarn,\n  comments: true,\n  prefixIdentifiers: false\n};\nlet currentOptions = defaultParserOptions;\nlet currentRoot = null;\nlet currentInput = \"\";\nlet currentOpenTag = null;\nlet currentProp = null;\nlet currentAttrValue = \"\";\nlet currentAttrStartIndex = -1;\nlet currentAttrEndIndex = -1;\nlet inPre = 0;\nlet inVPre = false;\nlet currentVPreBoundary = null;\nconst stack = [];\nconst tokenizer = new Tokenizer(stack, {\n  onerr: emitError,\n  ontext(start, end) {\n    onText(getSlice(start, end), start, end);\n  },\n  ontextentity(char, start, end) {\n    onText(char, start, end);\n  },\n  oninterpolation(start, end) {\n    if (inVPre) {\n      return onText(getSlice(start, end), start, end);\n    }\n    let innerStart = start + tokenizer.delimiterOpen.length;\n    let innerEnd = end - tokenizer.delimiterClose.length;\n    while (isWhitespace(currentInput.charCodeAt(innerStart))) {\n      innerStart++;\n    }\n    while (isWhitespace(currentInput.charCodeAt(innerEnd - 1))) {\n      innerEnd--;\n    }\n    let exp = getSlice(innerStart, innerEnd);\n    if (exp.includes(\"&\")) {\n      {\n        exp = decode_js.decodeHTML(exp);\n      }\n    }\n    addNode({\n      type: 5,\n      content: createExp(exp, false, getLoc(innerStart, innerEnd)),\n      loc: getLoc(start, end)\n    });\n  },\n  onopentagname(start, end) {\n    const name = getSlice(start, end);\n    currentOpenTag = {\n      type: 1,\n      tag: name,\n      ns: currentOptions.getNamespace(name, stack[0], currentOptions.ns),\n      tagType: 0,\n      // will be refined on tag close\n      props: [],\n      children: [],\n      loc: getLoc(start - 1, end),\n      codegenNode: void 0\n    };\n  },\n  onopentagend(end) {\n    endOpenTag(end);\n  },\n  onclosetag(start, end) {\n    const name = getSlice(start, end);\n    if (!currentOptions.isVoidTag(name)) {\n      let found = false;\n      for (let i = 0; i < stack.length; i++) {\n        const e = stack[i];\n        if (e.tag.toLowerCase() === name.toLowerCase()) {\n          found = true;\n          if (i > 0) {\n            emitError(24, stack[0].loc.start.offset);\n          }\n          for (let j = 0; j <= i; j++) {\n            const el = stack.shift();\n            onCloseTag(el, end, j < i);\n          }\n          break;\n        }\n      }\n      if (!found) {\n        emitError(23, backTrack(start, 60));\n      }\n    }\n  },\n  onselfclosingtag(end) {\n    const name = currentOpenTag.tag;\n    currentOpenTag.isSelfClosing = true;\n    endOpenTag(end);\n    if (stack[0] && stack[0].tag === name) {\n      onCloseTag(stack.shift(), end);\n    }\n  },\n  onattribname(start, end) {\n    currentProp = {\n      type: 6,\n      name: getSlice(start, end),\n      nameLoc: getLoc(start, end),\n      value: void 0,\n      loc: getLoc(start)\n    };\n  },\n  ondirname(start, end) {\n    const raw = getSlice(start, end);\n    const name = raw === \".\" || raw === \":\" ? \"bind\" : raw === \"@\" ? \"on\" : raw === \"#\" ? \"slot\" : raw.slice(2);\n    if (!inVPre && name === \"\") {\n      emitError(26, start);\n    }\n    if (inVPre || name === \"\") {\n      currentProp = {\n        type: 6,\n        name: raw,\n        nameLoc: getLoc(start, end),\n        value: void 0,\n        loc: getLoc(start)\n      };\n    } else {\n      currentProp = {\n        type: 7,\n        name,\n        rawName: raw,\n        exp: void 0,\n        arg: void 0,\n        modifiers: raw === \".\" ? [createSimpleExpression(\"prop\")] : [],\n        loc: getLoc(start)\n      };\n      if (name === \"pre\") {\n        inVPre = tokenizer.inVPre = true;\n        currentVPreBoundary = currentOpenTag;\n        const props = currentOpenTag.props;\n        for (let i = 0; i < props.length; i++) {\n          if (props[i].type === 7) {\n            props[i] = dirToAttr(props[i]);\n          }\n        }\n      }\n    }\n  },\n  ondirarg(start, end) {\n    if (start === end) return;\n    const arg = getSlice(start, end);\n    if (inVPre) {\n      currentProp.name += arg;\n      setLocEnd(currentProp.nameLoc, end);\n    } else {\n      const isStatic = arg[0] !== `[`;\n      currentProp.arg = createExp(\n        isStatic ? arg : arg.slice(1, -1),\n        isStatic,\n        getLoc(start, end),\n        isStatic ? 3 : 0\n      );\n    }\n  },\n  ondirmodifier(start, end) {\n    const mod = getSlice(start, end);\n    if (inVPre) {\n      currentProp.name += \".\" + mod;\n      setLocEnd(currentProp.nameLoc, end);\n    } else if (currentProp.name === \"slot\") {\n      const arg = currentProp.arg;\n      if (arg) {\n        arg.content += \".\" + mod;\n        setLocEnd(arg.loc, end);\n      }\n    } else {\n      const exp = createSimpleExpression(mod, true, getLoc(start, end));\n      currentProp.modifiers.push(exp);\n    }\n  },\n  onattribdata(start, end) {\n    currentAttrValue += getSlice(start, end);\n    if (currentAttrStartIndex < 0) currentAttrStartIndex = start;\n    currentAttrEndIndex = end;\n  },\n  onattribentity(char, start, end) {\n    currentAttrValue += char;\n    if (currentAttrStartIndex < 0) currentAttrStartIndex = start;\n    currentAttrEndIndex = end;\n  },\n  onattribnameend(end) {\n    const start = currentProp.loc.start.offset;\n    const name = getSlice(start, end);\n    if (currentProp.type === 7) {\n      currentProp.rawName = name;\n    }\n    if (currentOpenTag.props.some(\n      (p) => (p.type === 7 ? p.rawName : p.name) === name\n    )) {\n      emitError(2, start);\n    }\n  },\n  onattribend(quote, end) {\n    if (currentOpenTag && currentProp) {\n      setLocEnd(currentProp.loc, end);\n      if (quote !== 0) {\n        if (currentProp.type === 6) {\n          if (currentProp.name === \"class\") {\n            currentAttrValue = condense(currentAttrValue).trim();\n          }\n          if (quote === 1 && !currentAttrValue) {\n            emitError(13, end);\n          }\n          currentProp.value = {\n            type: 2,\n            content: currentAttrValue,\n            loc: quote === 1 ? getLoc(currentAttrStartIndex, currentAttrEndIndex) : getLoc(currentAttrStartIndex - 1, currentAttrEndIndex + 1)\n          };\n          if (tokenizer.inSFCRoot && currentOpenTag.tag === \"template\" && currentProp.name === \"lang\" && currentAttrValue && currentAttrValue !== \"html\") {\n            tokenizer.enterRCDATA(toCharCodes(`</template`), 0);\n          }\n        } else {\n          let expParseMode = 0 /* Normal */;\n          {\n            if (currentProp.name === \"for\") {\n              expParseMode = 3 /* Skip */;\n            } else if (currentProp.name === \"slot\") {\n              expParseMode = 1 /* Params */;\n            } else if (currentProp.name === \"on\" && currentAttrValue.includes(\";\")) {\n              expParseMode = 2 /* Statements */;\n            }\n          }\n          currentProp.exp = createExp(\n            currentAttrValue,\n            false,\n            getLoc(currentAttrStartIndex, currentAttrEndIndex),\n            0,\n            expParseMode\n          );\n          if (currentProp.name === \"for\") {\n            currentProp.forParseResult = parseForExpression(currentProp.exp);\n          }\n          let syncIndex = -1;\n          if (currentProp.name === \"bind\" && (syncIndex = currentProp.modifiers.findIndex(\n            (mod) => mod.content === \"sync\"\n          )) > -1 && checkCompatEnabled(\n            \"COMPILER_V_BIND_SYNC\",\n            currentOptions,\n            currentProp.loc,\n            currentProp.arg.loc.source\n          )) {\n            currentProp.name = \"model\";\n            currentProp.modifiers.splice(syncIndex, 1);\n          }\n        }\n      }\n      if (currentProp.type !== 7 || currentProp.name !== \"pre\") {\n        currentOpenTag.props.push(currentProp);\n      }\n    }\n    currentAttrValue = \"\";\n    currentAttrStartIndex = currentAttrEndIndex = -1;\n  },\n  oncomment(start, end) {\n    if (currentOptions.comments) {\n      addNode({\n        type: 3,\n        content: getSlice(start, end),\n        loc: getLoc(start - 4, end + 3)\n      });\n    }\n  },\n  onend() {\n    const end = currentInput.length;\n    if (tokenizer.state !== 1) {\n      switch (tokenizer.state) {\n        case 5:\n        case 8:\n          emitError(5, end);\n          break;\n        case 3:\n        case 4:\n          emitError(\n            25,\n            tokenizer.sectionStart\n          );\n          break;\n        case 28:\n          if (tokenizer.currentSequence === Sequences.CdataEnd) {\n            emitError(6, end);\n          } else {\n            emitError(7, end);\n          }\n          break;\n        case 6:\n        case 7:\n        case 9:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n        // \"\n        case 20:\n        // '\n        case 21:\n          emitError(9, end);\n          break;\n      }\n    }\n    for (let index = 0; index < stack.length; index++) {\n      onCloseTag(stack[index], end - 1);\n      emitError(24, stack[index].loc.start.offset);\n    }\n  },\n  oncdata(start, end) {\n    if (stack[0].ns !== 0) {\n      onText(getSlice(start, end), start, end);\n    } else {\n      emitError(1, start - 9);\n    }\n  },\n  onprocessinginstruction(start) {\n    if ((stack[0] ? stack[0].ns : currentOptions.ns) === 0) {\n      emitError(\n        21,\n        start - 1\n      );\n    }\n  }\n});\nconst forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nconst stripParensRE = /^\\(|\\)$/g;\nfunction parseForExpression(input) {\n  const loc = input.loc;\n  const exp = input.content;\n  const inMatch = exp.match(forAliasRE);\n  if (!inMatch) return;\n  const [, LHS, RHS] = inMatch;\n  const createAliasExpression = (content, offset, asParam = false) => {\n    const start = loc.start.offset + offset;\n    const end = start + content.length;\n    return createExp(\n      content,\n      false,\n      getLoc(start, end),\n      0,\n      asParam ? 1 /* Params */ : 0 /* Normal */\n    );\n  };\n  const result = {\n    source: createAliasExpression(RHS.trim(), exp.indexOf(RHS, LHS.length)),\n    value: void 0,\n    key: void 0,\n    index: void 0,\n    finalized: false\n  };\n  let valueContent = LHS.trim().replace(stripParensRE, \"\").trim();\n  const trimmedOffset = LHS.indexOf(valueContent);\n  const iteratorMatch = valueContent.match(forIteratorRE);\n  if (iteratorMatch) {\n    valueContent = valueContent.replace(forIteratorRE, \"\").trim();\n    const keyContent = iteratorMatch[1].trim();\n    let keyOffset;\n    if (keyContent) {\n      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);\n      result.key = createAliasExpression(keyContent, keyOffset, true);\n    }\n    if (iteratorMatch[2]) {\n      const indexContent = iteratorMatch[2].trim();\n      if (indexContent) {\n        result.index = createAliasExpression(\n          indexContent,\n          exp.indexOf(\n            indexContent,\n            result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length\n          ),\n          true\n        );\n      }\n    }\n  }\n  if (valueContent) {\n    result.value = createAliasExpression(valueContent, trimmedOffset, true);\n  }\n  return result;\n}\nfunction getSlice(start, end) {\n  return currentInput.slice(start, end);\n}\nfunction endOpenTag(end) {\n  if (tokenizer.inSFCRoot) {\n    currentOpenTag.innerLoc = getLoc(end + 1, end + 1);\n  }\n  addNode(currentOpenTag);\n  const { tag, ns } = currentOpenTag;\n  if (ns === 0 && currentOptions.isPreTag(tag)) {\n    inPre++;\n  }\n  if (currentOptions.isVoidTag(tag)) {\n    onCloseTag(currentOpenTag, end);\n  } else {\n    stack.unshift(currentOpenTag);\n    if (ns === 1 || ns === 2) {\n      tokenizer.inXML = true;\n    }\n  }\n  currentOpenTag = null;\n}\nfunction onText(content, start, end) {\n  const parent = stack[0] || currentRoot;\n  const lastNode = parent.children[parent.children.length - 1];\n  if (lastNode && lastNode.type === 2) {\n    lastNode.content += content;\n    setLocEnd(lastNode.loc, end);\n  } else {\n    parent.children.push({\n      type: 2,\n      content,\n      loc: getLoc(start, end)\n    });\n  }\n}\nfunction onCloseTag(el, end, isImplied = false) {\n  if (isImplied) {\n    setLocEnd(el.loc, backTrack(end, 60));\n  } else {\n    setLocEnd(el.loc, lookAhead(end, 62) + 1);\n  }\n  if (tokenizer.inSFCRoot) {\n    if (el.children.length) {\n      el.innerLoc.end = shared.extend({}, el.children[el.children.length - 1].loc.end);\n    } else {\n      el.innerLoc.end = shared.extend({}, el.innerLoc.start);\n    }\n    el.innerLoc.source = getSlice(\n      el.innerLoc.start.offset,\n      el.innerLoc.end.offset\n    );\n  }\n  const { tag, ns, children } = el;\n  if (!inVPre) {\n    if (tag === \"slot\") {\n      el.tagType = 2;\n    } else if (isFragmentTemplate(el)) {\n      el.tagType = 3;\n    } else if (isComponent(el)) {\n      el.tagType = 1;\n    }\n  }\n  if (!tokenizer.inRCDATA) {\n    el.children = condenseWhitespace(children);\n  }\n  if (ns === 0 && currentOptions.isIgnoreNewlineTag(tag)) {\n    const first = children[0];\n    if (first && first.type === 2) {\n      first.content = first.content.replace(/^\\r?\\n/, \"\");\n    }\n  }\n  if (ns === 0 && currentOptions.isPreTag(tag)) {\n    inPre--;\n  }\n  if (currentVPreBoundary === el) {\n    inVPre = tokenizer.inVPre = false;\n    currentVPreBoundary = null;\n  }\n  if (tokenizer.inXML && (stack[0] ? stack[0].ns : currentOptions.ns) === 0) {\n    tokenizer.inXML = false;\n  }\n  {\n    const props = el.props;\n    if (isCompatEnabled(\n      \"COMPILER_V_IF_V_FOR_PRECEDENCE\",\n      currentOptions\n    )) {\n      let hasIf = false;\n      let hasFor = false;\n      for (let i = 0; i < props.length; i++) {\n        const p = props[i];\n        if (p.type === 7) {\n          if (p.name === \"if\") {\n            hasIf = true;\n          } else if (p.name === \"for\") {\n            hasFor = true;\n          }\n        }\n        if (hasIf && hasFor) {\n          warnDeprecation(\n            \"COMPILER_V_IF_V_FOR_PRECEDENCE\",\n            currentOptions,\n            el.loc\n          );\n          break;\n        }\n      }\n    }\n    if (!tokenizer.inSFCRoot && isCompatEnabled(\n      \"COMPILER_NATIVE_TEMPLATE\",\n      currentOptions\n    ) && el.tag === \"template\" && !isFragmentTemplate(el)) {\n      warnDeprecation(\n        \"COMPILER_NATIVE_TEMPLATE\",\n        currentOptions,\n        el.loc\n      );\n      const parent = stack[0] || currentRoot;\n      const index = parent.children.indexOf(el);\n      parent.children.splice(index, 1, ...el.children);\n    }\n    const inlineTemplateProp = props.find(\n      (p) => p.type === 6 && p.name === \"inline-template\"\n    );\n    if (inlineTemplateProp && checkCompatEnabled(\n      \"COMPILER_INLINE_TEMPLATE\",\n      currentOptions,\n      inlineTemplateProp.loc\n    ) && el.children.length) {\n      inlineTemplateProp.value = {\n        type: 2,\n        content: getSlice(\n          el.children[0].loc.start.offset,\n          el.children[el.children.length - 1].loc.end.offset\n        ),\n        loc: inlineTemplateProp.loc\n      };\n    }\n  }\n}\nfunction lookAhead(index, c) {\n  let i = index;\n  while (currentInput.charCodeAt(i) !== c && i < currentInput.length - 1) i++;\n  return i;\n}\nfunction backTrack(index, c) {\n  let i = index;\n  while (currentInput.charCodeAt(i) !== c && i >= 0) i--;\n  return i;\n}\nconst specialTemplateDir = /* @__PURE__ */ new Set([\"if\", \"else\", \"else-if\", \"for\", \"slot\"]);\nfunction isFragmentTemplate({ tag, props }) {\n  if (tag === \"template\") {\n    for (let i = 0; i < props.length; i++) {\n      if (props[i].type === 7 && specialTemplateDir.has(props[i].name)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isComponent({ tag, props }) {\n  if (currentOptions.isCustomElement(tag)) {\n    return false;\n  }\n  if (tag === \"component\" || isUpperCase(tag.charCodeAt(0)) || isCoreComponent(tag) || currentOptions.isBuiltInComponent && currentOptions.isBuiltInComponent(tag) || currentOptions.isNativeTag && !currentOptions.isNativeTag(tag)) {\n    return true;\n  }\n  for (let i = 0; i < props.length; i++) {\n    const p = props[i];\n    if (p.type === 6) {\n      if (p.name === \"is\" && p.value) {\n        if (p.value.content.startsWith(\"vue:\")) {\n          return true;\n        } else if (checkCompatEnabled(\n          \"COMPILER_IS_ON_ELEMENT\",\n          currentOptions,\n          p.loc\n        )) {\n          return true;\n        }\n      }\n    } else if (// :is on plain element - only treat as component in compat mode\n    p.name === \"bind\" && isStaticArgOf(p.arg, \"is\") && checkCompatEnabled(\n      \"COMPILER_IS_ON_ELEMENT\",\n      currentOptions,\n      p.loc\n    )) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUpperCase(c) {\n  return c > 64 && c < 91;\n}\nconst windowsNewlineRE = /\\r\\n/g;\nfunction condenseWhitespace(nodes, tag) {\n  const shouldCondense = currentOptions.whitespace !== \"preserve\";\n  let removedWhitespace = false;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (node.type === 2) {\n      if (!inPre) {\n        if (isAllWhitespace(node.content)) {\n          const prev = nodes[i - 1] && nodes[i - 1].type;\n          const next = nodes[i + 1] && nodes[i + 1].type;\n          if (!prev || !next || shouldCondense && (prev === 3 && (next === 3 || next === 1) || prev === 1 && (next === 3 || next === 1 && hasNewlineChar(node.content)))) {\n            removedWhitespace = true;\n            nodes[i] = null;\n          } else {\n            node.content = \" \";\n          }\n        } else if (shouldCondense) {\n          node.content = condense(node.content);\n        }\n      } else {\n        node.content = node.content.replace(windowsNewlineRE, \"\\n\");\n      }\n    }\n  }\n  return removedWhitespace ? nodes.filter(Boolean) : nodes;\n}\nfunction isAllWhitespace(str) {\n  for (let i = 0; i < str.length; i++) {\n    if (!isWhitespace(str.charCodeAt(i))) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction hasNewlineChar(str) {\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c === 10 || c === 13) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction condense(str) {\n  let ret = \"\";\n  let prevCharIsWhitespace = false;\n  for (let i = 0; i < str.length; i++) {\n    if (isWhitespace(str.charCodeAt(i))) {\n      if (!prevCharIsWhitespace) {\n        ret += \" \";\n        prevCharIsWhitespace = true;\n      }\n    } else {\n      ret += str[i];\n      prevCharIsWhitespace = false;\n    }\n  }\n  return ret;\n}\nfunction addNode(node) {\n  (stack[0] || currentRoot).children.push(node);\n}\nfunction getLoc(start, end) {\n  return {\n    start: tokenizer.getPos(start),\n    // @ts-expect-error allow late attachment\n    end: end == null ? end : tokenizer.getPos(end),\n    // @ts-expect-error allow late attachment\n    source: end == null ? end : getSlice(start, end)\n  };\n}\nfunction cloneLoc(loc) {\n  return getLoc(loc.start.offset, loc.end.offset);\n}\nfunction setLocEnd(loc, end) {\n  loc.end = tokenizer.getPos(end);\n  loc.source = getSlice(loc.start.offset, end);\n}\nfunction dirToAttr(dir) {\n  const attr = {\n    type: 6,\n    name: dir.rawName,\n    nameLoc: getLoc(\n      dir.loc.start.offset,\n      dir.loc.start.offset + dir.rawName.length\n    ),\n    value: void 0,\n    loc: dir.loc\n  };\n  if (dir.exp) {\n    const loc = dir.exp.loc;\n    if (loc.end.offset < dir.loc.end.offset) {\n      loc.start.offset--;\n      loc.start.column--;\n      loc.end.offset++;\n      loc.end.column++;\n    }\n    attr.value = {\n      type: 2,\n      content: dir.exp.content,\n      loc\n    };\n  }\n  return attr;\n}\nfunction createExp(content, isStatic = false, loc, constType = 0, parseMode = 0 /* Normal */) {\n  const exp = createSimpleExpression(content, isStatic, loc, constType);\n  if (!isStatic && currentOptions.prefixIdentifiers && parseMode !== 3 /* Skip */ && content.trim()) {\n    if (isSimpleIdentifier(content)) {\n      exp.ast = null;\n      return exp;\n    }\n    try {\n      const plugins = currentOptions.expressionPlugins;\n      const options = {\n        plugins: plugins ? [...plugins, \"typescript\"] : [\"typescript\"]\n      };\n      if (parseMode === 2 /* Statements */) {\n        exp.ast = parser.parse(` ${content} `, options).program;\n      } else if (parseMode === 1 /* Params */) {\n        exp.ast = parser.parseExpression(`(${content})=>{}`, options);\n      } else {\n        exp.ast = parser.parseExpression(`(${content})`, options);\n      }\n    } catch (e) {\n      exp.ast = false;\n      emitError(45, loc.start.offset, e.message);\n    }\n  }\n  return exp;\n}\nfunction emitError(code, index, message) {\n  currentOptions.onError(\n    createCompilerError(code, getLoc(index, index), void 0, message)\n  );\n}\nfunction reset() {\n  tokenizer.reset();\n  currentOpenTag = null;\n  currentProp = null;\n  currentAttrValue = \"\";\n  currentAttrStartIndex = -1;\n  currentAttrEndIndex = -1;\n  stack.length = 0;\n}\nfunction baseParse(input, options) {\n  reset();\n  currentInput = input;\n  currentOptions = shared.extend({}, defaultParserOptions);\n  if (options) {\n    let key;\n    for (key in options) {\n      if (options[key] != null) {\n        currentOptions[key] = options[key];\n      }\n    }\n  }\n  {\n    if (currentOptions.decodeEntities) {\n      console.warn(\n        `[@vue/compiler-core] decodeEntities option is passed but will be ignored in non-browser builds.`\n      );\n    }\n  }\n  tokenizer.mode = currentOptions.parseMode === \"html\" ? 1 : currentOptions.parseMode === \"sfc\" ? 2 : 0;\n  tokenizer.inXML = currentOptions.ns === 1 || currentOptions.ns === 2;\n  const delimiters = options && options.delimiters;\n  if (delimiters) {\n    tokenizer.delimiterOpen = toCharCodes(delimiters[0]);\n    tokenizer.delimiterClose = toCharCodes(delimiters[1]);\n  }\n  const root = currentRoot = createRoot([], input);\n  tokenizer.parse(currentInput);\n  root.loc = getLoc(0, input.length);\n  root.children = condenseWhitespace(root.children);\n  currentRoot = null;\n  return root;\n}\n\nfunction cacheStatic(root, context) {\n  walk(\n    root,\n    void 0,\n    context,\n    // Root node is unfortunately non-hoistable due to potential parent\n    // fallthrough attributes.\n    isSingleElementRoot(root, root.children[0])\n  );\n}\nfunction isSingleElementRoot(root, child) {\n  const { children } = root;\n  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);\n}\nfunction walk(node, parent, context, doNotHoistNode = false, inFor = false) {\n  const { children } = node;\n  const toCache = [];\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (child.type === 1 && child.tagType === 0) {\n      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);\n      if (constantType > 0) {\n        if (constantType >= 2) {\n          child.codegenNode.patchFlag = -1;\n          toCache.push(child);\n          continue;\n        }\n      } else {\n        const codegenNode = child.codegenNode;\n        if (codegenNode.type === 13) {\n          const flag = codegenNode.patchFlag;\n          if ((flag === void 0 || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {\n            const props = getNodeProps(child);\n            if (props) {\n              codegenNode.props = context.hoist(props);\n            }\n          }\n          if (codegenNode.dynamicProps) {\n            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);\n          }\n        }\n      }\n    } else if (child.type === 12) {\n      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);\n      if (constantType >= 2) {\n        toCache.push(child);\n        continue;\n      }\n    }\n    if (child.type === 1) {\n      const isComponent = child.tagType === 1;\n      if (isComponent) {\n        context.scopes.vSlot++;\n      }\n      walk(child, node, context, false, inFor);\n      if (isComponent) {\n        context.scopes.vSlot--;\n      }\n    } else if (child.type === 11) {\n      walk(child, node, context, child.children.length === 1, true);\n    } else if (child.type === 9) {\n      for (let i2 = 0; i2 < child.branches.length; i2++) {\n        walk(\n          child.branches[i2],\n          node,\n          context,\n          child.branches[i2].children.length === 1,\n          inFor\n        );\n      }\n    }\n  }\n  let cachedAsArray = false;\n  const slotCacheKeys = [];\n  if (toCache.length === children.length && node.type === 1) {\n    if (node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && shared.isArray(node.codegenNode.children)) {\n      node.codegenNode.children = getCacheExpression(\n        createArrayExpression(node.codegenNode.children)\n      );\n      cachedAsArray = true;\n    } else if (node.tagType === 1 && node.codegenNode && node.codegenNode.type === 13 && node.codegenNode.children && !shared.isArray(node.codegenNode.children) && node.codegenNode.children.type === 15) {\n      const slot = getSlotNode(node.codegenNode, \"default\");\n      if (slot) {\n        slotCacheKeys.push(context.cached.length);\n        slot.returns = getCacheExpression(\n          createArrayExpression(slot.returns)\n        );\n        cachedAsArray = true;\n      }\n    } else if (node.tagType === 3 && parent && parent.type === 1 && parent.tagType === 1 && parent.codegenNode && parent.codegenNode.type === 13 && parent.codegenNode.children && !shared.isArray(parent.codegenNode.children) && parent.codegenNode.children.type === 15) {\n      const slotName = findDir(node, \"slot\", true);\n      const slot = slotName && slotName.arg && getSlotNode(parent.codegenNode, slotName.arg);\n      if (slot) {\n        slotCacheKeys.push(context.cached.length);\n        slot.returns = getCacheExpression(\n          createArrayExpression(slot.returns)\n        );\n        cachedAsArray = true;\n      }\n    }\n  }\n  if (!cachedAsArray) {\n    for (const child of toCache) {\n      slotCacheKeys.push(context.cached.length);\n      child.codegenNode = context.cache(child.codegenNode);\n    }\n  }\n  if (slotCacheKeys.length && node.type === 1 && node.tagType === 1 && node.codegenNode && node.codegenNode.type === 13 && node.codegenNode.children && !shared.isArray(node.codegenNode.children) && node.codegenNode.children.type === 15) {\n    node.codegenNode.children.properties.push(\n      createObjectProperty(\n        `__`,\n        createSimpleExpression(JSON.stringify(slotCacheKeys), false)\n      )\n    );\n  }\n  function getCacheExpression(value) {\n    const exp = context.cache(value);\n    if (inFor && context.hmr) {\n      exp.needArraySpread = true;\n    }\n    return exp;\n  }\n  function getSlotNode(node2, name) {\n    if (node2.children && !shared.isArray(node2.children) && node2.children.type === 15) {\n      const slot = node2.children.properties.find(\n        (p) => p.key === name || p.key.content === name\n      );\n      return slot && slot.value;\n    }\n  }\n  if (toCache.length && context.transformHoist) {\n    context.transformHoist(children, context, node);\n  }\n}\nfunction getConstantType(node, context) {\n  const { constantCache } = context;\n  switch (node.type) {\n    case 1:\n      if (node.tagType !== 0) {\n        return 0;\n      }\n      const cached = constantCache.get(node);\n      if (cached !== void 0) {\n        return cached;\n      }\n      const codegenNode = node.codegenNode;\n      if (codegenNode.type !== 13) {\n        return 0;\n      }\n      if (codegenNode.isBlock && node.tag !== \"svg\" && node.tag !== \"foreignObject\" && node.tag !== \"math\") {\n        return 0;\n      }\n      if (codegenNode.patchFlag === void 0) {\n        let returnType2 = 3;\n        const generatedPropsType = getGeneratedPropsConstantType(node, context);\n        if (generatedPropsType === 0) {\n          constantCache.set(node, 0);\n          return 0;\n        }\n        if (generatedPropsType < returnType2) {\n          returnType2 = generatedPropsType;\n        }\n        for (let i = 0; i < node.children.length; i++) {\n          const childType = getConstantType(node.children[i], context);\n          if (childType === 0) {\n            constantCache.set(node, 0);\n            return 0;\n          }\n          if (childType < returnType2) {\n            returnType2 = childType;\n          }\n        }\n        if (returnType2 > 1) {\n          for (let i = 0; i < node.props.length; i++) {\n            const p = node.props[i];\n            if (p.type === 7 && p.name === \"bind\" && p.exp) {\n              const expType = getConstantType(p.exp, context);\n              if (expType === 0) {\n                constantCache.set(node, 0);\n                return 0;\n              }\n              if (expType < returnType2) {\n                returnType2 = expType;\n              }\n            }\n          }\n        }\n        if (codegenNode.isBlock) {\n          for (let i = 0; i < node.props.length; i++) {\n            const p = node.props[i];\n            if (p.type === 7) {\n              constantCache.set(node, 0);\n              return 0;\n            }\n          }\n          context.removeHelper(OPEN_BLOCK);\n          context.removeHelper(\n            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)\n          );\n          codegenNode.isBlock = false;\n          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));\n        }\n        constantCache.set(node, returnType2);\n        return returnType2;\n      } else {\n        constantCache.set(node, 0);\n        return 0;\n      }\n    case 2:\n    case 3:\n      return 3;\n    case 9:\n    case 11:\n    case 10:\n      return 0;\n    case 5:\n    case 12:\n      return getConstantType(node.content, context);\n    case 4:\n      return node.constType;\n    case 8:\n      let returnType = 3;\n      for (let i = 0; i < node.children.length; i++) {\n        const child = node.children[i];\n        if (shared.isString(child) || shared.isSymbol(child)) {\n          continue;\n        }\n        const childType = getConstantType(child, context);\n        if (childType === 0) {\n          return 0;\n        } else if (childType < returnType) {\n          returnType = childType;\n        }\n      }\n      return returnType;\n    case 20:\n      return 2;\n    default:\n      return 0;\n  }\n}\nconst allowHoistedHelperSet = /* @__PURE__ */ new Set([\n  NORMALIZE_CLASS,\n  NORMALIZE_STYLE,\n  NORMALIZE_PROPS,\n  GUARD_REACTIVE_PROPS\n]);\nfunction getConstantTypeOfHelperCall(value, context) {\n  if (value.type === 14 && !shared.isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {\n    const arg = value.arguments[0];\n    if (arg.type === 4) {\n      return getConstantType(arg, context);\n    } else if (arg.type === 14) {\n      return getConstantTypeOfHelperCall(arg, context);\n    }\n  }\n  return 0;\n}\nfunction getGeneratedPropsConstantType(node, context) {\n  let returnType = 3;\n  const props = getNodeProps(node);\n  if (props && props.type === 15) {\n    const { properties } = props;\n    for (let i = 0; i < properties.length; i++) {\n      const { key, value } = properties[i];\n      const keyType = getConstantType(key, context);\n      if (keyType === 0) {\n        return keyType;\n      }\n      if (keyType < returnType) {\n        returnType = keyType;\n      }\n      let valueType;\n      if (value.type === 4) {\n        valueType = getConstantType(value, context);\n      } else if (value.type === 14) {\n        valueType = getConstantTypeOfHelperCall(value, context);\n      } else {\n        valueType = 0;\n      }\n      if (valueType === 0) {\n        return valueType;\n      }\n      if (valueType < returnType) {\n        returnType = valueType;\n      }\n    }\n  }\n  return returnType;\n}\nfunction getNodeProps(node) {\n  const codegenNode = node.codegenNode;\n  if (codegenNode.type === 13) {\n    return codegenNode.props;\n  }\n}\n\nfunction createTransformContext(root, {\n  filename = \"\",\n  prefixIdentifiers = false,\n  hoistStatic = false,\n  hmr = false,\n  cacheHandlers = false,\n  nodeTransforms = [],\n  directiveTransforms = {},\n  transformHoist = null,\n  isBuiltInComponent = shared.NOOP,\n  isCustomElement = shared.NOOP,\n  expressionPlugins = [],\n  scopeId = null,\n  slotted = true,\n  ssr = false,\n  inSSR = false,\n  ssrCssVars = ``,\n  bindingMetadata = shared.EMPTY_OBJ,\n  inline = false,\n  isTS = false,\n  onError = defaultOnError,\n  onWarn = defaultOnWarn,\n  compatConfig\n}) {\n  const nameMatch = filename.replace(/\\?.*$/, \"\").match(/([^/\\\\]+)\\.\\w+$/);\n  const context = {\n    // options\n    filename,\n    selfName: nameMatch && shared.capitalize(shared.camelize(nameMatch[1])),\n    prefixIdentifiers,\n    hoistStatic,\n    hmr,\n    cacheHandlers,\n    nodeTransforms,\n    directiveTransforms,\n    transformHoist,\n    isBuiltInComponent,\n    isCustomElement,\n    expressionPlugins,\n    scopeId,\n    slotted,\n    ssr,\n    inSSR,\n    ssrCssVars,\n    bindingMetadata,\n    inline,\n    isTS,\n    onError,\n    onWarn,\n    compatConfig,\n    // state\n    root,\n    helpers: /* @__PURE__ */ new Map(),\n    components: /* @__PURE__ */ new Set(),\n    directives: /* @__PURE__ */ new Set(),\n    hoists: [],\n    imports: [],\n    cached: [],\n    constantCache: /* @__PURE__ */ new WeakMap(),\n    temps: 0,\n    identifiers: /* @__PURE__ */ Object.create(null),\n    scopes: {\n      vFor: 0,\n      vSlot: 0,\n      vPre: 0,\n      vOnce: 0\n    },\n    parent: null,\n    grandParent: null,\n    currentNode: root,\n    childIndex: 0,\n    inVOnce: false,\n    // methods\n    helper(name) {\n      const count = context.helpers.get(name) || 0;\n      context.helpers.set(name, count + 1);\n      return name;\n    },\n    removeHelper(name) {\n      const count = context.helpers.get(name);\n      if (count) {\n        const currentCount = count - 1;\n        if (!currentCount) {\n          context.helpers.delete(name);\n        } else {\n          context.helpers.set(name, currentCount);\n        }\n      }\n    },\n    helperString(name) {\n      return `_${helperNameMap[context.helper(name)]}`;\n    },\n    replaceNode(node) {\n      {\n        if (!context.currentNode) {\n          throw new Error(`Node being replaced is already removed.`);\n        }\n        if (!context.parent) {\n          throw new Error(`Cannot replace root node.`);\n        }\n      }\n      context.parent.children[context.childIndex] = context.currentNode = node;\n    },\n    removeNode(node) {\n      if (!context.parent) {\n        throw new Error(`Cannot remove root node.`);\n      }\n      const list = context.parent.children;\n      const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;\n      if (removalIndex < 0) {\n        throw new Error(`node being removed is not a child of current parent`);\n      }\n      if (!node || node === context.currentNode) {\n        context.currentNode = null;\n        context.onNodeRemoved();\n      } else {\n        if (context.childIndex > removalIndex) {\n          context.childIndex--;\n          context.onNodeRemoved();\n        }\n      }\n      context.parent.children.splice(removalIndex, 1);\n    },\n    onNodeRemoved: shared.NOOP,\n    addIdentifiers(exp) {\n      {\n        if (shared.isString(exp)) {\n          addId(exp);\n        } else if (exp.identifiers) {\n          exp.identifiers.forEach(addId);\n        } else if (exp.type === 4) {\n          addId(exp.content);\n        }\n      }\n    },\n    removeIdentifiers(exp) {\n      {\n        if (shared.isString(exp)) {\n          removeId(exp);\n        } else if (exp.identifiers) {\n          exp.identifiers.forEach(removeId);\n        } else if (exp.type === 4) {\n          removeId(exp.content);\n        }\n      }\n    },\n    hoist(exp) {\n      if (shared.isString(exp)) exp = createSimpleExpression(exp);\n      context.hoists.push(exp);\n      const identifier = createSimpleExpression(\n        `_hoisted_${context.hoists.length}`,\n        false,\n        exp.loc,\n        2\n      );\n      identifier.hoisted = exp;\n      return identifier;\n    },\n    cache(exp, isVNode = false, inVOnce = false) {\n      const cacheExp = createCacheExpression(\n        context.cached.length,\n        exp,\n        isVNode,\n        inVOnce\n      );\n      context.cached.push(cacheExp);\n      return cacheExp;\n    }\n  };\n  {\n    context.filters = /* @__PURE__ */ new Set();\n  }\n  function addId(id) {\n    const { identifiers } = context;\n    if (identifiers[id] === void 0) {\n      identifiers[id] = 0;\n    }\n    identifiers[id]++;\n  }\n  function removeId(id) {\n    context.identifiers[id]--;\n  }\n  return context;\n}\nfunction transform(root, options) {\n  const context = createTransformContext(root, options);\n  traverseNode(root, context);\n  if (options.hoistStatic) {\n    cacheStatic(root, context);\n  }\n  if (!options.ssr) {\n    createRootCodegen(root, context);\n  }\n  root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);\n  root.components = [...context.components];\n  root.directives = [...context.directives];\n  root.imports = context.imports;\n  root.hoists = context.hoists;\n  root.temps = context.temps;\n  root.cached = context.cached;\n  root.transformed = true;\n  {\n    root.filters = [...context.filters];\n  }\n}\nfunction createRootCodegen(root, context) {\n  const { helper } = context;\n  const { children } = root;\n  if (children.length === 1) {\n    const child = children[0];\n    if (isSingleElementRoot(root, child) && child.codegenNode) {\n      const codegenNode = child.codegenNode;\n      if (codegenNode.type === 13) {\n        convertToBlock(codegenNode, context);\n      }\n      root.codegenNode = codegenNode;\n    } else {\n      root.codegenNode = child;\n    }\n  } else if (children.length > 1) {\n    let patchFlag = 64;\n    if (children.filter((c) => c.type !== 3).length === 1) {\n      patchFlag |= 2048;\n    }\n    root.codegenNode = createVNodeCall(\n      context,\n      helper(FRAGMENT),\n      void 0,\n      root.children,\n      patchFlag,\n      void 0,\n      void 0,\n      true,\n      void 0,\n      false\n    );\n  } else ;\n}\nfunction traverseChildren(parent, context) {\n  let i = 0;\n  const nodeRemoved = () => {\n    i--;\n  };\n  for (; i < parent.children.length; i++) {\n    const child = parent.children[i];\n    if (shared.isString(child)) continue;\n    context.grandParent = context.parent;\n    context.parent = parent;\n    context.childIndex = i;\n    context.onNodeRemoved = nodeRemoved;\n    traverseNode(child, context);\n  }\n}\nfunction traverseNode(node, context) {\n  context.currentNode = node;\n  const { nodeTransforms } = context;\n  const exitFns = [];\n  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {\n    const onExit = nodeTransforms[i2](node, context);\n    if (onExit) {\n      if (shared.isArray(onExit)) {\n        exitFns.push(...onExit);\n      } else {\n        exitFns.push(onExit);\n      }\n    }\n    if (!context.currentNode) {\n      return;\n    } else {\n      node = context.currentNode;\n    }\n  }\n  switch (node.type) {\n    case 3:\n      if (!context.ssr) {\n        context.helper(CREATE_COMMENT);\n      }\n      break;\n    case 5:\n      if (!context.ssr) {\n        context.helper(TO_DISPLAY_STRING);\n      }\n      break;\n    // for container types, further traverse downwards\n    case 9:\n      for (let i2 = 0; i2 < node.branches.length; i2++) {\n        traverseNode(node.branches[i2], context);\n      }\n      break;\n    case 10:\n    case 11:\n    case 1:\n    case 0:\n      traverseChildren(node, context);\n      break;\n  }\n  context.currentNode = node;\n  let i = exitFns.length;\n  while (i--) {\n    exitFns[i]();\n  }\n}\nfunction createStructuralDirectiveTransform(name, fn) {\n  const matches = shared.isString(name) ? (n) => n === name : (n) => name.test(n);\n  return (node, context) => {\n    if (node.type === 1) {\n      const { props } = node;\n      if (node.tagType === 3 && props.some(isVSlot)) {\n        return;\n      }\n      const exitFns = [];\n      for (let i = 0; i < props.length; i++) {\n        const prop = props[i];\n        if (prop.type === 7 && matches(prop.name)) {\n          props.splice(i, 1);\n          i--;\n          const onExit = fn(node, prop, context);\n          if (onExit) exitFns.push(onExit);\n        }\n      }\n      return exitFns;\n    }\n  };\n}\n\nconst PURE_ANNOTATION = `/*@__PURE__*/`;\nconst aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;\nfunction createCodegenContext(ast, {\n  mode = \"function\",\n  prefixIdentifiers = mode === \"module\",\n  sourceMap = false,\n  filename = `template.vue.html`,\n  scopeId = null,\n  optimizeImports = false,\n  runtimeGlobalName = `Vue`,\n  runtimeModuleName = `vue`,\n  ssrRuntimeModuleName = \"vue/server-renderer\",\n  ssr = false,\n  isTS = false,\n  inSSR = false\n}) {\n  const context = {\n    mode,\n    prefixIdentifiers,\n    sourceMap,\n    filename,\n    scopeId,\n    optimizeImports,\n    runtimeGlobalName,\n    runtimeModuleName,\n    ssrRuntimeModuleName,\n    ssr,\n    isTS,\n    inSSR,\n    source: ast.source,\n    code: ``,\n    column: 1,\n    line: 1,\n    offset: 0,\n    indentLevel: 0,\n    pure: false,\n    map: void 0,\n    helper(key) {\n      return `_${helperNameMap[key]}`;\n    },\n    push(code, newlineIndex = -2 /* None */, node) {\n      context.code += code;\n      if (context.map) {\n        if (node) {\n          let name;\n          if (node.type === 4 && !node.isStatic) {\n            const content = node.content.replace(/^_ctx\\./, \"\");\n            if (content !== node.content && isSimpleIdentifier(content)) {\n              name = content;\n            }\n          }\n          addMapping(node.loc.start, name);\n        }\n        if (newlineIndex === -3 /* Unknown */) {\n          advancePositionWithMutation(context, code);\n        } else {\n          context.offset += code.length;\n          if (newlineIndex === -2 /* None */) {\n            context.column += code.length;\n          } else {\n            if (newlineIndex === -1 /* End */) {\n              newlineIndex = code.length - 1;\n            }\n            context.line++;\n            context.column = code.length - newlineIndex;\n          }\n        }\n        if (node && node.loc !== locStub) {\n          addMapping(node.loc.end);\n        }\n      }\n    },\n    indent() {\n      newline(++context.indentLevel);\n    },\n    deindent(withoutNewLine = false) {\n      if (withoutNewLine) {\n        --context.indentLevel;\n      } else {\n        newline(--context.indentLevel);\n      }\n    },\n    newline() {\n      newline(context.indentLevel);\n    }\n  };\n  function newline(n) {\n    context.push(\"\\n\" + `  `.repeat(n), 0 /* Start */);\n  }\n  function addMapping(loc, name = null) {\n    const { _names, _mappings } = context.map;\n    if (name !== null && !_names.has(name)) _names.add(name);\n    _mappings.add({\n      originalLine: loc.line,\n      originalColumn: loc.column - 1,\n      // source-map column is 0 based\n      generatedLine: context.line,\n      generatedColumn: context.column - 1,\n      source: filename,\n      name\n    });\n  }\n  if (sourceMap) {\n    context.map = new sourceMapJs.SourceMapGenerator();\n    context.map.setSourceContent(filename, context.source);\n    context.map._sources.add(filename);\n  }\n  return context;\n}\nfunction generate(ast, options = {}) {\n  const context = createCodegenContext(ast, options);\n  if (options.onContextCreated) options.onContextCreated(context);\n  const {\n    mode,\n    push,\n    prefixIdentifiers,\n    indent,\n    deindent,\n    newline,\n    scopeId,\n    ssr\n  } = context;\n  const helpers = Array.from(ast.helpers);\n  const hasHelpers = helpers.length > 0;\n  const useWithBlock = !prefixIdentifiers && mode !== \"module\";\n  const genScopeId = scopeId != null && mode === \"module\";\n  const isSetupInlined = !!options.inline;\n  const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;\n  if (mode === \"module\") {\n    genModulePreamble(ast, preambleContext, genScopeId, isSetupInlined);\n  } else {\n    genFunctionPreamble(ast, preambleContext);\n  }\n  const functionName = ssr ? `ssrRender` : `render`;\n  const args = ssr ? [\"_ctx\", \"_push\", \"_parent\", \"_attrs\"] : [\"_ctx\", \"_cache\"];\n  if (options.bindingMetadata && !options.inline) {\n    args.push(\"$props\", \"$setup\", \"$data\", \"$options\");\n  }\n  const signature = options.isTS ? args.map((arg) => `${arg}: any`).join(\",\") : args.join(\", \");\n  if (isSetupInlined) {\n    push(`(${signature}) => {`);\n  } else {\n    push(`function ${functionName}(${signature}) {`);\n  }\n  indent();\n  if (useWithBlock) {\n    push(`with (_ctx) {`);\n    indent();\n    if (hasHelpers) {\n      push(\n        `const { ${helpers.map(aliasHelper).join(\", \")} } = _Vue\n`,\n        -1 /* End */\n      );\n      newline();\n    }\n  }\n  if (ast.components.length) {\n    genAssets(ast.components, \"component\", context);\n    if (ast.directives.length || ast.temps > 0) {\n      newline();\n    }\n  }\n  if (ast.directives.length) {\n    genAssets(ast.directives, \"directive\", context);\n    if (ast.temps > 0) {\n      newline();\n    }\n  }\n  if (ast.filters && ast.filters.length) {\n    newline();\n    genAssets(ast.filters, \"filter\", context);\n    newline();\n  }\n  if (ast.temps > 0) {\n    push(`let `);\n    for (let i = 0; i < ast.temps; i++) {\n      push(`${i > 0 ? `, ` : ``}_temp${i}`);\n    }\n  }\n  if (ast.components.length || ast.directives.length || ast.temps) {\n    push(`\n`, 0 /* Start */);\n    newline();\n  }\n  if (!ssr) {\n    push(`return `);\n  }\n  if (ast.codegenNode) {\n    genNode(ast.codegenNode, context);\n  } else {\n    push(`null`);\n  }\n  if (useWithBlock) {\n    deindent();\n    push(`}`);\n  }\n  deindent();\n  push(`}`);\n  return {\n    ast,\n    code: context.code,\n    preamble: isSetupInlined ? preambleContext.code : ``,\n    map: context.map ? context.map.toJSON() : void 0\n  };\n}\nfunction genFunctionPreamble(ast, context) {\n  const {\n    ssr,\n    prefixIdentifiers,\n    push,\n    newline,\n    runtimeModuleName,\n    runtimeGlobalName,\n    ssrRuntimeModuleName\n  } = context;\n  const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;\n  const helpers = Array.from(ast.helpers);\n  if (helpers.length > 0) {\n    if (prefixIdentifiers) {\n      push(\n        `const { ${helpers.map(aliasHelper).join(\", \")} } = ${VueBinding}\n`,\n        -1 /* End */\n      );\n    } else {\n      push(`const _Vue = ${VueBinding}\n`, -1 /* End */);\n      if (ast.hoists.length) {\n        const staticHelpers = [\n          CREATE_VNODE,\n          CREATE_ELEMENT_VNODE,\n          CREATE_COMMENT,\n          CREATE_TEXT,\n          CREATE_STATIC\n        ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(\", \");\n        push(`const { ${staticHelpers} } = _Vue\n`, -1 /* End */);\n      }\n    }\n  }\n  if (ast.ssrHelpers && ast.ssrHelpers.length) {\n    push(\n      `const { ${ast.ssrHelpers.map(aliasHelper).join(\", \")} } = require(\"${ssrRuntimeModuleName}\")\n`,\n      -1 /* End */\n    );\n  }\n  genHoists(ast.hoists, context);\n  newline();\n  push(`return `);\n}\nfunction genModulePreamble(ast, context, genScopeId, inline) {\n  const {\n    push,\n    newline,\n    optimizeImports,\n    runtimeModuleName,\n    ssrRuntimeModuleName\n  } = context;\n  if (ast.helpers.size) {\n    const helpers = Array.from(ast.helpers);\n    if (optimizeImports) {\n      push(\n        `import { ${helpers.map((s) => helperNameMap[s]).join(\", \")} } from ${JSON.stringify(runtimeModuleName)}\n`,\n        -1 /* End */\n      );\n      push(\n        `\n// Binding optimization for webpack code-split\nconst ${helpers.map((s) => `_${helperNameMap[s]} = ${helperNameMap[s]}`).join(\", \")}\n`,\n        -1 /* End */\n      );\n    } else {\n      push(\n        `import { ${helpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(\", \")} } from ${JSON.stringify(runtimeModuleName)}\n`,\n        -1 /* End */\n      );\n    }\n  }\n  if (ast.ssrHelpers && ast.ssrHelpers.length) {\n    push(\n      `import { ${ast.ssrHelpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(\", \")} } from \"${ssrRuntimeModuleName}\"\n`,\n      -1 /* End */\n    );\n  }\n  if (ast.imports.length) {\n    genImports(ast.imports, context);\n    newline();\n  }\n  genHoists(ast.hoists, context);\n  newline();\n  if (!inline) {\n    push(`export `);\n  }\n}\nfunction genAssets(assets, type, { helper, push, newline, isTS }) {\n  const resolver = helper(\n    type === \"filter\" ? RESOLVE_FILTER : type === \"component\" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE\n  );\n  for (let i = 0; i < assets.length; i++) {\n    let id = assets[i];\n    const maybeSelfReference = id.endsWith(\"__self\");\n    if (maybeSelfReference) {\n      id = id.slice(0, -6);\n    }\n    push(\n      `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`\n    );\n    if (i < assets.length - 1) {\n      newline();\n    }\n  }\n}\nfunction genHoists(hoists, context) {\n  if (!hoists.length) {\n    return;\n  }\n  context.pure = true;\n  const { push, newline } = context;\n  newline();\n  for (let i = 0; i < hoists.length; i++) {\n    const exp = hoists[i];\n    if (exp) {\n      push(`const _hoisted_${i + 1} = `);\n      genNode(exp, context);\n      newline();\n    }\n  }\n  context.pure = false;\n}\nfunction genImports(importsOptions, context) {\n  if (!importsOptions.length) {\n    return;\n  }\n  importsOptions.forEach((imports) => {\n    context.push(`import `);\n    genNode(imports.exp, context);\n    context.push(` from '${imports.path}'`);\n    context.newline();\n  });\n}\nfunction isText(n) {\n  return shared.isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;\n}\nfunction genNodeListAsArray(nodes, context) {\n  const multilines = nodes.length > 3 || nodes.some((n) => shared.isArray(n) || !isText(n));\n  context.push(`[`);\n  multilines && context.indent();\n  genNodeList(nodes, context, multilines);\n  multilines && context.deindent();\n  context.push(`]`);\n}\nfunction genNodeList(nodes, context, multilines = false, comma = true) {\n  const { push, newline } = context;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (shared.isString(node)) {\n      push(node, -3 /* Unknown */);\n    } else if (shared.isArray(node)) {\n      genNodeListAsArray(node, context);\n    } else {\n      genNode(node, context);\n    }\n    if (i < nodes.length - 1) {\n      if (multilines) {\n        comma && push(\",\");\n        newline();\n      } else {\n        comma && push(\", \");\n      }\n    }\n  }\n}\nfunction genNode(node, context) {\n  if (shared.isString(node)) {\n    context.push(node, -3 /* Unknown */);\n    return;\n  }\n  if (shared.isSymbol(node)) {\n    context.push(context.helper(node));\n    return;\n  }\n  switch (node.type) {\n    case 1:\n    case 9:\n    case 11:\n      assert(\n        node.codegenNode != null,\n        `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`\n      );\n      genNode(node.codegenNode, context);\n      break;\n    case 2:\n      genText(node, context);\n      break;\n    case 4:\n      genExpression(node, context);\n      break;\n    case 5:\n      genInterpolation(node, context);\n      break;\n    case 12:\n      genNode(node.codegenNode, context);\n      break;\n    case 8:\n      genCompoundExpression(node, context);\n      break;\n    case 3:\n      genComment(node, context);\n      break;\n    case 13:\n      genVNodeCall(node, context);\n      break;\n    case 14:\n      genCallExpression(node, context);\n      break;\n    case 15:\n      genObjectExpression(node, context);\n      break;\n    case 17:\n      genArrayExpression(node, context);\n      break;\n    case 18:\n      genFunctionExpression(node, context);\n      break;\n    case 19:\n      genConditionalExpression(node, context);\n      break;\n    case 20:\n      genCacheExpression(node, context);\n      break;\n    case 21:\n      genNodeList(node.body, context, true, false);\n      break;\n    // SSR only types\n    case 22:\n      genTemplateLiteral(node, context);\n      break;\n    case 23:\n      genIfStatement(node, context);\n      break;\n    case 24:\n      genAssignmentExpression(node, context);\n      break;\n    case 25:\n      genSequenceExpression(node, context);\n      break;\n    case 26:\n      genReturnStatement(node, context);\n      break;\n    /* v8 ignore start */\n    case 10:\n      break;\n    default:\n      {\n        assert(false, `unhandled codegen node type: ${node.type}`);\n        const exhaustiveCheck = node;\n        return exhaustiveCheck;\n      }\n  }\n}\nfunction genText(node, context) {\n  context.push(JSON.stringify(node.content), -3 /* Unknown */, node);\n}\nfunction genExpression(node, context) {\n  const { content, isStatic } = node;\n  context.push(\n    isStatic ? JSON.stringify(content) : content,\n    -3 /* Unknown */,\n    node\n  );\n}\nfunction genInterpolation(node, context) {\n  const { push, helper, pure } = context;\n  if (pure) push(PURE_ANNOTATION);\n  push(`${helper(TO_DISPLAY_STRING)}(`);\n  genNode(node.content, context);\n  push(`)`);\n}\nfunction genCompoundExpression(node, context) {\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n    if (shared.isString(child)) {\n      context.push(child, -3 /* Unknown */);\n    } else {\n      genNode(child, context);\n    }\n  }\n}\nfunction genExpressionAsPropertyKey(node, context) {\n  const { push } = context;\n  if (node.type === 8) {\n    push(`[`);\n    genCompoundExpression(node, context);\n    push(`]`);\n  } else if (node.isStatic) {\n    const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);\n    push(text, -2 /* None */, node);\n  } else {\n    push(`[${node.content}]`, -3 /* Unknown */, node);\n  }\n}\nfunction genComment(node, context) {\n  const { push, helper, pure } = context;\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n  push(\n    `${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`,\n    -3 /* Unknown */,\n    node\n  );\n}\nfunction genVNodeCall(node, context) {\n  const { push, helper, pure } = context;\n  const {\n    tag,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    directives,\n    isBlock,\n    disableTracking,\n    isComponent\n  } = node;\n  let patchFlagString;\n  if (patchFlag) {\n    {\n      if (patchFlag < 0) {\n        patchFlagString = patchFlag + ` /* ${shared.PatchFlagNames[patchFlag]} */`;\n      } else {\n        const flagNames = Object.keys(shared.PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => shared.PatchFlagNames[n]).join(`, `);\n        patchFlagString = patchFlag + ` /* ${flagNames} */`;\n      }\n    }\n  }\n  if (directives) {\n    push(helper(WITH_DIRECTIVES) + `(`);\n  }\n  if (isBlock) {\n    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);\n  }\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent) : getVNodeHelper(context.inSSR, isComponent);\n  push(helper(callHelper) + `(`, -2 /* None */, node);\n  genNodeList(\n    genNullableArgs([tag, props, children, patchFlagString, dynamicProps]),\n    context\n  );\n  push(`)`);\n  if (isBlock) {\n    push(`)`);\n  }\n  if (directives) {\n    push(`, `);\n    genNode(directives, context);\n    push(`)`);\n  }\n}\nfunction genNullableArgs(args) {\n  let i = args.length;\n  while (i--) {\n    if (args[i] != null) break;\n  }\n  return args.slice(0, i + 1).map((arg) => arg || `null`);\n}\nfunction genCallExpression(node, context) {\n  const { push, helper, pure } = context;\n  const callee = shared.isString(node.callee) ? node.callee : helper(node.callee);\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n  push(callee + `(`, -2 /* None */, node);\n  genNodeList(node.arguments, context);\n  push(`)`);\n}\nfunction genObjectExpression(node, context) {\n  const { push, indent, deindent, newline } = context;\n  const { properties } = node;\n  if (!properties.length) {\n    push(`{}`, -2 /* None */, node);\n    return;\n  }\n  const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);\n  push(multilines ? `{` : `{ `);\n  multilines && indent();\n  for (let i = 0; i < properties.length; i++) {\n    const { key, value } = properties[i];\n    genExpressionAsPropertyKey(key, context);\n    push(`: `);\n    genNode(value, context);\n    if (i < properties.length - 1) {\n      push(`,`);\n      newline();\n    }\n  }\n  multilines && deindent();\n  push(multilines ? `}` : ` }`);\n}\nfunction genArrayExpression(node, context) {\n  genNodeListAsArray(node.elements, context);\n}\nfunction genFunctionExpression(node, context) {\n  const { push, indent, deindent } = context;\n  const { params, returns, body, newline, isSlot } = node;\n  if (isSlot) {\n    push(`_${helperNameMap[WITH_CTX]}(`);\n  }\n  push(`(`, -2 /* None */, node);\n  if (shared.isArray(params)) {\n    genNodeList(params, context);\n  } else if (params) {\n    genNode(params, context);\n  }\n  push(`) => `);\n  if (newline || body) {\n    push(`{`);\n    indent();\n  }\n  if (returns) {\n    if (newline) {\n      push(`return `);\n    }\n    if (shared.isArray(returns)) {\n      genNodeListAsArray(returns, context);\n    } else {\n      genNode(returns, context);\n    }\n  } else if (body) {\n    genNode(body, context);\n  }\n  if (newline || body) {\n    deindent();\n    push(`}`);\n  }\n  if (isSlot) {\n    if (node.isNonScopedSlot) {\n      push(`, undefined, true`);\n    }\n    push(`)`);\n  }\n}\nfunction genConditionalExpression(node, context) {\n  const { test, consequent, alternate, newline: needNewline } = node;\n  const { push, indent, deindent, newline } = context;\n  if (test.type === 4) {\n    const needsParens = !isSimpleIdentifier(test.content);\n    needsParens && push(`(`);\n    genExpression(test, context);\n    needsParens && push(`)`);\n  } else {\n    push(`(`);\n    genNode(test, context);\n    push(`)`);\n  }\n  needNewline && indent();\n  context.indentLevel++;\n  needNewline || push(` `);\n  push(`? `);\n  genNode(consequent, context);\n  context.indentLevel--;\n  needNewline && newline();\n  needNewline || push(` `);\n  push(`: `);\n  const isNested = alternate.type === 19;\n  if (!isNested) {\n    context.indentLevel++;\n  }\n  genNode(alternate, context);\n  if (!isNested) {\n    context.indentLevel--;\n  }\n  needNewline && deindent(\n    true\n    /* without newline */\n  );\n}\nfunction genCacheExpression(node, context) {\n  const { push, helper, indent, deindent, newline } = context;\n  const { needPauseTracking, needArraySpread } = node;\n  if (needArraySpread) {\n    push(`[...(`);\n  }\n  push(`_cache[${node.index}] || (`);\n  if (needPauseTracking) {\n    indent();\n    push(`${helper(SET_BLOCK_TRACKING)}(-1`);\n    if (node.inVOnce) push(`, true`);\n    push(`),`);\n    newline();\n    push(`(`);\n  }\n  push(`_cache[${node.index}] = `);\n  genNode(node.value, context);\n  if (needPauseTracking) {\n    push(`).cacheIndex = ${node.index},`);\n    newline();\n    push(`${helper(SET_BLOCK_TRACKING)}(1),`);\n    newline();\n    push(`_cache[${node.index}]`);\n    deindent();\n  }\n  push(`)`);\n  if (needArraySpread) {\n    push(`)]`);\n  }\n}\nfunction genTemplateLiteral(node, context) {\n  const { push, indent, deindent } = context;\n  push(\"`\");\n  const l = node.elements.length;\n  const multilines = l > 3;\n  for (let i = 0; i < l; i++) {\n    const e = node.elements[i];\n    if (shared.isString(e)) {\n      push(e.replace(/(`|\\$|\\\\)/g, \"\\\\$1\"), -3 /* Unknown */);\n    } else {\n      push(\"${\");\n      if (multilines) indent();\n      genNode(e, context);\n      if (multilines) deindent();\n      push(\"}\");\n    }\n  }\n  push(\"`\");\n}\nfunction genIfStatement(node, context) {\n  const { push, indent, deindent } = context;\n  const { test, consequent, alternate } = node;\n  push(`if (`);\n  genNode(test, context);\n  push(`) {`);\n  indent();\n  genNode(consequent, context);\n  deindent();\n  push(`}`);\n  if (alternate) {\n    push(` else `);\n    if (alternate.type === 23) {\n      genIfStatement(alternate, context);\n    } else {\n      push(`{`);\n      indent();\n      genNode(alternate, context);\n      deindent();\n      push(`}`);\n    }\n  }\n}\nfunction genAssignmentExpression(node, context) {\n  genNode(node.left, context);\n  context.push(` = `);\n  genNode(node.right, context);\n}\nfunction genSequenceExpression(node, context) {\n  context.push(`(`);\n  genNodeList(node.expressions, context);\n  context.push(`)`);\n}\nfunction genReturnStatement({ returns }, context) {\n  context.push(`return `);\n  if (shared.isArray(returns)) {\n    genNodeListAsArray(returns, context);\n  } else {\n    genNode(returns, context);\n  }\n}\n\nconst isLiteralWhitelisted = /* @__PURE__ */ shared.makeMap(\"true,false,null,this\");\nconst transformExpression = (node, context) => {\n  if (node.type === 5) {\n    node.content = processExpression(\n      node.content,\n      context\n    );\n  } else if (node.type === 1) {\n    const memo = findDir(node, \"memo\");\n    for (let i = 0; i < node.props.length; i++) {\n      const dir = node.props[i];\n      if (dir.type === 7 && dir.name !== \"for\") {\n        const exp = dir.exp;\n        const arg = dir.arg;\n        if (exp && exp.type === 4 && !(dir.name === \"on\" && arg) && // key has been processed in transformFor(vMemo + vFor)\n        !(memo && arg && arg.type === 4 && arg.content === \"key\")) {\n          dir.exp = processExpression(\n            exp,\n            context,\n            // slot args must be processed as function params\n            dir.name === \"slot\"\n          );\n        }\n        if (arg && arg.type === 4 && !arg.isStatic) {\n          dir.arg = processExpression(arg, context);\n        }\n      }\n    }\n  }\n};\nfunction processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {\n  if (!context.prefixIdentifiers || !node.content.trim()) {\n    return node;\n  }\n  const { inline, bindingMetadata } = context;\n  const rewriteIdentifier = (raw, parent, id) => {\n    const type = shared.hasOwn(bindingMetadata, raw) && bindingMetadata[raw];\n    if (inline) {\n      const isAssignmentLVal = parent && parent.type === \"AssignmentExpression\" && parent.left === id;\n      const isUpdateArg = parent && parent.type === \"UpdateExpression\" && parent.argument === id;\n      const isDestructureAssignment = parent && isInDestructureAssignment(parent, parentStack);\n      const isNewExpression = parent && isInNewExpression(parentStack);\n      const wrapWithUnref = (raw2) => {\n        const wrapped = `${context.helperString(UNREF)}(${raw2})`;\n        return isNewExpression ? `(${wrapped})` : wrapped;\n      };\n      if (isConst(type) || type === \"setup-reactive-const\" || localVars[raw]) {\n        return raw;\n      } else if (type === \"setup-ref\") {\n        return `${raw}.value`;\n      } else if (type === \"setup-maybe-ref\") {\n        return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : wrapWithUnref(raw);\n      } else if (type === \"setup-let\") {\n        if (isAssignmentLVal) {\n          const { right: rVal, operator } = parent;\n          const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);\n          const rExpString = stringifyExpression(\n            processExpression(\n              createSimpleExpression(rExp, false),\n              context,\n              false,\n              false,\n              knownIds\n            )\n          );\n          return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore\n` : ``} ? ${raw}.value ${operator} ${rExpString} : ${raw}`;\n        } else if (isUpdateArg) {\n          id.start = parent.start;\n          id.end = parent.end;\n          const { prefix: isPrefix, operator } = parent;\n          const prefix = isPrefix ? operator : ``;\n          const postfix = isPrefix ? `` : operator;\n          return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore\n` : ``} ? ${prefix}${raw}.value${postfix} : ${prefix}${raw}${postfix}`;\n        } else if (isDestructureAssignment) {\n          return raw;\n        } else {\n          return wrapWithUnref(raw);\n        }\n      } else if (type === \"props\") {\n        return shared.genPropsAccessExp(raw);\n      } else if (type === \"props-aliased\") {\n        return shared.genPropsAccessExp(bindingMetadata.__propsAliases[raw]);\n      }\n    } else {\n      if (type && type.startsWith(\"setup\") || type === \"literal-const\") {\n        return `$setup.${raw}`;\n      } else if (type === \"props-aliased\") {\n        return `$props['${bindingMetadata.__propsAliases[raw]}']`;\n      } else if (type) {\n        return `$${type}.${raw}`;\n      }\n    }\n    return `_ctx.${raw}`;\n  };\n  const rawExp = node.content;\n  let ast = node.ast;\n  if (ast === false) {\n    return node;\n  }\n  if (ast === null || !ast && isSimpleIdentifier(rawExp)) {\n    const isScopeVarReference = context.identifiers[rawExp];\n    const isAllowedGlobal = shared.isGloballyAllowed(rawExp);\n    const isLiteral = isLiteralWhitelisted(rawExp);\n    if (!asParams && !isScopeVarReference && !isLiteral && (!isAllowedGlobal || bindingMetadata[rawExp])) {\n      if (isConst(bindingMetadata[rawExp])) {\n        node.constType = 1;\n      }\n      node.content = rewriteIdentifier(rawExp);\n    } else if (!isScopeVarReference) {\n      if (isLiteral) {\n        node.constType = 3;\n      } else {\n        node.constType = 2;\n      }\n    }\n    return node;\n  }\n  if (!ast) {\n    const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;\n    try {\n      ast = parser.parseExpression(source, {\n        sourceType: \"module\",\n        plugins: context.expressionPlugins\n      });\n    } catch (e) {\n      context.onError(\n        createCompilerError(\n          45,\n          node.loc,\n          void 0,\n          e.message\n        )\n      );\n      return node;\n    }\n  }\n  const ids = [];\n  const parentStack = [];\n  const knownIds = Object.create(context.identifiers);\n  walkIdentifiers(\n    ast,\n    (node2, parent, _, isReferenced, isLocal) => {\n      if (isStaticPropertyKey(node2, parent)) {\n        return;\n      }\n      if (node2.name.startsWith(\"_filter_\")) {\n        return;\n      }\n      const needPrefix = isReferenced && canPrefix(node2);\n      if (needPrefix && !isLocal) {\n        if (isStaticProperty(parent) && parent.shorthand) {\n          node2.prefix = `${node2.name}: `;\n        }\n        node2.name = rewriteIdentifier(node2.name, parent, node2);\n        ids.push(node2);\n      } else {\n        if (!(needPrefix && isLocal) && (!parent || parent.type !== \"CallExpression\" && parent.type !== \"NewExpression\" && parent.type !== \"MemberExpression\")) {\n          node2.isConstant = true;\n        }\n        ids.push(node2);\n      }\n    },\n    true,\n    // invoke on ALL identifiers\n    parentStack,\n    knownIds\n  );\n  const children = [];\n  ids.sort((a, b) => a.start - b.start);\n  ids.forEach((id, i) => {\n    const start = id.start - 1;\n    const end = id.end - 1;\n    const last = ids[i - 1];\n    const leadingText = rawExp.slice(last ? last.end - 1 : 0, start);\n    if (leadingText.length || id.prefix) {\n      children.push(leadingText + (id.prefix || ``));\n    }\n    const source = rawExp.slice(start, end);\n    children.push(\n      createSimpleExpression(\n        id.name,\n        false,\n        {\n          start: advancePositionWithClone(node.loc.start, source, start),\n          end: advancePositionWithClone(node.loc.start, source, end),\n          source\n        },\n        id.isConstant ? 3 : 0\n      )\n    );\n    if (i === ids.length - 1 && end < rawExp.length) {\n      children.push(rawExp.slice(end));\n    }\n  });\n  let ret;\n  if (children.length) {\n    ret = createCompoundExpression(children, node.loc);\n    ret.ast = ast;\n  } else {\n    ret = node;\n    ret.constType = 3;\n  }\n  ret.identifiers = Object.keys(knownIds);\n  return ret;\n}\nfunction canPrefix(id) {\n  if (shared.isGloballyAllowed(id.name)) {\n    return false;\n  }\n  if (id.name === \"require\") {\n    return false;\n  }\n  return true;\n}\nfunction stringifyExpression(exp) {\n  if (shared.isString(exp)) {\n    return exp;\n  } else if (exp.type === 4) {\n    return exp.content;\n  } else {\n    return exp.children.map(stringifyExpression).join(\"\");\n  }\n}\nfunction isConst(type) {\n  return type === \"setup-const\" || type === \"literal-const\";\n}\n\nconst transformIf = createStructuralDirectiveTransform(\n  /^(if|else|else-if)$/,\n  (node, dir, context) => {\n    return processIf(node, dir, context, (ifNode, branch, isRoot) => {\n      const siblings = context.parent.children;\n      let i = siblings.indexOf(ifNode);\n      let key = 0;\n      while (i-- >= 0) {\n        const sibling = siblings[i];\n        if (sibling && sibling.type === 9) {\n          key += sibling.branches.length;\n        }\n      }\n      return () => {\n        if (isRoot) {\n          ifNode.codegenNode = createCodegenNodeForBranch(\n            branch,\n            key,\n            context\n          );\n        } else {\n          const parentCondition = getParentCondition(ifNode.codegenNode);\n          parentCondition.alternate = createCodegenNodeForBranch(\n            branch,\n            key + ifNode.branches.length - 1,\n            context\n          );\n        }\n      };\n    });\n  }\n);\nfunction processIf(node, dir, context, processCodegen) {\n  if (dir.name !== \"else\" && (!dir.exp || !dir.exp.content.trim())) {\n    const loc = dir.exp ? dir.exp.loc : node.loc;\n    context.onError(\n      createCompilerError(28, dir.loc)\n    );\n    dir.exp = createSimpleExpression(`true`, false, loc);\n  }\n  if (context.prefixIdentifiers && dir.exp) {\n    dir.exp = processExpression(dir.exp, context);\n  }\n  if (dir.name === \"if\") {\n    const branch = createIfBranch(node, dir);\n    const ifNode = {\n      type: 9,\n      loc: cloneLoc(node.loc),\n      branches: [branch]\n    };\n    context.replaceNode(ifNode);\n    if (processCodegen) {\n      return processCodegen(ifNode, branch, true);\n    }\n  } else {\n    const siblings = context.parent.children;\n    const comments = [];\n    let i = siblings.indexOf(node);\n    while (i-- >= -1) {\n      const sibling = siblings[i];\n      if (sibling && sibling.type === 3) {\n        context.removeNode(sibling);\n        comments.unshift(sibling);\n        continue;\n      }\n      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {\n        context.removeNode(sibling);\n        continue;\n      }\n      if (sibling && sibling.type === 9) {\n        if (dir.name === \"else-if\" && sibling.branches[sibling.branches.length - 1].condition === void 0) {\n          context.onError(\n            createCompilerError(30, node.loc)\n          );\n        }\n        context.removeNode();\n        const branch = createIfBranch(node, dir);\n        if (comments.length && // #3619 ignore comments if the v-if is direct child of <transition>\n        !(context.parent && context.parent.type === 1 && (context.parent.tag === \"transition\" || context.parent.tag === \"Transition\"))) {\n          branch.children = [...comments, ...branch.children];\n        }\n        {\n          const key = branch.userKey;\n          if (key) {\n            sibling.branches.forEach(({ userKey }) => {\n              if (isSameKey(userKey, key)) {\n                context.onError(\n                  createCompilerError(\n                    29,\n                    branch.userKey.loc\n                  )\n                );\n              }\n            });\n          }\n        }\n        sibling.branches.push(branch);\n        const onExit = processCodegen && processCodegen(sibling, branch, false);\n        traverseNode(branch, context);\n        if (onExit) onExit();\n        context.currentNode = null;\n      } else {\n        context.onError(\n          createCompilerError(30, node.loc)\n        );\n      }\n      break;\n    }\n  }\n}\nfunction createIfBranch(node, dir) {\n  const isTemplateIf = node.tagType === 3;\n  return {\n    type: 10,\n    loc: node.loc,\n    condition: dir.name === \"else\" ? void 0 : dir.exp,\n    children: isTemplateIf && !findDir(node, \"for\") ? node.children : [node],\n    userKey: findProp(node, `key`),\n    isTemplateIf\n  };\n}\nfunction createCodegenNodeForBranch(branch, keyIndex, context) {\n  if (branch.condition) {\n    return createConditionalExpression(\n      branch.condition,\n      createChildrenCodegenNode(branch, keyIndex, context),\n      // make sure to pass in asBlock: true so that the comment node call\n      // closes the current block.\n      createCallExpression(context.helper(CREATE_COMMENT), [\n        '\"v-if\"' ,\n        \"true\"\n      ])\n    );\n  } else {\n    return createChildrenCodegenNode(branch, keyIndex, context);\n  }\n}\nfunction createChildrenCodegenNode(branch, keyIndex, context) {\n  const { helper } = context;\n  const keyProperty = createObjectProperty(\n    `key`,\n    createSimpleExpression(\n      `${keyIndex}`,\n      false,\n      locStub,\n      2\n    )\n  );\n  const { children } = branch;\n  const firstChild = children[0];\n  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;\n  if (needFragmentWrapper) {\n    if (children.length === 1 && firstChild.type === 11) {\n      const vnodeCall = firstChild.codegenNode;\n      injectProp(vnodeCall, keyProperty, context);\n      return vnodeCall;\n    } else {\n      let patchFlag = 64;\n      if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {\n        patchFlag |= 2048;\n      }\n      return createVNodeCall(\n        context,\n        helper(FRAGMENT),\n        createObjectExpression([keyProperty]),\n        children,\n        patchFlag,\n        void 0,\n        void 0,\n        true,\n        false,\n        false,\n        branch.loc\n      );\n    }\n  } else {\n    const ret = firstChild.codegenNode;\n    const vnodeCall = getMemoedVNodeCall(ret);\n    if (vnodeCall.type === 13) {\n      convertToBlock(vnodeCall, context);\n    }\n    injectProp(vnodeCall, keyProperty, context);\n    return ret;\n  }\n}\nfunction isSameKey(a, b) {\n  if (!a || a.type !== b.type) {\n    return false;\n  }\n  if (a.type === 6) {\n    if (a.value.content !== b.value.content) {\n      return false;\n    }\n  } else {\n    const exp = a.exp;\n    const branchExp = b.exp;\n    if (exp.type !== branchExp.type) {\n      return false;\n    }\n    if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getParentCondition(node) {\n  while (true) {\n    if (node.type === 19) {\n      if (node.alternate.type === 19) {\n        node = node.alternate;\n      } else {\n        return node;\n      }\n    } else if (node.type === 20) {\n      node = node.value;\n    }\n  }\n}\n\nconst transformBind = (dir, _node, context) => {\n  const { modifiers, loc } = dir;\n  const arg = dir.arg;\n  let { exp } = dir;\n  if (exp && exp.type === 4 && !exp.content.trim()) {\n    {\n      context.onError(\n        createCompilerError(34, loc)\n      );\n      return {\n        props: [\n          createObjectProperty(arg, createSimpleExpression(\"\", true, loc))\n        ]\n      };\n    }\n  }\n  if (!exp) {\n    if (arg.type !== 4 || !arg.isStatic) {\n      context.onError(\n        createCompilerError(\n          52,\n          arg.loc\n        )\n      );\n      return {\n        props: [\n          createObjectProperty(arg, createSimpleExpression(\"\", true, loc))\n        ]\n      };\n    }\n    transformBindShorthand(dir, context);\n    exp = dir.exp;\n  }\n  if (arg.type !== 4) {\n    arg.children.unshift(`(`);\n    arg.children.push(`) || \"\"`);\n  } else if (!arg.isStatic) {\n    arg.content = `${arg.content} || \"\"`;\n  }\n  if (modifiers.some((mod) => mod.content === \"camel\")) {\n    if (arg.type === 4) {\n      if (arg.isStatic) {\n        arg.content = shared.camelize(arg.content);\n      } else {\n        arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;\n      }\n    } else {\n      arg.children.unshift(`${context.helperString(CAMELIZE)}(`);\n      arg.children.push(`)`);\n    }\n  }\n  if (!context.inSSR) {\n    if (modifiers.some((mod) => mod.content === \"prop\")) {\n      injectPrefix(arg, \".\");\n    }\n    if (modifiers.some((mod) => mod.content === \"attr\")) {\n      injectPrefix(arg, \"^\");\n    }\n  }\n  return {\n    props: [createObjectProperty(arg, exp)]\n  };\n};\nconst transformBindShorthand = (dir, context) => {\n  const arg = dir.arg;\n  const propName = shared.camelize(arg.content);\n  dir.exp = createSimpleExpression(propName, false, arg.loc);\n  {\n    dir.exp = processExpression(dir.exp, context);\n  }\n};\nconst injectPrefix = (arg, prefix) => {\n  if (arg.type === 4) {\n    if (arg.isStatic) {\n      arg.content = prefix + arg.content;\n    } else {\n      arg.content = `\\`${prefix}\\${${arg.content}}\\``;\n    }\n  } else {\n    arg.children.unshift(`'${prefix}' + (`);\n    arg.children.push(`)`);\n  }\n};\n\nconst transformFor = createStructuralDirectiveTransform(\n  \"for\",\n  (node, dir, context) => {\n    const { helper, removeHelper } = context;\n    return processFor(node, dir, context, (forNode) => {\n      const renderExp = createCallExpression(helper(RENDER_LIST), [\n        forNode.source\n      ]);\n      const isTemplate = isTemplateNode(node);\n      const memo = findDir(node, \"memo\");\n      const keyProp = findProp(node, `key`, false, true);\n      const isDirKey = keyProp && keyProp.type === 7;\n      if (isDirKey && !keyProp.exp) {\n        transformBindShorthand(keyProp, context);\n      }\n      let keyExp = keyProp && (keyProp.type === 6 ? keyProp.value ? createSimpleExpression(keyProp.value.content, true) : void 0 : keyProp.exp);\n      if (memo && keyExp && isDirKey) {\n        {\n          keyProp.exp = keyExp = processExpression(\n            keyExp,\n            context\n          );\n        }\n      }\n      const keyProperty = keyProp && keyExp ? createObjectProperty(`key`, keyExp) : null;\n      if (isTemplate) {\n        if (memo) {\n          memo.exp = processExpression(\n            memo.exp,\n            context\n          );\n        }\n        if (keyProperty && keyProp.type !== 6) {\n          keyProperty.value = processExpression(\n            keyProperty.value,\n            context\n          );\n        }\n      }\n      const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;\n      const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;\n      forNode.codegenNode = createVNodeCall(\n        context,\n        helper(FRAGMENT),\n        void 0,\n        renderExp,\n        fragmentFlag,\n        void 0,\n        void 0,\n        true,\n        !isStableFragment,\n        false,\n        node.loc\n      );\n      return () => {\n        let childBlock;\n        const { children } = forNode;\n        if (isTemplate) {\n          node.children.some((c) => {\n            if (c.type === 1) {\n              const key = findProp(c, \"key\");\n              if (key) {\n                context.onError(\n                  createCompilerError(\n                    33,\n                    key.loc\n                  )\n                );\n                return true;\n              }\n            }\n          });\n        }\n        const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;\n        const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;\n        if (slotOutlet) {\n          childBlock = slotOutlet.codegenNode;\n          if (isTemplate && keyProperty) {\n            injectProp(childBlock, keyProperty, context);\n          }\n        } else if (needFragmentWrapper) {\n          childBlock = createVNodeCall(\n            context,\n            helper(FRAGMENT),\n            keyProperty ? createObjectExpression([keyProperty]) : void 0,\n            node.children,\n            64,\n            void 0,\n            void 0,\n            true,\n            void 0,\n            false\n          );\n        } else {\n          childBlock = children[0].codegenNode;\n          if (isTemplate && keyProperty) {\n            injectProp(childBlock, keyProperty, context);\n          }\n          if (childBlock.isBlock !== !isStableFragment) {\n            if (childBlock.isBlock) {\n              removeHelper(OPEN_BLOCK);\n              removeHelper(\n                getVNodeBlockHelper(context.inSSR, childBlock.isComponent)\n              );\n            } else {\n              removeHelper(\n                getVNodeHelper(context.inSSR, childBlock.isComponent)\n              );\n            }\n          }\n          childBlock.isBlock = !isStableFragment;\n          if (childBlock.isBlock) {\n            helper(OPEN_BLOCK);\n            helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));\n          } else {\n            helper(getVNodeHelper(context.inSSR, childBlock.isComponent));\n          }\n        }\n        if (memo) {\n          const loop = createFunctionExpression(\n            createForLoopParams(forNode.parseResult, [\n              createSimpleExpression(`_cached`)\n            ])\n          );\n          loop.body = createBlockStatement([\n            createCompoundExpression([`const _memo = (`, memo.exp, `)`]),\n            createCompoundExpression([\n              `if (_cached`,\n              ...keyExp ? [` && _cached.key === `, keyExp] : [],\n              ` && ${context.helperString(\n                IS_MEMO_SAME\n              )}(_cached, _memo)) return _cached`\n            ]),\n            createCompoundExpression([`const _item = `, childBlock]),\n            createSimpleExpression(`_item.memo = _memo`),\n            createSimpleExpression(`return _item`)\n          ]);\n          renderExp.arguments.push(\n            loop,\n            createSimpleExpression(`_cache`),\n            createSimpleExpression(String(context.cached.length))\n          );\n          context.cached.push(null);\n        } else {\n          renderExp.arguments.push(\n            createFunctionExpression(\n              createForLoopParams(forNode.parseResult),\n              childBlock,\n              true\n            )\n          );\n        }\n      };\n    });\n  }\n);\nfunction processFor(node, dir, context, processCodegen) {\n  if (!dir.exp) {\n    context.onError(\n      createCompilerError(31, dir.loc)\n    );\n    return;\n  }\n  const parseResult = dir.forParseResult;\n  if (!parseResult) {\n    context.onError(\n      createCompilerError(32, dir.loc)\n    );\n    return;\n  }\n  finalizeForParseResult(parseResult, context);\n  const { addIdentifiers, removeIdentifiers, scopes } = context;\n  const { source, value, key, index } = parseResult;\n  const forNode = {\n    type: 11,\n    loc: dir.loc,\n    source,\n    valueAlias: value,\n    keyAlias: key,\n    objectIndexAlias: index,\n    parseResult,\n    children: isTemplateNode(node) ? node.children : [node]\n  };\n  context.replaceNode(forNode);\n  scopes.vFor++;\n  if (context.prefixIdentifiers) {\n    value && addIdentifiers(value);\n    key && addIdentifiers(key);\n    index && addIdentifiers(index);\n  }\n  const onExit = processCodegen && processCodegen(forNode);\n  return () => {\n    scopes.vFor--;\n    if (context.prefixIdentifiers) {\n      value && removeIdentifiers(value);\n      key && removeIdentifiers(key);\n      index && removeIdentifiers(index);\n    }\n    if (onExit) onExit();\n  };\n}\nfunction finalizeForParseResult(result, context) {\n  if (result.finalized) return;\n  if (context.prefixIdentifiers) {\n    result.source = processExpression(\n      result.source,\n      context\n    );\n    if (result.key) {\n      result.key = processExpression(\n        result.key,\n        context,\n        true\n      );\n    }\n    if (result.index) {\n      result.index = processExpression(\n        result.index,\n        context,\n        true\n      );\n    }\n    if (result.value) {\n      result.value = processExpression(\n        result.value,\n        context,\n        true\n      );\n    }\n  }\n  result.finalized = true;\n}\nfunction createForLoopParams({ value, key, index }, memoArgs = []) {\n  return createParamsList([value, key, index, ...memoArgs]);\n}\nfunction createParamsList(args) {\n  let i = args.length;\n  while (i--) {\n    if (args[i]) break;\n  }\n  return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));\n}\n\nconst defaultFallback = createSimpleExpression(`undefined`, false);\nconst trackSlotScopes = (node, context) => {\n  if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {\n    const vSlot = findDir(node, \"slot\");\n    if (vSlot) {\n      const slotProps = vSlot.exp;\n      if (context.prefixIdentifiers) {\n        slotProps && context.addIdentifiers(slotProps);\n      }\n      context.scopes.vSlot++;\n      return () => {\n        if (context.prefixIdentifiers) {\n          slotProps && context.removeIdentifiers(slotProps);\n        }\n        context.scopes.vSlot--;\n      };\n    }\n  }\n};\nconst trackVForSlotScopes = (node, context) => {\n  let vFor;\n  if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, \"for\"))) {\n    const result = vFor.forParseResult;\n    if (result) {\n      finalizeForParseResult(result, context);\n      const { value, key, index } = result;\n      const { addIdentifiers, removeIdentifiers } = context;\n      value && addIdentifiers(value);\n      key && addIdentifiers(key);\n      index && addIdentifiers(index);\n      return () => {\n        value && removeIdentifiers(value);\n        key && removeIdentifiers(key);\n        index && removeIdentifiers(index);\n      };\n    }\n  }\n};\nconst buildClientSlotFn = (props, _vForExp, children, loc) => createFunctionExpression(\n  props,\n  children,\n  false,\n  true,\n  children.length ? children[0].loc : loc\n);\nfunction buildSlots(node, context, buildSlotFn = buildClientSlotFn) {\n  context.helper(WITH_CTX);\n  const { children, loc } = node;\n  const slotsProperties = [];\n  const dynamicSlots = [];\n  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;\n  if (!context.ssr && context.prefixIdentifiers) {\n    hasDynamicSlots = hasScopeRef(node, context.identifiers);\n  }\n  const onComponentSlot = findDir(node, \"slot\", true);\n  if (onComponentSlot) {\n    const { arg, exp } = onComponentSlot;\n    if (arg && !isStaticExp(arg)) {\n      hasDynamicSlots = true;\n    }\n    slotsProperties.push(\n      createObjectProperty(\n        arg || createSimpleExpression(\"default\", true),\n        buildSlotFn(exp, void 0, children, loc)\n      )\n    );\n  }\n  let hasTemplateSlots = false;\n  let hasNamedDefaultSlot = false;\n  const implicitDefaultChildren = [];\n  const seenSlotNames = /* @__PURE__ */ new Set();\n  let conditionalBranchIndex = 0;\n  for (let i = 0; i < children.length; i++) {\n    const slotElement = children[i];\n    let slotDir;\n    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, \"slot\", true))) {\n      if (slotElement.type !== 3) {\n        implicitDefaultChildren.push(slotElement);\n      }\n      continue;\n    }\n    if (onComponentSlot) {\n      context.onError(\n        createCompilerError(37, slotDir.loc)\n      );\n      break;\n    }\n    hasTemplateSlots = true;\n    const { children: slotChildren, loc: slotLoc } = slotElement;\n    const {\n      arg: slotName = createSimpleExpression(`default`, true),\n      exp: slotProps,\n      loc: dirLoc\n    } = slotDir;\n    let staticSlotName;\n    if (isStaticExp(slotName)) {\n      staticSlotName = slotName ? slotName.content : `default`;\n    } else {\n      hasDynamicSlots = true;\n    }\n    const vFor = findDir(slotElement, \"for\");\n    const slotFunction = buildSlotFn(slotProps, vFor, slotChildren, slotLoc);\n    let vIf;\n    let vElse;\n    if (vIf = findDir(slotElement, \"if\")) {\n      hasDynamicSlots = true;\n      dynamicSlots.push(\n        createConditionalExpression(\n          vIf.exp,\n          buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),\n          defaultFallback\n        )\n      );\n    } else if (vElse = findDir(\n      slotElement,\n      /^else(-if)?$/,\n      true\n      /* allowEmpty */\n    )) {\n      let j = i;\n      let prev;\n      while (j--) {\n        prev = children[j];\n        if (prev.type !== 3) {\n          break;\n        }\n      }\n      if (prev && isTemplateNode(prev) && findDir(prev, /^(else-)?if$/)) {\n        let conditional = dynamicSlots[dynamicSlots.length - 1];\n        while (conditional.alternate.type === 19) {\n          conditional = conditional.alternate;\n        }\n        conditional.alternate = vElse.exp ? createConditionalExpression(\n          vElse.exp,\n          buildDynamicSlot(\n            slotName,\n            slotFunction,\n            conditionalBranchIndex++\n          ),\n          defaultFallback\n        ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);\n      } else {\n        context.onError(\n          createCompilerError(30, vElse.loc)\n        );\n      }\n    } else if (vFor) {\n      hasDynamicSlots = true;\n      const parseResult = vFor.forParseResult;\n      if (parseResult) {\n        finalizeForParseResult(parseResult, context);\n        dynamicSlots.push(\n          createCallExpression(context.helper(RENDER_LIST), [\n            parseResult.source,\n            createFunctionExpression(\n              createForLoopParams(parseResult),\n              buildDynamicSlot(slotName, slotFunction),\n              true\n            )\n          ])\n        );\n      } else {\n        context.onError(\n          createCompilerError(\n            32,\n            vFor.loc\n          )\n        );\n      }\n    } else {\n      if (staticSlotName) {\n        if (seenSlotNames.has(staticSlotName)) {\n          context.onError(\n            createCompilerError(\n              38,\n              dirLoc\n            )\n          );\n          continue;\n        }\n        seenSlotNames.add(staticSlotName);\n        if (staticSlotName === \"default\") {\n          hasNamedDefaultSlot = true;\n        }\n      }\n      slotsProperties.push(createObjectProperty(slotName, slotFunction));\n    }\n  }\n  if (!onComponentSlot) {\n    const buildDefaultSlotProperty = (props, children2) => {\n      const fn = buildSlotFn(props, void 0, children2, loc);\n      if (context.compatConfig) {\n        fn.isNonScopedSlot = true;\n      }\n      return createObjectProperty(`default`, fn);\n    };\n    if (!hasTemplateSlots) {\n      slotsProperties.push(buildDefaultSlotProperty(void 0, children));\n    } else if (implicitDefaultChildren.length && // #3766\n    // with whitespace: 'preserve', whitespaces between slots will end up in\n    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.\n    implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {\n      if (hasNamedDefaultSlot) {\n        context.onError(\n          createCompilerError(\n            39,\n            implicitDefaultChildren[0].loc\n          )\n        );\n      } else {\n        slotsProperties.push(\n          buildDefaultSlotProperty(void 0, implicitDefaultChildren)\n        );\n      }\n    }\n  }\n  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;\n  let slots = createObjectExpression(\n    slotsProperties.concat(\n      createObjectProperty(\n        `_`,\n        // 2 = compiled but dynamic = can skip normalization, but must run diff\n        // 1 = compiled and static = can skip normalization AND diff as optimized\n        createSimpleExpression(\n          slotFlag + (` /* ${shared.slotFlagsText[slotFlag]} */` ),\n          false\n        )\n      )\n    ),\n    loc\n  );\n  if (dynamicSlots.length) {\n    slots = createCallExpression(context.helper(CREATE_SLOTS), [\n      slots,\n      createArrayExpression(dynamicSlots)\n    ]);\n  }\n  return {\n    slots,\n    hasDynamicSlots\n  };\n}\nfunction buildDynamicSlot(name, fn, index) {\n  const props = [\n    createObjectProperty(`name`, name),\n    createObjectProperty(`fn`, fn)\n  ];\n  if (index != null) {\n    props.push(\n      createObjectProperty(`key`, createSimpleExpression(String(index), true))\n    );\n  }\n  return createObjectExpression(props);\n}\nfunction hasForwardedSlots(children) {\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    switch (child.type) {\n      case 1:\n        if (child.tagType === 2 || hasForwardedSlots(child.children)) {\n          return true;\n        }\n        break;\n      case 9:\n        if (hasForwardedSlots(child.branches)) return true;\n        break;\n      case 10:\n      case 11:\n        if (hasForwardedSlots(child.children)) return true;\n        break;\n    }\n  }\n  return false;\n}\nfunction isNonWhitespaceContent(node) {\n  if (node.type !== 2 && node.type !== 12)\n    return true;\n  return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);\n}\n\nconst directiveImportMap = /* @__PURE__ */ new WeakMap();\nconst transformElement = (node, context) => {\n  return function postTransformElement() {\n    node = context.currentNode;\n    if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {\n      return;\n    }\n    const { tag, props } = node;\n    const isComponent = node.tagType === 1;\n    let vnodeTag = isComponent ? resolveComponentType(node, context) : `\"${tag}\"`;\n    const isDynamicComponent = shared.isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;\n    let vnodeProps;\n    let vnodeChildren;\n    let patchFlag = 0;\n    let vnodeDynamicProps;\n    let dynamicPropNames;\n    let vnodeDirectives;\n    let shouldUseBlock = (\n      // dynamic component may resolve to plain elements\n      isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent && // <svg> and <foreignObject> must be forced into blocks so that block\n      // updates inside get proper isSVG flag at runtime. (#639, #643)\n      // This is technically web-specific, but splitting the logic out of core\n      // leads to too much unnecessary complexity.\n      (tag === \"svg\" || tag === \"foreignObject\" || tag === \"math\")\n    );\n    if (props.length > 0) {\n      const propsBuildResult = buildProps(\n        node,\n        context,\n        void 0,\n        isComponent,\n        isDynamicComponent\n      );\n      vnodeProps = propsBuildResult.props;\n      patchFlag = propsBuildResult.patchFlag;\n      dynamicPropNames = propsBuildResult.dynamicPropNames;\n      const directives = propsBuildResult.directives;\n      vnodeDirectives = directives && directives.length ? createArrayExpression(\n        directives.map((dir) => buildDirectiveArgs(dir, context))\n      ) : void 0;\n      if (propsBuildResult.shouldUseBlock) {\n        shouldUseBlock = true;\n      }\n    }\n    if (node.children.length > 0) {\n      if (vnodeTag === KEEP_ALIVE) {\n        shouldUseBlock = true;\n        patchFlag |= 1024;\n        if (node.children.length > 1) {\n          context.onError(\n            createCompilerError(46, {\n              start: node.children[0].loc.start,\n              end: node.children[node.children.length - 1].loc.end,\n              source: \"\"\n            })\n          );\n        }\n      }\n      const shouldBuildAsSlots = isComponent && // Teleport is not a real component and has dedicated runtime handling\n      vnodeTag !== TELEPORT && // explained above.\n      vnodeTag !== KEEP_ALIVE;\n      if (shouldBuildAsSlots) {\n        const { slots, hasDynamicSlots } = buildSlots(node, context);\n        vnodeChildren = slots;\n        if (hasDynamicSlots) {\n          patchFlag |= 1024;\n        }\n      } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {\n        const child = node.children[0];\n        const type = child.type;\n        const hasDynamicTextChild = type === 5 || type === 8;\n        if (hasDynamicTextChild && getConstantType(child, context) === 0) {\n          patchFlag |= 1;\n        }\n        if (hasDynamicTextChild || type === 2) {\n          vnodeChildren = child;\n        } else {\n          vnodeChildren = node.children;\n        }\n      } else {\n        vnodeChildren = node.children;\n      }\n    }\n    if (dynamicPropNames && dynamicPropNames.length) {\n      vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);\n    }\n    node.codegenNode = createVNodeCall(\n      context,\n      vnodeTag,\n      vnodeProps,\n      vnodeChildren,\n      patchFlag === 0 ? void 0 : patchFlag,\n      vnodeDynamicProps,\n      vnodeDirectives,\n      !!shouldUseBlock,\n      false,\n      isComponent,\n      node.loc\n    );\n  };\n};\nfunction resolveComponentType(node, context, ssr = false) {\n  let { tag } = node;\n  const isExplicitDynamic = isComponentTag(tag);\n  const isProp = findProp(\n    node,\n    \"is\",\n    false,\n    true\n    /* allow empty */\n  );\n  if (isProp) {\n    if (isExplicitDynamic || isCompatEnabled(\n      \"COMPILER_IS_ON_ELEMENT\",\n      context\n    )) {\n      let exp;\n      if (isProp.type === 6) {\n        exp = isProp.value && createSimpleExpression(isProp.value.content, true);\n      } else {\n        exp = isProp.exp;\n        if (!exp) {\n          exp = createSimpleExpression(`is`, false, isProp.arg.loc);\n          {\n            exp = isProp.exp = processExpression(exp, context);\n          }\n        }\n      }\n      if (exp) {\n        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\n          exp\n        ]);\n      }\n    } else if (isProp.type === 6 && isProp.value.content.startsWith(\"vue:\")) {\n      tag = isProp.value.content.slice(4);\n    }\n  }\n  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);\n  if (builtIn) {\n    if (!ssr) context.helper(builtIn);\n    return builtIn;\n  }\n  {\n    const fromSetup = resolveSetupReference(tag, context);\n    if (fromSetup) {\n      return fromSetup;\n    }\n    const dotIndex = tag.indexOf(\".\");\n    if (dotIndex > 0) {\n      const ns = resolveSetupReference(tag.slice(0, dotIndex), context);\n      if (ns) {\n        return ns + tag.slice(dotIndex);\n      }\n    }\n  }\n  if (context.selfName && shared.capitalize(shared.camelize(tag)) === context.selfName) {\n    context.helper(RESOLVE_COMPONENT);\n    context.components.add(tag + `__self`);\n    return toValidAssetId(tag, `component`);\n  }\n  context.helper(RESOLVE_COMPONENT);\n  context.components.add(tag);\n  return toValidAssetId(tag, `component`);\n}\nfunction resolveSetupReference(name, context) {\n  const bindings = context.bindingMetadata;\n  if (!bindings || bindings.__isScriptSetup === false) {\n    return;\n  }\n  const camelName = shared.camelize(name);\n  const PascalName = shared.capitalize(camelName);\n  const checkType = (type) => {\n    if (bindings[name] === type) {\n      return name;\n    }\n    if (bindings[camelName] === type) {\n      return camelName;\n    }\n    if (bindings[PascalName] === type) {\n      return PascalName;\n    }\n  };\n  const fromConst = checkType(\"setup-const\") || checkType(\"setup-reactive-const\") || checkType(\"literal-const\");\n  if (fromConst) {\n    return context.inline ? (\n      // in inline mode, const setup bindings (e.g. imports) can be used as-is\n      fromConst\n    ) : `$setup[${JSON.stringify(fromConst)}]`;\n  }\n  const fromMaybeRef = checkType(\"setup-let\") || checkType(\"setup-ref\") || checkType(\"setup-maybe-ref\");\n  if (fromMaybeRef) {\n    return context.inline ? (\n      // setup scope bindings that may be refs need to be unrefed\n      `${context.helperString(UNREF)}(${fromMaybeRef})`\n    ) : `$setup[${JSON.stringify(fromMaybeRef)}]`;\n  }\n  const fromProps = checkType(\"props\");\n  if (fromProps) {\n    return `${context.helperString(UNREF)}(${context.inline ? \"__props\" : \"$props\"}[${JSON.stringify(fromProps)}])`;\n  }\n}\nfunction buildProps(node, context, props = node.props, isComponent, isDynamicComponent, ssr = false) {\n  const { tag, loc: elementLoc, children } = node;\n  let properties = [];\n  const mergeArgs = [];\n  const runtimeDirectives = [];\n  const hasChildren = children.length > 0;\n  let shouldUseBlock = false;\n  let patchFlag = 0;\n  let hasRef = false;\n  let hasClassBinding = false;\n  let hasStyleBinding = false;\n  let hasHydrationEventBinding = false;\n  let hasDynamicKeys = false;\n  let hasVnodeHook = false;\n  const dynamicPropNames = [];\n  const pushMergeArg = (arg) => {\n    if (properties.length) {\n      mergeArgs.push(\n        createObjectExpression(dedupeProperties(properties), elementLoc)\n      );\n      properties = [];\n    }\n    if (arg) mergeArgs.push(arg);\n  };\n  const pushRefVForMarker = () => {\n    if (context.scopes.vFor > 0) {\n      properties.push(\n        createObjectProperty(\n          createSimpleExpression(\"ref_for\", true),\n          createSimpleExpression(\"true\")\n        )\n      );\n    }\n  };\n  const analyzePatchFlag = ({ key, value }) => {\n    if (isStaticExp(key)) {\n      const name = key.content;\n      const isEventHandler = shared.isOn(name);\n      if (isEventHandler && (!isComponent || isDynamicComponent) && // omit the flag for click handlers because hydration gives click\n      // dedicated fast path.\n      name.toLowerCase() !== \"onclick\" && // omit v-model handlers\n      name !== \"onUpdate:modelValue\" && // omit onVnodeXXX hooks\n      !shared.isReservedProp(name)) {\n        hasHydrationEventBinding = true;\n      }\n      if (isEventHandler && shared.isReservedProp(name)) {\n        hasVnodeHook = true;\n      }\n      if (isEventHandler && value.type === 14) {\n        value = value.arguments[0];\n      }\n      if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {\n        return;\n      }\n      if (name === \"ref\") {\n        hasRef = true;\n      } else if (name === \"class\") {\n        hasClassBinding = true;\n      } else if (name === \"style\") {\n        hasStyleBinding = true;\n      } else if (name !== \"key\" && !dynamicPropNames.includes(name)) {\n        dynamicPropNames.push(name);\n      }\n      if (isComponent && (name === \"class\" || name === \"style\") && !dynamicPropNames.includes(name)) {\n        dynamicPropNames.push(name);\n      }\n    } else {\n      hasDynamicKeys = true;\n    }\n  };\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    if (prop.type === 6) {\n      const { loc, name, nameLoc, value } = prop;\n      let isStatic = true;\n      if (name === \"ref\") {\n        hasRef = true;\n        pushRefVForMarker();\n        if (value && context.inline) {\n          const binding = context.bindingMetadata[value.content];\n          if (binding === \"setup-let\" || binding === \"setup-ref\" || binding === \"setup-maybe-ref\") {\n            isStatic = false;\n            properties.push(\n              createObjectProperty(\n                createSimpleExpression(\"ref_key\", true),\n                createSimpleExpression(value.content, true, value.loc)\n              )\n            );\n          }\n        }\n      }\n      if (name === \"is\" && (isComponentTag(tag) || value && value.content.startsWith(\"vue:\") || isCompatEnabled(\n        \"COMPILER_IS_ON_ELEMENT\",\n        context\n      ))) {\n        continue;\n      }\n      properties.push(\n        createObjectProperty(\n          createSimpleExpression(name, true, nameLoc),\n          createSimpleExpression(\n            value ? value.content : \"\",\n            isStatic,\n            value ? value.loc : loc\n          )\n        )\n      );\n    } else {\n      const { name, arg, exp, loc, modifiers } = prop;\n      const isVBind = name === \"bind\";\n      const isVOn = name === \"on\";\n      if (name === \"slot\") {\n        if (!isComponent) {\n          context.onError(\n            createCompilerError(40, loc)\n          );\n        }\n        continue;\n      }\n      if (name === \"once\" || name === \"memo\") {\n        continue;\n      }\n      if (name === \"is\" || isVBind && isStaticArgOf(arg, \"is\") && (isComponentTag(tag) || isCompatEnabled(\n        \"COMPILER_IS_ON_ELEMENT\",\n        context\n      ))) {\n        continue;\n      }\n      if (isVOn && ssr) {\n        continue;\n      }\n      if (\n        // #938: elements with dynamic keys should be forced into blocks\n        isVBind && isStaticArgOf(arg, \"key\") || // inline before-update hooks need to force block so that it is invoked\n        // before children\n        isVOn && hasChildren && isStaticArgOf(arg, \"vue:before-update\")\n      ) {\n        shouldUseBlock = true;\n      }\n      if (isVBind && isStaticArgOf(arg, \"ref\")) {\n        pushRefVForMarker();\n      }\n      if (!arg && (isVBind || isVOn)) {\n        hasDynamicKeys = true;\n        if (exp) {\n          if (isVBind) {\n            pushRefVForMarker();\n            pushMergeArg();\n            {\n              {\n                const hasOverridableKeys = mergeArgs.some((arg2) => {\n                  if (arg2.type === 15) {\n                    return arg2.properties.some(({ key }) => {\n                      if (key.type !== 4 || !key.isStatic) {\n                        return true;\n                      }\n                      return key.content !== \"class\" && key.content !== \"style\" && !shared.isOn(key.content);\n                    });\n                  } else {\n                    return true;\n                  }\n                });\n                if (hasOverridableKeys) {\n                  checkCompatEnabled(\n                    \"COMPILER_V_BIND_OBJECT_ORDER\",\n                    context,\n                    loc\n                  );\n                }\n              }\n              if (isCompatEnabled(\n                \"COMPILER_V_BIND_OBJECT_ORDER\",\n                context\n              )) {\n                mergeArgs.unshift(exp);\n                continue;\n              }\n            }\n            mergeArgs.push(exp);\n          } else {\n            pushMergeArg({\n              type: 14,\n              loc,\n              callee: context.helper(TO_HANDLERS),\n              arguments: isComponent ? [exp] : [exp, `true`]\n            });\n          }\n        } else {\n          context.onError(\n            createCompilerError(\n              isVBind ? 34 : 35,\n              loc\n            )\n          );\n        }\n        continue;\n      }\n      if (isVBind && modifiers.some((mod) => mod.content === \"prop\")) {\n        patchFlag |= 32;\n      }\n      const directiveTransform = context.directiveTransforms[name];\n      if (directiveTransform) {\n        const { props: props2, needRuntime } = directiveTransform(prop, node, context);\n        !ssr && props2.forEach(analyzePatchFlag);\n        if (isVOn && arg && !isStaticExp(arg)) {\n          pushMergeArg(createObjectExpression(props2, elementLoc));\n        } else {\n          properties.push(...props2);\n        }\n        if (needRuntime) {\n          runtimeDirectives.push(prop);\n          if (shared.isSymbol(needRuntime)) {\n            directiveImportMap.set(prop, needRuntime);\n          }\n        }\n      } else if (!shared.isBuiltInDirective(name)) {\n        runtimeDirectives.push(prop);\n        if (hasChildren) {\n          shouldUseBlock = true;\n        }\n      }\n    }\n  }\n  let propsExpression = void 0;\n  if (mergeArgs.length) {\n    pushMergeArg();\n    if (mergeArgs.length > 1) {\n      propsExpression = createCallExpression(\n        context.helper(MERGE_PROPS),\n        mergeArgs,\n        elementLoc\n      );\n    } else {\n      propsExpression = mergeArgs[0];\n    }\n  } else if (properties.length) {\n    propsExpression = createObjectExpression(\n      dedupeProperties(properties),\n      elementLoc\n    );\n  }\n  if (hasDynamicKeys) {\n    patchFlag |= 16;\n  } else {\n    if (hasClassBinding && !isComponent) {\n      patchFlag |= 2;\n    }\n    if (hasStyleBinding && !isComponent) {\n      patchFlag |= 4;\n    }\n    if (dynamicPropNames.length) {\n      patchFlag |= 8;\n    }\n    if (hasHydrationEventBinding) {\n      patchFlag |= 32;\n    }\n  }\n  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {\n    patchFlag |= 512;\n  }\n  if (!context.inSSR && propsExpression) {\n    switch (propsExpression.type) {\n      case 15:\n        let classKeyIndex = -1;\n        let styleKeyIndex = -1;\n        let hasDynamicKey = false;\n        for (let i = 0; i < propsExpression.properties.length; i++) {\n          const key = propsExpression.properties[i].key;\n          if (isStaticExp(key)) {\n            if (key.content === \"class\") {\n              classKeyIndex = i;\n            } else if (key.content === \"style\") {\n              styleKeyIndex = i;\n            }\n          } else if (!key.isHandlerKey) {\n            hasDynamicKey = true;\n          }\n        }\n        const classProp = propsExpression.properties[classKeyIndex];\n        const styleProp = propsExpression.properties[styleKeyIndex];\n        if (!hasDynamicKey) {\n          if (classProp && !isStaticExp(classProp.value)) {\n            classProp.value = createCallExpression(\n              context.helper(NORMALIZE_CLASS),\n              [classProp.value]\n            );\n          }\n          if (styleProp && // the static style is compiled into an object,\n          // so use `hasStyleBinding` to ensure that it is a dynamic style binding\n          (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || // v-bind:style and style both exist,\n          // v-bind:style with static literal object\n          styleProp.value.type === 17)) {\n            styleProp.value = createCallExpression(\n              context.helper(NORMALIZE_STYLE),\n              [styleProp.value]\n            );\n          }\n        } else {\n          propsExpression = createCallExpression(\n            context.helper(NORMALIZE_PROPS),\n            [propsExpression]\n          );\n        }\n        break;\n      case 14:\n        break;\n      default:\n        propsExpression = createCallExpression(\n          context.helper(NORMALIZE_PROPS),\n          [\n            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [\n              propsExpression\n            ])\n          ]\n        );\n        break;\n    }\n  }\n  return {\n    props: propsExpression,\n    directives: runtimeDirectives,\n    patchFlag,\n    dynamicPropNames,\n    shouldUseBlock\n  };\n}\nfunction dedupeProperties(properties) {\n  const knownProps = /* @__PURE__ */ new Map();\n  const deduped = [];\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i];\n    if (prop.key.type === 8 || !prop.key.isStatic) {\n      deduped.push(prop);\n      continue;\n    }\n    const name = prop.key.content;\n    const existing = knownProps.get(name);\n    if (existing) {\n      if (name === \"style\" || name === \"class\" || shared.isOn(name)) {\n        mergeAsArray(existing, prop);\n      }\n    } else {\n      knownProps.set(name, prop);\n      deduped.push(prop);\n    }\n  }\n  return deduped;\n}\nfunction mergeAsArray(existing, incoming) {\n  if (existing.value.type === 17) {\n    existing.value.elements.push(incoming.value);\n  } else {\n    existing.value = createArrayExpression(\n      [existing.value, incoming.value],\n      existing.loc\n    );\n  }\n}\nfunction buildDirectiveArgs(dir, context) {\n  const dirArgs = [];\n  const runtime = directiveImportMap.get(dir);\n  if (runtime) {\n    dirArgs.push(context.helperString(runtime));\n  } else {\n    const fromSetup = resolveSetupReference(\"v-\" + dir.name, context);\n    if (fromSetup) {\n      dirArgs.push(fromSetup);\n    } else {\n      context.helper(RESOLVE_DIRECTIVE);\n      context.directives.add(dir.name);\n      dirArgs.push(toValidAssetId(dir.name, `directive`));\n    }\n  }\n  const { loc } = dir;\n  if (dir.exp) dirArgs.push(dir.exp);\n  if (dir.arg) {\n    if (!dir.exp) {\n      dirArgs.push(`void 0`);\n    }\n    dirArgs.push(dir.arg);\n  }\n  if (Object.keys(dir.modifiers).length) {\n    if (!dir.arg) {\n      if (!dir.exp) {\n        dirArgs.push(`void 0`);\n      }\n      dirArgs.push(`void 0`);\n    }\n    const trueExpression = createSimpleExpression(`true`, false, loc);\n    dirArgs.push(\n      createObjectExpression(\n        dir.modifiers.map(\n          (modifier) => createObjectProperty(modifier, trueExpression)\n        ),\n        loc\n      )\n    );\n  }\n  return createArrayExpression(dirArgs, dir.loc);\n}\nfunction stringifyDynamicPropNames(props) {\n  let propsNamesString = `[`;\n  for (let i = 0, l = props.length; i < l; i++) {\n    propsNamesString += JSON.stringify(props[i]);\n    if (i < l - 1) propsNamesString += \", \";\n  }\n  return propsNamesString + `]`;\n}\nfunction isComponentTag(tag) {\n  return tag === \"component\" || tag === \"Component\";\n}\n\nconst transformSlotOutlet = (node, context) => {\n  if (isSlotOutlet(node)) {\n    const { children, loc } = node;\n    const { slotName, slotProps } = processSlotOutlet(node, context);\n    const slotArgs = [\n      context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,\n      slotName,\n      \"{}\",\n      \"undefined\",\n      \"true\"\n    ];\n    let expectedLen = 2;\n    if (slotProps) {\n      slotArgs[2] = slotProps;\n      expectedLen = 3;\n    }\n    if (children.length) {\n      slotArgs[3] = createFunctionExpression([], children, false, false, loc);\n      expectedLen = 4;\n    }\n    if (context.scopeId && !context.slotted) {\n      expectedLen = 5;\n    }\n    slotArgs.splice(expectedLen);\n    node.codegenNode = createCallExpression(\n      context.helper(RENDER_SLOT),\n      slotArgs,\n      loc\n    );\n  }\n};\nfunction processSlotOutlet(node, context) {\n  let slotName = `\"default\"`;\n  let slotProps = void 0;\n  const nonNameProps = [];\n  for (let i = 0; i < node.props.length; i++) {\n    const p = node.props[i];\n    if (p.type === 6) {\n      if (p.value) {\n        if (p.name === \"name\") {\n          slotName = JSON.stringify(p.value.content);\n        } else {\n          p.name = shared.camelize(p.name);\n          nonNameProps.push(p);\n        }\n      }\n    } else {\n      if (p.name === \"bind\" && isStaticArgOf(p.arg, \"name\")) {\n        if (p.exp) {\n          slotName = p.exp;\n        } else if (p.arg && p.arg.type === 4) {\n          const name = shared.camelize(p.arg.content);\n          slotName = p.exp = createSimpleExpression(name, false, p.arg.loc);\n          {\n            slotName = p.exp = processExpression(p.exp, context);\n          }\n        }\n      } else {\n        if (p.name === \"bind\" && p.arg && isStaticExp(p.arg)) {\n          p.arg.content = shared.camelize(p.arg.content);\n        }\n        nonNameProps.push(p);\n      }\n    }\n  }\n  if (nonNameProps.length > 0) {\n    const { props, directives } = buildProps(\n      node,\n      context,\n      nonNameProps,\n      false,\n      false\n    );\n    slotProps = props;\n    if (directives.length) {\n      context.onError(\n        createCompilerError(\n          36,\n          directives[0].loc\n        )\n      );\n    }\n  }\n  return {\n    slotName,\n    slotProps\n  };\n}\n\nconst transformOn = (dir, node, context, augmentor) => {\n  const { loc, modifiers, arg } = dir;\n  if (!dir.exp && !modifiers.length) {\n    context.onError(createCompilerError(35, loc));\n  }\n  let eventName;\n  if (arg.type === 4) {\n    if (arg.isStatic) {\n      let rawName = arg.content;\n      if (rawName.startsWith(\"vnode\")) {\n        context.onError(createCompilerError(51, arg.loc));\n      }\n      if (rawName.startsWith(\"vue:\")) {\n        rawName = `vnode-${rawName.slice(4)}`;\n      }\n      const eventString = node.tagType !== 0 || rawName.startsWith(\"vnode\") || !/[A-Z]/.test(rawName) ? (\n        // for non-element and vnode lifecycle event listeners, auto convert\n        // it to camelCase. See issue #2249\n        shared.toHandlerKey(shared.camelize(rawName))\n      ) : (\n        // preserve case for plain element listeners that have uppercase\n        // letters, as these may be custom elements' custom events\n        `on:${rawName}`\n      );\n      eventName = createSimpleExpression(eventString, true, arg.loc);\n    } else {\n      eventName = createCompoundExpression([\n        `${context.helperString(TO_HANDLER_KEY)}(`,\n        arg,\n        `)`\n      ]);\n    }\n  } else {\n    eventName = arg;\n    eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);\n    eventName.children.push(`)`);\n  }\n  let exp = dir.exp;\n  if (exp && !exp.content.trim()) {\n    exp = void 0;\n  }\n  let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;\n  if (exp) {\n    const isMemberExp = isMemberExpression(exp, context);\n    const isInlineStatement = !(isMemberExp || isFnExpression(exp, context));\n    const hasMultipleStatements = exp.content.includes(`;`);\n    if (context.prefixIdentifiers) {\n      isInlineStatement && context.addIdentifiers(`$event`);\n      exp = dir.exp = processExpression(\n        exp,\n        context,\n        false,\n        hasMultipleStatements\n      );\n      isInlineStatement && context.removeIdentifiers(`$event`);\n      shouldCache = context.cacheHandlers && // unnecessary to cache inside v-once\n      !context.inVOnce && // runtime constants don't need to be cached\n      // (this is analyzed by compileScript in SFC <script setup>)\n      !(exp.type === 4 && exp.constType > 0) && // #1541 bail if this is a member exp handler passed to a component -\n      // we need to use the original function to preserve arity,\n      // e.g. <transition> relies on checking cb.length to determine\n      // transition end handling. Inline function is ok since its arity\n      // is preserved even when cached.\n      !(isMemberExp && node.tagType === 1) && // bail if the function references closure variables (v-for, v-slot)\n      // it must be passed fresh to avoid stale values.\n      !hasScopeRef(exp, context.identifiers);\n      if (shouldCache && isMemberExp) {\n        if (exp.type === 4) {\n          exp.content = `${exp.content} && ${exp.content}(...args)`;\n        } else {\n          exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`];\n        }\n      }\n    }\n    if (isInlineStatement || shouldCache && isMemberExp) {\n      exp = createCompoundExpression([\n        `${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `\n//@ts-ignore\n` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,\n        exp,\n        hasMultipleStatements ? `}` : `)`\n      ]);\n    }\n  }\n  let ret = {\n    props: [\n      createObjectProperty(\n        eventName,\n        exp || createSimpleExpression(`() => {}`, false, loc)\n      )\n    ]\n  };\n  if (augmentor) {\n    ret = augmentor(ret);\n  }\n  if (shouldCache) {\n    ret.props[0].value = context.cache(ret.props[0].value);\n  }\n  ret.props.forEach((p) => p.key.isHandlerKey = true);\n  return ret;\n};\n\nconst transformText = (node, context) => {\n  if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {\n    return () => {\n      const children = node.children;\n      let currentContainer = void 0;\n      let hasText = false;\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (isText$1(child)) {\n          hasText = true;\n          for (let j = i + 1; j < children.length; j++) {\n            const next = children[j];\n            if (isText$1(next)) {\n              if (!currentContainer) {\n                currentContainer = children[i] = createCompoundExpression(\n                  [child],\n                  child.loc\n                );\n              }\n              currentContainer.children.push(` + `, next);\n              children.splice(j, 1);\n              j--;\n            } else {\n              currentContainer = void 0;\n              break;\n            }\n          }\n        }\n      }\n      if (!hasText || // if this is a plain element with a single text child, leave it\n      // as-is since the runtime has dedicated fast path for this by directly\n      // setting textContent of the element.\n      // for component root it's always normalized anyway.\n      children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && // #3756\n      // custom directives can potentially add DOM elements arbitrarily,\n      // we need to avoid setting textContent of the element at runtime\n      // to avoid accidentally overwriting the DOM elements added\n      // by the user through custom directives.\n      !node.props.find(\n        (p) => p.type === 7 && !context.directiveTransforms[p.name]\n      ) && // in compat mode, <template> tags with no special directives\n      // will be rendered as a fragment so its children must be\n      // converted into vnodes.\n      !(node.tag === \"template\"))) {\n        return;\n      }\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (isText$1(child) || child.type === 8) {\n          const callArgs = [];\n          if (child.type !== 2 || child.content !== \" \") {\n            callArgs.push(child);\n          }\n          if (!context.ssr && getConstantType(child, context) === 0) {\n            callArgs.push(\n              1 + (` /* ${shared.PatchFlagNames[1]} */` )\n            );\n          }\n          children[i] = {\n            type: 12,\n            content: child,\n            loc: child.loc,\n            codegenNode: createCallExpression(\n              context.helper(CREATE_TEXT),\n              callArgs\n            )\n          };\n        }\n      }\n    };\n  }\n};\n\nconst seen$1 = /* @__PURE__ */ new WeakSet();\nconst transformOnce = (node, context) => {\n  if (node.type === 1 && findDir(node, \"once\", true)) {\n    if (seen$1.has(node) || context.inVOnce || context.inSSR) {\n      return;\n    }\n    seen$1.add(node);\n    context.inVOnce = true;\n    context.helper(SET_BLOCK_TRACKING);\n    return () => {\n      context.inVOnce = false;\n      const cur = context.currentNode;\n      if (cur.codegenNode) {\n        cur.codegenNode = context.cache(\n          cur.codegenNode,\n          true,\n          true\n        );\n      }\n    };\n  }\n};\n\nconst transformModel = (dir, node, context) => {\n  const { exp, arg } = dir;\n  if (!exp) {\n    context.onError(\n      createCompilerError(41, dir.loc)\n    );\n    return createTransformProps();\n  }\n  const rawExp = exp.loc.source.trim();\n  const expString = exp.type === 4 ? exp.content : rawExp;\n  const bindingType = context.bindingMetadata[rawExp];\n  if (bindingType === \"props\" || bindingType === \"props-aliased\") {\n    context.onError(createCompilerError(44, exp.loc));\n    return createTransformProps();\n  }\n  const maybeRef = context.inline && (bindingType === \"setup-let\" || bindingType === \"setup-ref\" || bindingType === \"setup-maybe-ref\");\n  if (!expString.trim() || !isMemberExpression(exp, context) && !maybeRef) {\n    context.onError(\n      createCompilerError(42, exp.loc)\n    );\n    return createTransformProps();\n  }\n  if (context.prefixIdentifiers && isSimpleIdentifier(expString) && context.identifiers[expString]) {\n    context.onError(\n      createCompilerError(43, exp.loc)\n    );\n    return createTransformProps();\n  }\n  const propName = arg ? arg : createSimpleExpression(\"modelValue\", true);\n  const eventName = arg ? isStaticExp(arg) ? `onUpdate:${shared.camelize(arg.content)}` : createCompoundExpression(['\"onUpdate:\" + ', arg]) : `onUpdate:modelValue`;\n  let assignmentExp;\n  const eventArg = context.isTS ? `($event: any)` : `$event`;\n  if (maybeRef) {\n    if (bindingType === \"setup-ref\") {\n      assignmentExp = createCompoundExpression([\n        `${eventArg} => ((`,\n        createSimpleExpression(rawExp, false, exp.loc),\n        `).value = $event)`\n      ]);\n    } else {\n      const altAssignment = bindingType === \"setup-let\" ? `${rawExp} = $event` : `null`;\n      assignmentExp = createCompoundExpression([\n        `${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? (`,\n        createSimpleExpression(rawExp, false, exp.loc),\n        `).value = $event : ${altAssignment})`\n      ]);\n    }\n  } else {\n    assignmentExp = createCompoundExpression([\n      `${eventArg} => ((`,\n      exp,\n      `) = $event)`\n    ]);\n  }\n  const props = [\n    // modelValue: foo\n    createObjectProperty(propName, dir.exp),\n    // \"onUpdate:modelValue\": $event => (foo = $event)\n    createObjectProperty(eventName, assignmentExp)\n  ];\n  if (context.prefixIdentifiers && !context.inVOnce && context.cacheHandlers && !hasScopeRef(exp, context.identifiers)) {\n    props[1].value = context.cache(props[1].value);\n  }\n  if (dir.modifiers.length && node.tagType === 1) {\n    const modifiers = dir.modifiers.map((m) => m.content).map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);\n    const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + \"Modifiers\"']) : `modelModifiers`;\n    props.push(\n      createObjectProperty(\n        modifiersKey,\n        createSimpleExpression(\n          `{ ${modifiers} }`,\n          false,\n          dir.loc,\n          2\n        )\n      )\n    );\n  }\n  return createTransformProps(props);\n};\nfunction createTransformProps(props = []) {\n  return { props };\n}\n\nconst validDivisionCharRE = /[\\w).+\\-_$\\]]/;\nconst transformFilter = (node, context) => {\n  if (!isCompatEnabled(\"COMPILER_FILTERS\", context)) {\n    return;\n  }\n  if (node.type === 5) {\n    rewriteFilter(node.content, context);\n  } else if (node.type === 1) {\n    node.props.forEach((prop) => {\n      if (prop.type === 7 && prop.name !== \"for\" && prop.exp) {\n        rewriteFilter(prop.exp, context);\n      }\n    });\n  }\n};\nfunction rewriteFilter(node, context) {\n  if (node.type === 4) {\n    parseFilter(node, context);\n  } else {\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (typeof child !== \"object\") continue;\n      if (child.type === 4) {\n        parseFilter(child, context);\n      } else if (child.type === 8) {\n        rewriteFilter(node, context);\n      } else if (child.type === 5) {\n        rewriteFilter(child.content, context);\n      }\n    }\n  }\n}\nfunction parseFilter(node, context) {\n  const exp = node.content;\n  let inSingle = false;\n  let inDouble = false;\n  let inTemplateString = false;\n  let inRegex = false;\n  let curly = 0;\n  let square = 0;\n  let paren = 0;\n  let lastFilterIndex = 0;\n  let c, prev, i, expression, filters = [];\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 39 && prev !== 92) inSingle = false;\n    } else if (inDouble) {\n      if (c === 34 && prev !== 92) inDouble = false;\n    } else if (inTemplateString) {\n      if (c === 96 && prev !== 92) inTemplateString = false;\n    } else if (inRegex) {\n      if (c === 47 && prev !== 92) inRegex = false;\n    } else if (c === 124 && // pipe\n    exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {\n      if (expression === void 0) {\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 34:\n          inDouble = true;\n          break;\n        // \"\n        case 39:\n          inSingle = true;\n          break;\n        // '\n        case 96:\n          inTemplateString = true;\n          break;\n        // `\n        case 40:\n          paren++;\n          break;\n        // (\n        case 41:\n          paren--;\n          break;\n        // )\n        case 91:\n          square++;\n          break;\n        // [\n        case 93:\n          square--;\n          break;\n        // ]\n        case 123:\n          curly++;\n          break;\n        // {\n        case 125:\n          curly--;\n          break;\n      }\n      if (c === 47) {\n        let j = i - 1;\n        let p;\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== \" \") break;\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n  if (expression === void 0) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n  function pushFilter() {\n    filters.push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n  if (filters.length) {\n    warnDeprecation(\n      \"COMPILER_FILTERS\",\n      context,\n      node.loc\n    );\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i], context);\n    }\n    node.content = expression;\n    node.ast = void 0;\n  }\n}\nfunction wrapFilter(exp, filter, context) {\n  context.helper(RESOLVE_FILTER);\n  const i = filter.indexOf(\"(\");\n  if (i < 0) {\n    context.filters.add(filter);\n    return `${toValidAssetId(filter, \"filter\")}(${exp})`;\n  } else {\n    const name = filter.slice(0, i);\n    const args = filter.slice(i + 1);\n    context.filters.add(name);\n    return `${toValidAssetId(name, \"filter\")}(${exp}${args !== \")\" ? \",\" + args : args}`;\n  }\n}\n\nconst seen = /* @__PURE__ */ new WeakSet();\nconst transformMemo = (node, context) => {\n  if (node.type === 1) {\n    const dir = findDir(node, \"memo\");\n    if (!dir || seen.has(node)) {\n      return;\n    }\n    seen.add(node);\n    return () => {\n      const codegenNode = node.codegenNode || context.currentNode.codegenNode;\n      if (codegenNode && codegenNode.type === 13) {\n        if (node.tagType !== 1) {\n          convertToBlock(codegenNode, context);\n        }\n        node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [\n          dir.exp,\n          createFunctionExpression(void 0, codegenNode),\n          `_cache`,\n          String(context.cached.length)\n        ]);\n        context.cached.push(null);\n      }\n    };\n  }\n};\n\nfunction getBaseTransformPreset(prefixIdentifiers) {\n  return [\n    [\n      transformOnce,\n      transformIf,\n      transformMemo,\n      transformFor,\n      ...[transformFilter] ,\n      ...prefixIdentifiers ? [\n        // order is important\n        trackVForSlotScopes,\n        transformExpression\n      ] : [],\n      transformSlotOutlet,\n      transformElement,\n      trackSlotScopes,\n      transformText\n    ],\n    {\n      on: transformOn,\n      bind: transformBind,\n      model: transformModel\n    }\n  ];\n}\nfunction baseCompile(source, options = {}) {\n  const onError = options.onError || defaultOnError;\n  const isModuleMode = options.mode === \"module\";\n  const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;\n  if (!prefixIdentifiers && options.cacheHandlers) {\n    onError(createCompilerError(49));\n  }\n  if (options.scopeId && !isModuleMode) {\n    onError(createCompilerError(50));\n  }\n  const resolvedOptions = shared.extend({}, options, {\n    prefixIdentifiers\n  });\n  const ast = shared.isString(source) ? baseParse(source, resolvedOptions) : source;\n  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset(prefixIdentifiers);\n  if (options.isTS) {\n    const { expressionPlugins } = options;\n    if (!expressionPlugins || !expressionPlugins.includes(\"typescript\")) {\n      options.expressionPlugins = [...expressionPlugins || [], \"typescript\"];\n    }\n  }\n  transform(\n    ast,\n    shared.extend({}, resolvedOptions, {\n      nodeTransforms: [\n        ...nodeTransforms,\n        ...options.nodeTransforms || []\n        // user transforms\n      ],\n      directiveTransforms: shared.extend(\n        {},\n        directiveTransforms,\n        options.directiveTransforms || {}\n        // user transforms\n      )\n    })\n  );\n  return generate(ast, resolvedOptions);\n}\n\nconst BindingTypes = {\n  \"DATA\": \"data\",\n  \"PROPS\": \"props\",\n  \"PROPS_ALIASED\": \"props-aliased\",\n  \"SETUP_LET\": \"setup-let\",\n  \"SETUP_CONST\": \"setup-const\",\n  \"SETUP_REACTIVE_CONST\": \"setup-reactive-const\",\n  \"SETUP_MAYBE_REF\": \"setup-maybe-ref\",\n  \"SETUP_REF\": \"setup-ref\",\n  \"OPTIONS\": \"options\",\n  \"LITERAL_CONST\": \"literal-const\"\n};\n\nconst noopDirectiveTransform = () => ({ props: [] });\n\nexports.generateCodeFrame = shared.generateCodeFrame;\nexports.BASE_TRANSITION = BASE_TRANSITION;\nexports.BindingTypes = BindingTypes;\nexports.CAMELIZE = CAMELIZE;\nexports.CAPITALIZE = CAPITALIZE;\nexports.CREATE_BLOCK = CREATE_BLOCK;\nexports.CREATE_COMMENT = CREATE_COMMENT;\nexports.CREATE_ELEMENT_BLOCK = CREATE_ELEMENT_BLOCK;\nexports.CREATE_ELEMENT_VNODE = CREATE_ELEMENT_VNODE;\nexports.CREATE_SLOTS = CREATE_SLOTS;\nexports.CREATE_STATIC = CREATE_STATIC;\nexports.CREATE_TEXT = CREATE_TEXT;\nexports.CREATE_VNODE = CREATE_VNODE;\nexports.CompilerDeprecationTypes = CompilerDeprecationTypes;\nexports.ConstantTypes = ConstantTypes;\nexports.ElementTypes = ElementTypes;\nexports.ErrorCodes = ErrorCodes;\nexports.FRAGMENT = FRAGMENT;\nexports.GUARD_REACTIVE_PROPS = GUARD_REACTIVE_PROPS;\nexports.IS_MEMO_SAME = IS_MEMO_SAME;\nexports.IS_REF = IS_REF;\nexports.KEEP_ALIVE = KEEP_ALIVE;\nexports.MERGE_PROPS = MERGE_PROPS;\nexports.NORMALIZE_CLASS = NORMALIZE_CLASS;\nexports.NORMALIZE_PROPS = NORMALIZE_PROPS;\nexports.NORMALIZE_STYLE = NORMALIZE_STYLE;\nexports.Namespaces = Namespaces;\nexports.NodeTypes = NodeTypes;\nexports.OPEN_BLOCK = OPEN_BLOCK;\nexports.POP_SCOPE_ID = POP_SCOPE_ID;\nexports.PUSH_SCOPE_ID = PUSH_SCOPE_ID;\nexports.RENDER_LIST = RENDER_LIST;\nexports.RENDER_SLOT = RENDER_SLOT;\nexports.RESOLVE_COMPONENT = RESOLVE_COMPONENT;\nexports.RESOLVE_DIRECTIVE = RESOLVE_DIRECTIVE;\nexports.RESOLVE_DYNAMIC_COMPONENT = RESOLVE_DYNAMIC_COMPONENT;\nexports.RESOLVE_FILTER = RESOLVE_FILTER;\nexports.SET_BLOCK_TRACKING = SET_BLOCK_TRACKING;\nexports.SUSPENSE = SUSPENSE;\nexports.TELEPORT = TELEPORT;\nexports.TO_DISPLAY_STRING = TO_DISPLAY_STRING;\nexports.TO_HANDLERS = TO_HANDLERS;\nexports.TO_HANDLER_KEY = TO_HANDLER_KEY;\nexports.TS_NODE_TYPES = TS_NODE_TYPES;\nexports.UNREF = UNREF;\nexports.WITH_CTX = WITH_CTX;\nexports.WITH_DIRECTIVES = WITH_DIRECTIVES;\nexports.WITH_MEMO = WITH_MEMO;\nexports.advancePositionWithClone = advancePositionWithClone;\nexports.advancePositionWithMutation = advancePositionWithMutation;\nexports.assert = assert;\nexports.baseCompile = baseCompile;\nexports.baseParse = baseParse;\nexports.buildDirectiveArgs = buildDirectiveArgs;\nexports.buildProps = buildProps;\nexports.buildSlots = buildSlots;\nexports.checkCompatEnabled = checkCompatEnabled;\nexports.convertToBlock = convertToBlock;\nexports.createArrayExpression = createArrayExpression;\nexports.createAssignmentExpression = createAssignmentExpression;\nexports.createBlockStatement = createBlockStatement;\nexports.createCacheExpression = createCacheExpression;\nexports.createCallExpression = createCallExpression;\nexports.createCompilerError = createCompilerError;\nexports.createCompoundExpression = createCompoundExpression;\nexports.createConditionalExpression = createConditionalExpression;\nexports.createForLoopParams = createForLoopParams;\nexports.createFunctionExpression = createFunctionExpression;\nexports.createIfStatement = createIfStatement;\nexports.createInterpolation = createInterpolation;\nexports.createObjectExpression = createObjectExpression;\nexports.createObjectProperty = createObjectProperty;\nexports.createReturnStatement = createReturnStatement;\nexports.createRoot = createRoot;\nexports.createSequenceExpression = createSequenceExpression;\nexports.createSimpleExpression = createSimpleExpression;\nexports.createStructuralDirectiveTransform = createStructuralDirectiveTransform;\nexports.createTemplateLiteral = createTemplateLiteral;\nexports.createTransformContext = createTransformContext;\nexports.createVNodeCall = createVNodeCall;\nexports.errorMessages = errorMessages;\nexports.extractIdentifiers = extractIdentifiers;\nexports.findDir = findDir;\nexports.findProp = findProp;\nexports.forAliasRE = forAliasRE;\nexports.generate = generate;\nexports.getBaseTransformPreset = getBaseTransformPreset;\nexports.getConstantType = getConstantType;\nexports.getMemoedVNodeCall = getMemoedVNodeCall;\nexports.getVNodeBlockHelper = getVNodeBlockHelper;\nexports.getVNodeHelper = getVNodeHelper;\nexports.hasDynamicKeyVBind = hasDynamicKeyVBind;\nexports.hasScopeRef = hasScopeRef;\nexports.helperNameMap = helperNameMap;\nexports.injectProp = injectProp;\nexports.isCoreComponent = isCoreComponent;\nexports.isFnExpression = isFnExpression;\nexports.isFnExpressionBrowser = isFnExpressionBrowser;\nexports.isFnExpressionNode = isFnExpressionNode;\nexports.isFunctionType = isFunctionType;\nexports.isInDestructureAssignment = isInDestructureAssignment;\nexports.isInNewExpression = isInNewExpression;\nexports.isMemberExpression = isMemberExpression;\nexports.isMemberExpressionBrowser = isMemberExpressionBrowser;\nexports.isMemberExpressionNode = isMemberExpressionNode;\nexports.isReferencedIdentifier = isReferencedIdentifier;\nexports.isSimpleIdentifier = isSimpleIdentifier;\nexports.isSlotOutlet = isSlotOutlet;\nexports.isStaticArgOf = isStaticArgOf;\nexports.isStaticExp = isStaticExp;\nexports.isStaticProperty = isStaticProperty;\nexports.isStaticPropertyKey = isStaticPropertyKey;\nexports.isTemplateNode = isTemplateNode;\nexports.isText = isText$1;\nexports.isVSlot = isVSlot;\nexports.locStub = locStub;\nexports.noopDirectiveTransform = noopDirectiveTransform;\nexports.processExpression = processExpression;\nexports.processFor = processFor;\nexports.processIf = processIf;\nexports.processSlotOutlet = processSlotOutlet;\nexports.registerRuntimeHelpers = registerRuntimeHelpers;\nexports.resolveComponentType = resolveComponentType;\nexports.stringifyExpression = stringifyExpression;\nexports.toValidAssetId = toValidAssetId;\nexports.trackSlotScopes = trackSlotScopes;\nexports.trackVForSlotScopes = trackVForSlotScopes;\nexports.transform = transform;\nexports.transformBind = transformBind;\nexports.transformElement = transformElement;\nexports.transformExpression = transformExpression;\nexports.transformModel = transformModel;\nexports.transformOn = transformOn;\nexports.traverseNode = traverseNode;\nexports.unwrapTSNode = unwrapTSNode;\nexports.walkBlockDeclarations = walkBlockDeclarations;\nexports.walkFunctionParams = walkFunctionParams;\nexports.walkIdentifiers = walkIdentifiers;\nexports.warnDeprecation = warnDeprecation;\n", "'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/compiler-core.cjs.prod.js')\n} else {\n  module.exports = require('./dist/compiler-core.cjs.js')\n}\n", "/**\n* @vue/compiler-dom v3.5.14\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nimport { registerRuntimeHelpers, createSimpleExpression, createCompilerError, createObjectProperty, createCallExpression, getConstantType, TO_DISPLAY_STRING, transformModel as transformModel$1, findProp, hasDynamicKeyVBind, findDir, isStaticArgOf, transformOn as transformOn$1, isStaticExp, createCompoundExpression, checkCompatEnabled, noopDirectiveTransform, baseCompile, baseParse } from '@vue/compiler-core';\nexport * from '@vue/compiler-core';\nimport { isHTMLTag, isSVGTag, isMathMLTag, isVoidTag, parseStringStyle, makeMap, capitalize, extend } from '@vue/shared';\n\nconst V_MODEL_RADIO = Symbol(!!(process.env.NODE_ENV !== \"production\") ? `vModelRadio` : ``);\nconst V_MODEL_CHECKBOX = Symbol(\n  !!(process.env.NODE_ENV !== \"production\") ? `vModelCheckbox` : ``\n);\nconst V_MODEL_TEXT = Symbol(!!(process.env.NODE_ENV !== \"production\") ? `vModelText` : ``);\nconst V_MODEL_SELECT = Symbol(\n  !!(process.env.NODE_ENV !== \"production\") ? `vModelSelect` : ``\n);\nconst V_MODEL_DYNAMIC = Symbol(\n  !!(process.env.NODE_ENV !== \"production\") ? `vModelDynamic` : ``\n);\nconst V_ON_WITH_MODIFIERS = Symbol(\n  !!(process.env.NODE_ENV !== \"production\") ? `vOnModifiersGuard` : ``\n);\nconst V_ON_WITH_KEYS = Symbol(\n  !!(process.env.NODE_ENV !== \"production\") ? `vOnKeysGuard` : ``\n);\nconst V_SHOW = Symbol(!!(process.env.NODE_ENV !== \"production\") ? `vShow` : ``);\nconst TRANSITION = Symbol(!!(process.env.NODE_ENV !== \"production\") ? `Transition` : ``);\nconst TRANSITION_GROUP = Symbol(\n  !!(process.env.NODE_ENV !== \"production\") ? `TransitionGroup` : ``\n);\nregisterRuntimeHelpers({\n  [V_MODEL_RADIO]: `vModelRadio`,\n  [V_MODEL_CHECKBOX]: `vModelCheckbox`,\n  [V_MODEL_TEXT]: `vModelText`,\n  [V_MODEL_SELECT]: `vModelSelect`,\n  [V_MODEL_DYNAMIC]: `vModelDynamic`,\n  [V_ON_WITH_MODIFIERS]: `withModifiers`,\n  [V_ON_WITH_KEYS]: `withKeys`,\n  [V_SHOW]: `vShow`,\n  [TRANSITION]: `Transition`,\n  [TRANSITION_GROUP]: `TransitionGroup`\n});\n\nlet decoder;\nfunction decodeHtmlBrowser(raw, asAttr = false) {\n  if (!decoder) {\n    decoder = document.createElement(\"div\");\n  }\n  if (asAttr) {\n    decoder.innerHTML = `<div foo=\"${raw.replace(/\"/g, \"&quot;\")}\">`;\n    return decoder.children[0].getAttribute(\"foo\");\n  } else {\n    decoder.innerHTML = raw;\n    return decoder.textContent;\n  }\n}\n\nconst parserOptions = {\n  parseMode: \"html\",\n  isVoidTag,\n  isNativeTag: (tag) => isHTMLTag(tag) || isSVGTag(tag) || isMathMLTag(tag),\n  isPreTag: (tag) => tag === \"pre\",\n  isIgnoreNewlineTag: (tag) => tag === \"pre\" || tag === \"textarea\",\n  decodeEntities: decodeHtmlBrowser ,\n  isBuiltInComponent: (tag) => {\n    if (tag === \"Transition\" || tag === \"transition\") {\n      return TRANSITION;\n    } else if (tag === \"TransitionGroup\" || tag === \"transition-group\") {\n      return TRANSITION_GROUP;\n    }\n  },\n  // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher\n  getNamespace(tag, parent, rootNamespace) {\n    let ns = parent ? parent.ns : rootNamespace;\n    if (parent && ns === 2) {\n      if (parent.tag === \"annotation-xml\") {\n        if (tag === \"svg\") {\n          return 1;\n        }\n        if (parent.props.some(\n          (a) => a.type === 6 && a.name === \"encoding\" && a.value != null && (a.value.content === \"text/html\" || a.value.content === \"application/xhtml+xml\")\n        )) {\n          ns = 0;\n        }\n      } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== \"mglyph\" && tag !== \"malignmark\") {\n        ns = 0;\n      }\n    } else if (parent && ns === 1) {\n      if (parent.tag === \"foreignObject\" || parent.tag === \"desc\" || parent.tag === \"title\") {\n        ns = 0;\n      }\n    }\n    if (ns === 0) {\n      if (tag === \"svg\") {\n        return 1;\n      }\n      if (tag === \"math\") {\n        return 2;\n      }\n    }\n    return ns;\n  }\n};\n\nconst transformStyle = (node) => {\n  if (node.type === 1) {\n    node.props.forEach((p, i) => {\n      if (p.type === 6 && p.name === \"style\" && p.value) {\n        node.props[i] = {\n          type: 7,\n          name: `bind`,\n          arg: createSimpleExpression(`style`, true, p.loc),\n          exp: parseInlineCSS(p.value.content, p.loc),\n          modifiers: [],\n          loc: p.loc\n        };\n      }\n    });\n  }\n};\nconst parseInlineCSS = (cssText, loc) => {\n  const normalized = parseStringStyle(cssText);\n  return createSimpleExpression(\n    JSON.stringify(normalized),\n    false,\n    loc,\n    3\n  );\n};\n\nfunction createDOMCompilerError(code, loc) {\n  return createCompilerError(\n    code,\n    loc,\n    !!(process.env.NODE_ENV !== \"production\") || false ? DOMErrorMessages : void 0\n  );\n}\nconst DOMErrorCodes = {\n  \"X_V_HTML_NO_EXPRESSION\": 53,\n  \"53\": \"X_V_HTML_NO_EXPRESSION\",\n  \"X_V_HTML_WITH_CHILDREN\": 54,\n  \"54\": \"X_V_HTML_WITH_CHILDREN\",\n  \"X_V_TEXT_NO_EXPRESSION\": 55,\n  \"55\": \"X_V_TEXT_NO_EXPRESSION\",\n  \"X_V_TEXT_WITH_CHILDREN\": 56,\n  \"56\": \"X_V_TEXT_WITH_CHILDREN\",\n  \"X_V_MODEL_ON_INVALID_ELEMENT\": 57,\n  \"57\": \"X_V_MODEL_ON_INVALID_ELEMENT\",\n  \"X_V_MODEL_ARG_ON_ELEMENT\": 58,\n  \"58\": \"X_V_MODEL_ARG_ON_ELEMENT\",\n  \"X_V_MODEL_ON_FILE_INPUT_ELEMENT\": 59,\n  \"59\": \"X_V_MODEL_ON_FILE_INPUT_ELEMENT\",\n  \"X_V_MODEL_UNNECESSARY_VALUE\": 60,\n  \"60\": \"X_V_MODEL_UNNECESSARY_VALUE\",\n  \"X_V_SHOW_NO_EXPRESSION\": 61,\n  \"61\": \"X_V_SHOW_NO_EXPRESSION\",\n  \"X_TRANSITION_INVALID_CHILDREN\": 62,\n  \"62\": \"X_TRANSITION_INVALID_CHILDREN\",\n  \"X_IGNORED_SIDE_EFFECT_TAG\": 63,\n  \"63\": \"X_IGNORED_SIDE_EFFECT_TAG\",\n  \"__EXTEND_POINT__\": 64,\n  \"64\": \"__EXTEND_POINT__\"\n};\nconst DOMErrorMessages = {\n  [53]: `v-html is missing expression.`,\n  [54]: `v-html will override element children.`,\n  [55]: `v-text is missing expression.`,\n  [56]: `v-text will override element children.`,\n  [57]: `v-model can only be used on <input>, <textarea> and <select> elements.`,\n  [58]: `v-model argument is not supported on plain elements.`,\n  [59]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,\n  [60]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,\n  [61]: `v-show is missing expression.`,\n  [62]: `<Transition> expects exactly one child element or component.`,\n  [63]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`\n};\n\nconst transformVHtml = (dir, node, context) => {\n  const { exp, loc } = dir;\n  if (!exp) {\n    context.onError(\n      createDOMCompilerError(53, loc)\n    );\n  }\n  if (node.children.length) {\n    context.onError(\n      createDOMCompilerError(54, loc)\n    );\n    node.children.length = 0;\n  }\n  return {\n    props: [\n      createObjectProperty(\n        createSimpleExpression(`innerHTML`, true, loc),\n        exp || createSimpleExpression(\"\", true)\n      )\n    ]\n  };\n};\n\nconst transformVText = (dir, node, context) => {\n  const { exp, loc } = dir;\n  if (!exp) {\n    context.onError(\n      createDOMCompilerError(55, loc)\n    );\n  }\n  if (node.children.length) {\n    context.onError(\n      createDOMCompilerError(56, loc)\n    );\n    node.children.length = 0;\n  }\n  return {\n    props: [\n      createObjectProperty(\n        createSimpleExpression(`textContent`, true),\n        exp ? getConstantType(exp, context) > 0 ? exp : createCallExpression(\n          context.helperString(TO_DISPLAY_STRING),\n          [exp],\n          loc\n        ) : createSimpleExpression(\"\", true)\n      )\n    ]\n  };\n};\n\nconst transformModel = (dir, node, context) => {\n  const baseResult = transformModel$1(dir, node, context);\n  if (!baseResult.props.length || node.tagType === 1) {\n    return baseResult;\n  }\n  if (dir.arg) {\n    context.onError(\n      createDOMCompilerError(\n        58,\n        dir.arg.loc\n      )\n    );\n  }\n  function checkDuplicatedValue() {\n    const value = findDir(node, \"bind\");\n    if (value && isStaticArgOf(value.arg, \"value\")) {\n      context.onError(\n        createDOMCompilerError(\n          60,\n          value.loc\n        )\n      );\n    }\n  }\n  const { tag } = node;\n  const isCustomElement = context.isCustomElement(tag);\n  if (tag === \"input\" || tag === \"textarea\" || tag === \"select\" || isCustomElement) {\n    let directiveToUse = V_MODEL_TEXT;\n    let isInvalidType = false;\n    if (tag === \"input\" || isCustomElement) {\n      const type = findProp(node, `type`);\n      if (type) {\n        if (type.type === 7) {\n          directiveToUse = V_MODEL_DYNAMIC;\n        } else if (type.value) {\n          switch (type.value.content) {\n            case \"radio\":\n              directiveToUse = V_MODEL_RADIO;\n              break;\n            case \"checkbox\":\n              directiveToUse = V_MODEL_CHECKBOX;\n              break;\n            case \"file\":\n              isInvalidType = true;\n              context.onError(\n                createDOMCompilerError(\n                  59,\n                  dir.loc\n                )\n              );\n              break;\n            default:\n              !!(process.env.NODE_ENV !== \"production\") && checkDuplicatedValue();\n              break;\n          }\n        }\n      } else if (hasDynamicKeyVBind(node)) {\n        directiveToUse = V_MODEL_DYNAMIC;\n      } else {\n        !!(process.env.NODE_ENV !== \"production\") && checkDuplicatedValue();\n      }\n    } else if (tag === \"select\") {\n      directiveToUse = V_MODEL_SELECT;\n    } else {\n      !!(process.env.NODE_ENV !== \"production\") && checkDuplicatedValue();\n    }\n    if (!isInvalidType) {\n      baseResult.needRuntime = context.helper(directiveToUse);\n    }\n  } else {\n    context.onError(\n      createDOMCompilerError(\n        57,\n        dir.loc\n      )\n    );\n  }\n  baseResult.props = baseResult.props.filter(\n    (p) => !(p.key.type === 4 && p.key.content === \"modelValue\")\n  );\n  return baseResult;\n};\n\nconst isEventOptionModifier = /* @__PURE__ */ makeMap(`passive,once,capture`);\nconst isNonKeyModifier = /* @__PURE__ */ makeMap(\n  // event propagation management\n  `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`\n);\nconst maybeKeyModifier = /* @__PURE__ */ makeMap(\"left,right\");\nconst isKeyboardEvent = /* @__PURE__ */ makeMap(`onkeyup,onkeydown,onkeypress`);\nconst resolveModifiers = (key, modifiers, context, loc) => {\n  const keyModifiers = [];\n  const nonKeyModifiers = [];\n  const eventOptionModifiers = [];\n  for (let i = 0; i < modifiers.length; i++) {\n    const modifier = modifiers[i].content;\n    if (modifier === \"native\" && checkCompatEnabled(\n      \"COMPILER_V_ON_NATIVE\",\n      context,\n      loc\n    )) {\n      eventOptionModifiers.push(modifier);\n    } else if (isEventOptionModifier(modifier)) {\n      eventOptionModifiers.push(modifier);\n    } else {\n      if (maybeKeyModifier(modifier)) {\n        if (isStaticExp(key)) {\n          if (isKeyboardEvent(key.content.toLowerCase())) {\n            keyModifiers.push(modifier);\n          } else {\n            nonKeyModifiers.push(modifier);\n          }\n        } else {\n          keyModifiers.push(modifier);\n          nonKeyModifiers.push(modifier);\n        }\n      } else {\n        if (isNonKeyModifier(modifier)) {\n          nonKeyModifiers.push(modifier);\n        } else {\n          keyModifiers.push(modifier);\n        }\n      }\n    }\n  }\n  return {\n    keyModifiers,\n    nonKeyModifiers,\n    eventOptionModifiers\n  };\n};\nconst transformClick = (key, event) => {\n  const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === \"onclick\";\n  return isStaticClick ? createSimpleExpression(event, true) : key.type !== 4 ? createCompoundExpression([\n    `(`,\n    key,\n    `) === \"onClick\" ? \"${event}\" : (`,\n    key,\n    `)`\n  ]) : key;\n};\nconst transformOn = (dir, node, context) => {\n  return transformOn$1(dir, node, context, (baseResult) => {\n    const { modifiers } = dir;\n    if (!modifiers.length) return baseResult;\n    let { key, value: handlerExp } = baseResult.props[0];\n    const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);\n    if (nonKeyModifiers.includes(\"right\")) {\n      key = transformClick(key, `onContextmenu`);\n    }\n    if (nonKeyModifiers.includes(\"middle\")) {\n      key = transformClick(key, `onMouseup`);\n    }\n    if (nonKeyModifiers.length) {\n      handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [\n        handlerExp,\n        JSON.stringify(nonKeyModifiers)\n      ]);\n    }\n    if (keyModifiers.length && // if event name is dynamic, always wrap with keys guard\n    (!isStaticExp(key) || isKeyboardEvent(key.content.toLowerCase()))) {\n      handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [\n        handlerExp,\n        JSON.stringify(keyModifiers)\n      ]);\n    }\n    if (eventOptionModifiers.length) {\n      const modifierPostfix = eventOptionModifiers.map(capitalize).join(\"\");\n      key = isStaticExp(key) ? createSimpleExpression(`${key.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key, `) + \"${modifierPostfix}\"`]);\n    }\n    return {\n      props: [createObjectProperty(key, handlerExp)]\n    };\n  });\n};\n\nconst transformShow = (dir, node, context) => {\n  const { exp, loc } = dir;\n  if (!exp) {\n    context.onError(\n      createDOMCompilerError(61, loc)\n    );\n  }\n  return {\n    props: [],\n    needRuntime: context.helper(V_SHOW)\n  };\n};\n\nconst transformTransition = (node, context) => {\n  if (node.type === 1 && node.tagType === 1) {\n    const component = context.isBuiltInComponent(node.tag);\n    if (component === TRANSITION) {\n      return () => {\n        if (!node.children.length) {\n          return;\n        }\n        if (hasMultipleChildren(node)) {\n          context.onError(\n            createDOMCompilerError(\n              62,\n              {\n                start: node.children[0].loc.start,\n                end: node.children[node.children.length - 1].loc.end,\n                source: \"\"\n              }\n            )\n          );\n        }\n        const child = node.children[0];\n        if (child.type === 1) {\n          for (const p of child.props) {\n            if (p.type === 7 && p.name === \"show\") {\n              node.props.push({\n                type: 6,\n                name: \"persisted\",\n                nameLoc: node.loc,\n                value: void 0,\n                loc: node.loc\n              });\n            }\n          }\n        }\n      };\n    }\n  }\n};\nfunction hasMultipleChildren(node) {\n  const children = node.children = node.children.filter(\n    (c) => c.type !== 3 && !(c.type === 2 && !c.content.trim())\n  );\n  const child = children[0];\n  return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);\n}\n\nconst ignoreSideEffectTags = (node, context) => {\n  if (node.type === 1 && node.tagType === 0 && (node.tag === \"script\" || node.tag === \"style\")) {\n    !!(process.env.NODE_ENV !== \"production\") && context.onError(\n      createDOMCompilerError(\n        63,\n        node.loc\n      )\n    );\n    context.removeNode();\n  }\n};\n\nfunction isValidHTMLNesting(parent, child) {\n  if (parent in onlyValidChildren) {\n    return onlyValidChildren[parent].has(child);\n  }\n  if (child in onlyValidParents) {\n    return onlyValidParents[child].has(parent);\n  }\n  if (parent in knownInvalidChildren) {\n    if (knownInvalidChildren[parent].has(child)) return false;\n  }\n  if (child in knownInvalidParents) {\n    if (knownInvalidParents[child].has(parent)) return false;\n  }\n  return true;\n}\nconst headings = /* @__PURE__ */ new Set([\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"]);\nconst emptySet = /* @__PURE__ */ new Set([]);\nconst onlyValidChildren = {\n  head: /* @__PURE__ */ new Set([\n    \"base\",\n    \"basefront\",\n    \"bgsound\",\n    \"link\",\n    \"meta\",\n    \"title\",\n    \"noscript\",\n    \"noframes\",\n    \"style\",\n    \"script\",\n    \"template\"\n  ]),\n  optgroup: /* @__PURE__ */ new Set([\"option\"]),\n  select: /* @__PURE__ */ new Set([\"optgroup\", \"option\", \"hr\"]),\n  // table\n  table: /* @__PURE__ */ new Set([\"caption\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"]),\n  tr: /* @__PURE__ */ new Set([\"td\", \"th\"]),\n  colgroup: /* @__PURE__ */ new Set([\"col\"]),\n  tbody: /* @__PURE__ */ new Set([\"tr\"]),\n  thead: /* @__PURE__ */ new Set([\"tr\"]),\n  tfoot: /* @__PURE__ */ new Set([\"tr\"]),\n  // these elements can not have any children elements\n  script: emptySet,\n  iframe: emptySet,\n  option: emptySet,\n  textarea: emptySet,\n  style: emptySet,\n  title: emptySet\n};\nconst onlyValidParents = {\n  // sections\n  html: emptySet,\n  body: /* @__PURE__ */ new Set([\"html\"]),\n  head: /* @__PURE__ */ new Set([\"html\"]),\n  // table\n  td: /* @__PURE__ */ new Set([\"tr\"]),\n  colgroup: /* @__PURE__ */ new Set([\"table\"]),\n  caption: /* @__PURE__ */ new Set([\"table\"]),\n  tbody: /* @__PURE__ */ new Set([\"table\"]),\n  tfoot: /* @__PURE__ */ new Set([\"table\"]),\n  col: /* @__PURE__ */ new Set([\"colgroup\"]),\n  th: /* @__PURE__ */ new Set([\"tr\"]),\n  thead: /* @__PURE__ */ new Set([\"table\"]),\n  tr: /* @__PURE__ */ new Set([\"tbody\", \"thead\", \"tfoot\"]),\n  // data list\n  dd: /* @__PURE__ */ new Set([\"dl\", \"div\"]),\n  dt: /* @__PURE__ */ new Set([\"dl\", \"div\"]),\n  // other\n  figcaption: /* @__PURE__ */ new Set([\"figure\"]),\n  // li: new Set([\"ul\", \"ol\"]),\n  summary: /* @__PURE__ */ new Set([\"details\"]),\n  area: /* @__PURE__ */ new Set([\"map\"])\n};\nconst knownInvalidChildren = {\n  p: /* @__PURE__ */ new Set([\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"blockquote\",\n    \"center\",\n    \"details\",\n    \"dialog\",\n    \"dir\",\n    \"div\",\n    \"dl\",\n    \"fieldset\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"li\",\n    \"main\",\n    \"nav\",\n    \"menu\",\n    \"ol\",\n    \"p\",\n    \"pre\",\n    \"section\",\n    \"table\",\n    \"ul\"\n  ]),\n  svg: /* @__PURE__ */ new Set([\n    \"b\",\n    \"blockquote\",\n    \"br\",\n    \"code\",\n    \"dd\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"hr\",\n    \"i\",\n    \"img\",\n    \"li\",\n    \"menu\",\n    \"meta\",\n    \"ol\",\n    \"p\",\n    \"pre\",\n    \"ruby\",\n    \"s\",\n    \"small\",\n    \"span\",\n    \"strong\",\n    \"sub\",\n    \"sup\",\n    \"table\",\n    \"u\",\n    \"ul\",\n    \"var\"\n  ])\n};\nconst knownInvalidParents = {\n  a: /* @__PURE__ */ new Set([\"a\"]),\n  button: /* @__PURE__ */ new Set([\"button\"]),\n  dd: /* @__PURE__ */ new Set([\"dd\", \"dt\"]),\n  dt: /* @__PURE__ */ new Set([\"dd\", \"dt\"]),\n  form: /* @__PURE__ */ new Set([\"form\"]),\n  li: /* @__PURE__ */ new Set([\"li\"]),\n  h1: headings,\n  h2: headings,\n  h3: headings,\n  h4: headings,\n  h5: headings,\n  h6: headings\n};\n\nconst validateHtmlNesting = (node, context) => {\n  if (node.type === 1 && node.tagType === 0 && context.parent && context.parent.type === 1 && context.parent.tagType === 0 && !isValidHTMLNesting(context.parent.tag, node.tag)) {\n    const error = new SyntaxError(\n      `<${node.tag}> cannot be child of <${context.parent.tag}>, according to HTML specifications. This can cause hydration errors or potentially disrupt future functionality.`\n    );\n    error.loc = node.loc;\n    context.onWarn(error);\n  }\n};\n\nconst DOMNodeTransforms = [\n  transformStyle,\n  ...!!(process.env.NODE_ENV !== \"production\") ? [transformTransition, validateHtmlNesting] : []\n];\nconst DOMDirectiveTransforms = {\n  cloak: noopDirectiveTransform,\n  html: transformVHtml,\n  text: transformVText,\n  model: transformModel,\n  // override compiler-core\n  on: transformOn,\n  // override compiler-core\n  show: transformShow\n};\nfunction compile(src, options = {}) {\n  return baseCompile(\n    src,\n    extend({}, parserOptions, options, {\n      nodeTransforms: [\n        // ignore <script> and <tag>\n        // this is not put inside DOMNodeTransforms because that list is used\n        // by compiler-ssr to generate vnode fallback branches\n        ignoreSideEffectTags,\n        ...DOMNodeTransforms,\n        ...options.nodeTransforms || []\n      ],\n      directiveTransforms: extend(\n        {},\n        DOMDirectiveTransforms,\n        options.directiveTransforms || {}\n      ),\n      transformHoist: null \n    })\n  );\n}\nfunction parse(template, options = {}) {\n  return baseParse(template, extend({}, parserOptions, options));\n}\n\nexport { DOMDirectiveTransforms, DOMErrorCodes, DOMErrorMessages, DOMNodeTransforms, TRANSITION, TRANSITION_GROUP, V_MODEL_CHECKBOX, V_MODEL_DYNAMIC, V_MODEL_RADIO, V_MODEL_SELECT, V_MODEL_TEXT, V_ON_WITH_KEYS, V_ON_WITH_MODIFIERS, V_SHOW, compile, createDOMCompilerError, parse, parserOptions, transformStyle };\n", "/**\n* @vue/server-renderer v3.5.14\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nimport { createVNode, ssrUtils, ssrContextKey, warn as warn$2, Fragment, Static, Comment, Text, mergeProps, createApp, initDirectivesForSSR } from 'vue';\nimport { makeMap, isOn, isRenderableAttrValue, isSVGTag, propsToAttrMap, isBooleanAttr, includeBooleanAttr, isSSRSafeAttrName, escapeHtml, normalizeClass, isString, normalizeStyle, stringifyStyle, isArray, toDisplayString, isFunction, EMPTY_OBJ, getGlobalThis, NOOP, isObject, looseEqual, looseIndexOf, escapeHtmlComment, isPromise, isVoidTag } from '@vue/shared';\nexport { includeBooleanAttr as ssrIncludeBooleanAttr } from '@vue/shared';\n\nconst shouldIgnoreProp = /* @__PURE__ */ makeMap(\n  `,key,ref,innerHTML,textContent,ref_key,ref_for`\n);\nfunction ssrRenderAttrs(props, tag) {\n  let ret = \"\";\n  for (const key in props) {\n    if (shouldIgnoreProp(key) || isOn(key) || tag === \"textarea\" && key === \"value\") {\n      continue;\n    }\n    const value = props[key];\n    if (key === \"class\") {\n      ret += ` class=\"${ssrRenderClass(value)}\"`;\n    } else if (key === \"style\") {\n      ret += ` style=\"${ssrRenderStyle(value)}\"`;\n    } else if (key === \"className\") {\n      ret += ` class=\"${String(value)}\"`;\n    } else {\n      ret += ssrRenderDynamicAttr(key, value, tag);\n    }\n  }\n  return ret;\n}\nfunction ssrRenderDynamicAttr(key, value, tag) {\n  if (!isRenderableAttrValue(value)) {\n    return ``;\n  }\n  const attrKey = tag && (tag.indexOf(\"-\") > 0 || isSVGTag(tag)) ? key : propsToAttrMap[key] || key.toLowerCase();\n  if (isBooleanAttr(attrKey)) {\n    return includeBooleanAttr(value) ? ` ${attrKey}` : ``;\n  } else if (isSSRSafeAttrName(attrKey)) {\n    return value === \"\" ? ` ${attrKey}` : ` ${attrKey}=\"${escapeHtml(value)}\"`;\n  } else {\n    console.warn(\n      `[@vue/server-renderer] Skipped rendering unsafe attribute name: ${attrKey}`\n    );\n    return ``;\n  }\n}\nfunction ssrRenderAttr(key, value) {\n  if (!isRenderableAttrValue(value)) {\n    return ``;\n  }\n  return ` ${key}=\"${escapeHtml(value)}\"`;\n}\nfunction ssrRenderClass(raw) {\n  return escapeHtml(normalizeClass(raw));\n}\nfunction ssrRenderStyle(raw) {\n  if (!raw) {\n    return \"\";\n  }\n  if (isString(raw)) {\n    return escapeHtml(raw);\n  }\n  const styles = normalizeStyle(raw);\n  return escapeHtml(stringifyStyle(styles));\n}\n\nfunction ssrRenderComponent(comp, props = null, children = null, parentComponent = null, slotScopeId) {\n  return renderComponentVNode(\n    createVNode(comp, props, children),\n    parentComponent,\n    slotScopeId\n  );\n}\n\nconst { ensureValidVNode } = ssrUtils;\nfunction ssrRenderSlot(slots, slotName, slotProps, fallbackRenderFn, push, parentComponent, slotScopeId) {\n  push(`<!--[-->`);\n  ssrRenderSlotInner(\n    slots,\n    slotName,\n    slotProps,\n    fallbackRenderFn,\n    push,\n    parentComponent,\n    slotScopeId\n  );\n  push(`<!--]-->`);\n}\nfunction ssrRenderSlotInner(slots, slotName, slotProps, fallbackRenderFn, push, parentComponent, slotScopeId, transition) {\n  const slotFn = slots[slotName];\n  if (slotFn) {\n    const slotBuffer = [];\n    const bufferedPush = (item) => {\n      slotBuffer.push(item);\n    };\n    const ret = slotFn(\n      slotProps,\n      bufferedPush,\n      parentComponent,\n      slotScopeId ? \" \" + slotScopeId : \"\"\n    );\n    if (isArray(ret)) {\n      const validSlotContent = ensureValidVNode(ret);\n      if (validSlotContent) {\n        renderVNodeChildren(\n          push,\n          validSlotContent,\n          parentComponent,\n          slotScopeId\n        );\n      } else if (fallbackRenderFn) {\n        fallbackRenderFn();\n      }\n    } else {\n      let isEmptySlot = true;\n      if (transition) {\n        isEmptySlot = false;\n      } else {\n        for (let i = 0; i < slotBuffer.length; i++) {\n          if (!isComment(slotBuffer[i])) {\n            isEmptySlot = false;\n            break;\n          }\n        }\n      }\n      if (isEmptySlot) {\n        if (fallbackRenderFn) {\n          fallbackRenderFn();\n        }\n      } else {\n        let start = 0;\n        let end = slotBuffer.length;\n        if (transition && slotBuffer[0] === \"<!--[-->\" && slotBuffer[end - 1] === \"<!--]-->\") {\n          start++;\n          end--;\n        }\n        for (let i = start; i < end; i++) {\n          push(slotBuffer[i]);\n        }\n      }\n    }\n  } else if (fallbackRenderFn) {\n    fallbackRenderFn();\n  }\n}\nconst commentTestRE = /^<!--[\\s\\S]*-->$/;\nconst commentRE = /<!--[^]*?-->/gm;\nfunction isComment(item) {\n  if (typeof item !== \"string\" || !commentTestRE.test(item)) return false;\n  if (item.length <= 8) return true;\n  return !item.replace(commentRE, \"\").trim();\n}\n\nfunction ssrRenderTeleport(parentPush, contentRenderFn, target, disabled, parentComponent) {\n  parentPush(\"<!--teleport start-->\");\n  const context = parentComponent.appContext.provides[ssrContextKey];\n  const teleportBuffers = context.__teleportBuffers || (context.__teleportBuffers = {});\n  const targetBuffer = teleportBuffers[target] || (teleportBuffers[target] = []);\n  const bufferIndex = targetBuffer.length;\n  let teleportContent;\n  if (disabled) {\n    contentRenderFn(parentPush);\n    teleportContent = `<!--teleport start anchor--><!--teleport anchor-->`;\n  } else {\n    const { getBuffer, push } = createBuffer();\n    push(`<!--teleport start anchor-->`);\n    contentRenderFn(push);\n    push(`<!--teleport anchor-->`);\n    teleportContent = getBuffer();\n  }\n  targetBuffer.splice(bufferIndex, 0, teleportContent);\n  parentPush(\"<!--teleport end-->\");\n}\n\nfunction ssrInterpolate(value) {\n  return escapeHtml(toDisplayString(value));\n}\n\nfunction isProxy(value) {\n  return value ? !!value[\"__v_raw\"] : false;\n}\nfunction toRaw(observed) {\n  const raw = observed && observed[\"__v_raw\"];\n  return raw ? toRaw(raw) : observed;\n}\n\nfunction isRef(r) {\n  return r ? r[\"__v_isRef\"] === true : false;\n}\n\nconst stack = [];\nfunction pushWarningContext$1(vnode) {\n  stack.push(vnode);\n}\nfunction popWarningContext$1() {\n  stack.pop();\n}\nlet isWarning = false;\nfunction warn$1(msg, ...args) {\n  if (isWarning) return;\n  isWarning = true;\n  const instance = stack.length ? stack[stack.length - 1].component : null;\n  const appWarnHandler = instance && instance.appContext.config.warnHandler;\n  const trace = getComponentTrace();\n  if (appWarnHandler) {\n    callWithErrorHandling(\n      appWarnHandler,\n      instance,\n      11,\n      [\n        // eslint-disable-next-line no-restricted-syntax\n        msg + args.map((a) => {\n          var _a, _b;\n          return (_b = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b : JSON.stringify(a);\n        }).join(\"\"),\n        instance && instance.proxy,\n        trace.map(\n          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`\n        ).join(\"\\n\"),\n        trace\n      ]\n    );\n  } else {\n    const warnArgs = [`[Vue warn]: ${msg}`, ...args];\n    if (trace.length && // avoid spamming console during tests\n    true) {\n      warnArgs.push(`\n`, ...formatTrace(trace));\n    }\n    console.warn(...warnArgs);\n  }\n  isWarning = false;\n}\nfunction getComponentTrace() {\n  let currentVNode = stack[stack.length - 1];\n  if (!currentVNode) {\n    return [];\n  }\n  const normalizedStack = [];\n  while (currentVNode) {\n    const last = normalizedStack[0];\n    if (last && last.vnode === currentVNode) {\n      last.recurseCount++;\n    } else {\n      normalizedStack.push({\n        vnode: currentVNode,\n        recurseCount: 0\n      });\n    }\n    const parentInstance = currentVNode.component && currentVNode.component.parent;\n    currentVNode = parentInstance && parentInstance.vnode;\n  }\n  return normalizedStack;\n}\nfunction formatTrace(trace) {\n  const logs = [];\n  trace.forEach((entry, i) => {\n    logs.push(...i === 0 ? [] : [`\n`], ...formatTraceEntry(entry));\n  });\n  return logs;\n}\nfunction formatTraceEntry({ vnode, recurseCount }) {\n  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\n  const isRoot = vnode.component ? vnode.component.parent == null : false;\n  const open = ` at <${formatComponentName(\n    vnode.component,\n    vnode.type,\n    isRoot\n  )}`;\n  const close = `>` + postfix;\n  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];\n}\nfunction formatProps(props) {\n  const res = [];\n  const keys = Object.keys(props);\n  keys.slice(0, 3).forEach((key) => {\n    res.push(...formatProp(key, props[key]));\n  });\n  if (keys.length > 3) {\n    res.push(` ...`);\n  }\n  return res;\n}\nfunction formatProp(key, value, raw) {\n  if (isString(value)) {\n    value = JSON.stringify(value);\n    return raw ? value : [`${key}=${value}`];\n  } else if (typeof value === \"number\" || typeof value === \"boolean\" || value == null) {\n    return raw ? value : [`${key}=${value}`];\n  } else if (isRef(value)) {\n    value = formatProp(key, toRaw(value.value), true);\n    return raw ? value : [`${key}=Ref<`, value, `>`];\n  } else if (isFunction(value)) {\n    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\n  } else {\n    value = toRaw(value);\n    return raw ? value : [`${key}=`, value];\n  }\n}\n\nconst ErrorTypeStrings = {\n  [\"sp\"]: \"serverPrefetch hook\",\n  [\"bc\"]: \"beforeCreate hook\",\n  [\"c\"]: \"created hook\",\n  [\"bm\"]: \"beforeMount hook\",\n  [\"m\"]: \"mounted hook\",\n  [\"bu\"]: \"beforeUpdate hook\",\n  [\"u\"]: \"updated\",\n  [\"bum\"]: \"beforeUnmount hook\",\n  [\"um\"]: \"unmounted hook\",\n  [\"a\"]: \"activated hook\",\n  [\"da\"]: \"deactivated hook\",\n  [\"ec\"]: \"errorCaptured hook\",\n  [\"rtc\"]: \"renderTracked hook\",\n  [\"rtg\"]: \"renderTriggered hook\",\n  [0]: \"setup function\",\n  [1]: \"render function\",\n  [2]: \"watcher getter\",\n  [3]: \"watcher callback\",\n  [4]: \"watcher cleanup function\",\n  [5]: \"native event handler\",\n  [6]: \"component event handler\",\n  [7]: \"vnode hook\",\n  [8]: \"directive hook\",\n  [9]: \"transition hook\",\n  [10]: \"app errorHandler\",\n  [11]: \"app warnHandler\",\n  [12]: \"ref function\",\n  [13]: \"async component loader\",\n  [14]: \"scheduler flush\",\n  [15]: \"component update\",\n  [16]: \"app unmount cleanup function\"\n};\nfunction callWithErrorHandling(fn, instance, type, args) {\n  try {\n    return args ? fn(...args) : fn();\n  } catch (err) {\n    handleError(err, instance, type);\n  }\n}\nfunction handleError(err, instance, type, throwInDev = true) {\n  const contextVNode = instance ? instance.vnode : null;\n  const { errorHandler, throwUnhandledErrorInProduction } = instance && instance.appContext.config || EMPTY_OBJ;\n  if (instance) {\n    let cur = instance.parent;\n    const exposedInstance = instance.proxy;\n    const errorInfo = !!(process.env.NODE_ENV !== \"production\") ? ErrorTypeStrings[type] : `https://vuejs.org/error-reference/#runtime-${type}`;\n    while (cur) {\n      const errorCapturedHooks = cur.ec;\n      if (errorCapturedHooks) {\n        for (let i = 0; i < errorCapturedHooks.length; i++) {\n          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {\n            return;\n          }\n        }\n      }\n      cur = cur.parent;\n    }\n    if (errorHandler) {\n      callWithErrorHandling(errorHandler, null, 10, [\n        err,\n        exposedInstance,\n        errorInfo\n      ]);\n      return;\n    }\n  }\n  logError(err, type, contextVNode, throwInDev, throwUnhandledErrorInProduction);\n}\nfunction logError(err, type, contextVNode, throwInDev = true, throwInProd = false) {\n  if (!!(process.env.NODE_ENV !== \"production\")) {\n    const info = ErrorTypeStrings[type];\n    if (contextVNode) {\n      pushWarningContext$1(contextVNode);\n    }\n    warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\n    if (contextVNode) {\n      popWarningContext$1();\n    }\n    if (throwInDev) {\n      throw err;\n    } else {\n      console.error(err);\n    }\n  } else if (throwInProd) {\n    throw err;\n  } else {\n    console.error(err);\n  }\n}\n\nlet devtools;\nlet buffer = [];\nfunction setDevtoolsHook(hook, target) {\n  var _a, _b;\n  devtools = hook;\n  if (devtools) {\n    devtools.enabled = true;\n    buffer.forEach(({ event, args }) => devtools.emit(event, ...args));\n    buffer = [];\n  } else if (\n    // handle late devtools injection - only do this if we are in an actual\n    // browser environment to avoid the timer handle stalling test runner exit\n    // (#4815)\n    typeof window !== \"undefined\" && // some envs mock window but not fully\n    window.HTMLElement && // also exclude jsdom\n    // eslint-disable-next-line no-restricted-syntax\n    !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes(\"jsdom\"))\n  ) {\n    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];\n    replay.push((newHook) => {\n      setDevtoolsHook(newHook, target);\n    });\n    setTimeout(() => {\n      if (!devtools) {\n        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;\n        buffer = [];\n      }\n    }, 3e3);\n  } else {\n    buffer = [];\n  }\n}\n\n{\n  const g = getGlobalThis();\n  const registerGlobalSetter = (key, setter) => {\n    let setters;\n    if (!(setters = g[key])) setters = g[key] = [];\n    setters.push(setter);\n    return (v) => {\n      if (setters.length > 1) setters.forEach((set) => set(v));\n      else setters[0](v);\n    };\n  };\n  registerGlobalSetter(\n    `__VUE_INSTANCE_SETTERS__`,\n    (v) => v\n  );\n  registerGlobalSetter(\n    `__VUE_SSR_SETTERS__`,\n    (v) => v\n  );\n}\n!!(process.env.NODE_ENV !== \"production\") ? {\n  } : {\n  };\nconst classifyRE = /(?:^|[-_])(\\w)/g;\nconst classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, \"\");\nfunction getComponentName(Component, includeInferred = true) {\n  return isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;\n}\nfunction formatComponentName(instance, Component, isRoot = false) {\n  let name = getComponentName(Component);\n  if (!name && Component.__file) {\n    const match = Component.__file.match(/([^/\\\\]+)\\.\\w+$/);\n    if (match) {\n      name = match[1];\n    }\n  }\n  if (!name && instance && instance.parent) {\n    const inferFromRegistry = (registry) => {\n      for (const key in registry) {\n        if (registry[key] === Component) {\n          return key;\n        }\n      }\n    };\n    name = inferFromRegistry(\n      instance.components || instance.parent.type.components\n    ) || inferFromRegistry(instance.appContext.components);\n  }\n  return name ? classify(name) : isRoot ? `App` : `Anonymous`;\n}\nfunction isClassComponent(value) {\n  return isFunction(value) && \"__vccOpts\" in value;\n}\n\nconst warn = !!(process.env.NODE_ENV !== \"production\") ? warn$1 : NOOP;\n!!(process.env.NODE_ENV !== \"production\") || true ? devtools : void 0;\n!!(process.env.NODE_ENV !== \"production\") || true ? setDevtoolsHook : NOOP;\n\nfunction ssrRenderList(source, renderItem) {\n  if (isArray(source) || isString(source)) {\n    for (let i = 0, l = source.length; i < l; i++) {\n      renderItem(source[i], i);\n    }\n  } else if (typeof source === \"number\") {\n    if (!!(process.env.NODE_ENV !== \"production\") && !Number.isInteger(source)) {\n      warn(`The v-for range expect an integer value but got ${source}.`);\n      return;\n    }\n    for (let i = 0; i < source; i++) {\n      renderItem(i + 1, i);\n    }\n  } else if (isObject(source)) {\n    if (source[Symbol.iterator]) {\n      const arr = Array.from(source);\n      for (let i = 0, l = arr.length; i < l; i++) {\n        renderItem(arr[i], i);\n      }\n    } else {\n      const keys = Object.keys(source);\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const key = keys[i];\n        renderItem(source[key], key, i);\n      }\n    }\n  }\n}\n\nasync function ssrRenderSuspense(push, { default: renderContent }) {\n  if (renderContent) {\n    renderContent();\n  } else {\n    push(`<!---->`);\n  }\n}\n\nfunction ssrGetDirectiveProps(instance, dir, value, arg, modifiers = {}) {\n  if (typeof dir !== \"function\" && dir.getSSRProps) {\n    return dir.getSSRProps(\n      {\n        dir,\n        instance: ssrUtils.getComponentPublicInstance(instance.$),\n        value,\n        oldValue: void 0,\n        arg,\n        modifiers\n      },\n      null\n    ) || {};\n  }\n  return {};\n}\n\nconst ssrLooseEqual = looseEqual;\nfunction ssrLooseContain(arr, value) {\n  return looseIndexOf(arr, value) > -1;\n}\nfunction ssrRenderDynamicModel(type, model, value) {\n  switch (type) {\n    case \"radio\":\n      return looseEqual(model, value) ? \" checked\" : \"\";\n    case \"checkbox\":\n      return (isArray(model) ? ssrLooseContain(model, value) : model) ? \" checked\" : \"\";\n    default:\n      return ssrRenderAttr(\"value\", model);\n  }\n}\nfunction ssrGetDynamicModelProps(existingProps = {}, model) {\n  const { type, value } = existingProps;\n  switch (type) {\n    case \"radio\":\n      return looseEqual(model, value) ? { checked: true } : null;\n    case \"checkbox\":\n      return (isArray(model) ? ssrLooseContain(model, value) : model) ? { checked: true } : null;\n    default:\n      return { value: model };\n  }\n}\n\nfunction ssrCompile(template, instance) {\n  {\n    throw new Error(\n      `On-the-fly template compilation is not supported in the ESM build of @vue/server-renderer. All templates must be pre-compiled into render functions.`\n    );\n  }\n}\n\nconst {\n  createComponentInstance,\n  setCurrentRenderingInstance,\n  setupComponent,\n  renderComponentRoot,\n  normalizeVNode,\n  pushWarningContext,\n  popWarningContext\n} = ssrUtils;\nfunction createBuffer() {\n  let appendable = false;\n  const buffer = [];\n  return {\n    getBuffer() {\n      return buffer;\n    },\n    push(item) {\n      const isStringItem = isString(item);\n      if (appendable && isStringItem) {\n        buffer[buffer.length - 1] += item;\n        return;\n      }\n      buffer.push(item);\n      appendable = isStringItem;\n      if (isPromise(item) || isArray(item) && item.hasAsync) {\n        buffer.hasAsync = true;\n      }\n    }\n  };\n}\nfunction renderComponentVNode(vnode, parentComponent = null, slotScopeId) {\n  const instance = vnode.component = createComponentInstance(\n    vnode,\n    parentComponent,\n    null\n  );\n  if (!!(process.env.NODE_ENV !== \"production\")) pushWarningContext(vnode);\n  const res = setupComponent(\n    instance,\n    true\n    /* isSSR */\n  );\n  if (!!(process.env.NODE_ENV !== \"production\")) popWarningContext();\n  const hasAsyncSetup = isPromise(res);\n  let prefetches = instance.sp;\n  if (hasAsyncSetup || prefetches) {\n    const p = Promise.resolve(res).then(() => {\n      if (hasAsyncSetup) prefetches = instance.sp;\n      if (prefetches) {\n        return Promise.all(\n          prefetches.map((prefetch) => prefetch.call(instance.proxy))\n        );\n      }\n    }).catch(NOOP);\n    return p.then(() => renderComponentSubTree(instance, slotScopeId));\n  } else {\n    return renderComponentSubTree(instance, slotScopeId);\n  }\n}\nfunction renderComponentSubTree(instance, slotScopeId) {\n  if (!!(process.env.NODE_ENV !== \"production\")) pushWarningContext(instance.vnode);\n  const comp = instance.type;\n  const { getBuffer, push } = createBuffer();\n  if (isFunction(comp)) {\n    let root = renderComponentRoot(instance);\n    if (!comp.props) {\n      for (const key in instance.attrs) {\n        if (key.startsWith(`data-v-`)) {\n          (root.props || (root.props = {}))[key] = ``;\n        }\n      }\n    }\n    renderVNode(push, instance.subTree = root, instance, slotScopeId);\n  } else {\n    if ((!instance.render || instance.render === NOOP) && !instance.ssrRender && !comp.ssrRender && isString(comp.template)) {\n      comp.ssrRender = ssrCompile(comp.template);\n    }\n    const ssrRender = instance.ssrRender || comp.ssrRender;\n    if (ssrRender) {\n      let attrs = instance.inheritAttrs !== false ? instance.attrs : void 0;\n      let hasCloned = false;\n      let cur = instance;\n      while (true) {\n        const scopeId = cur.vnode.scopeId;\n        if (scopeId) {\n          if (!hasCloned) {\n            attrs = { ...attrs };\n            hasCloned = true;\n          }\n          attrs[scopeId] = \"\";\n        }\n        const parent = cur.parent;\n        if (parent && parent.subTree && parent.subTree === cur.vnode) {\n          cur = parent;\n        } else {\n          break;\n        }\n      }\n      if (slotScopeId) {\n        if (!hasCloned) attrs = { ...attrs };\n        const slotScopeIdList = slotScopeId.trim().split(\" \");\n        for (let i = 0; i < slotScopeIdList.length; i++) {\n          attrs[slotScopeIdList[i]] = \"\";\n        }\n      }\n      const prev = setCurrentRenderingInstance(instance);\n      try {\n        ssrRender(\n          instance.proxy,\n          push,\n          instance,\n          attrs,\n          // compiler-optimized bindings\n          instance.props,\n          instance.setupState,\n          instance.data,\n          instance.ctx\n        );\n      } finally {\n        setCurrentRenderingInstance(prev);\n      }\n    } else if (instance.render && instance.render !== NOOP) {\n      renderVNode(\n        push,\n        instance.subTree = renderComponentRoot(instance),\n        instance,\n        slotScopeId\n      );\n    } else {\n      const componentName = comp.name || comp.__file || `<Anonymous>`;\n      warn$2(`Component ${componentName} is missing template or render function.`);\n      push(`<!---->`);\n    }\n  }\n  if (!!(process.env.NODE_ENV !== \"production\")) popWarningContext();\n  return getBuffer();\n}\nfunction renderVNode(push, vnode, parentComponent, slotScopeId) {\n  const { type, shapeFlag, children, dirs, props } = vnode;\n  if (dirs) {\n    vnode.props = applySSRDirectives(vnode, props, dirs);\n  }\n  switch (type) {\n    case Text:\n      push(escapeHtml(children));\n      break;\n    case Comment:\n      push(\n        children ? `<!--${escapeHtmlComment(children)}-->` : `<!---->`\n      );\n      break;\n    case Static:\n      push(children);\n      break;\n    case Fragment:\n      if (vnode.slotScopeIds) {\n        slotScopeId = (slotScopeId ? slotScopeId + \" \" : \"\") + vnode.slotScopeIds.join(\" \");\n      }\n      push(`<!--[-->`);\n      renderVNodeChildren(\n        push,\n        children,\n        parentComponent,\n        slotScopeId\n      );\n      push(`<!--]-->`);\n      break;\n    default:\n      if (shapeFlag & 1) {\n        renderElementVNode(push, vnode, parentComponent, slotScopeId);\n      } else if (shapeFlag & 6) {\n        push(renderComponentVNode(vnode, parentComponent, slotScopeId));\n      } else if (shapeFlag & 64) {\n        renderTeleportVNode(push, vnode, parentComponent, slotScopeId);\n      } else if (shapeFlag & 128) {\n        renderVNode(push, vnode.ssContent, parentComponent, slotScopeId);\n      } else {\n        warn$2(\n          \"[@vue/server-renderer] Invalid VNode type:\",\n          type,\n          `(${typeof type})`\n        );\n      }\n  }\n}\nfunction renderVNodeChildren(push, children, parentComponent, slotScopeId) {\n  for (let i = 0; i < children.length; i++) {\n    renderVNode(push, normalizeVNode(children[i]), parentComponent, slotScopeId);\n  }\n}\nfunction renderElementVNode(push, vnode, parentComponent, slotScopeId) {\n  const tag = vnode.type;\n  let { props, children, shapeFlag, scopeId } = vnode;\n  let openTag = `<${tag}`;\n  if (props) {\n    openTag += ssrRenderAttrs(props, tag);\n  }\n  if (scopeId) {\n    openTag += ` ${scopeId}`;\n  }\n  let curParent = parentComponent;\n  let curVnode = vnode;\n  while (curParent && curVnode === curParent.subTree) {\n    curVnode = curParent.vnode;\n    if (curVnode.scopeId) {\n      openTag += ` ${curVnode.scopeId}`;\n    }\n    curParent = curParent.parent;\n  }\n  if (slotScopeId) {\n    openTag += ` ${slotScopeId}`;\n  }\n  push(openTag + `>`);\n  if (!isVoidTag(tag)) {\n    let hasChildrenOverride = false;\n    if (props) {\n      if (props.innerHTML) {\n        hasChildrenOverride = true;\n        push(props.innerHTML);\n      } else if (props.textContent) {\n        hasChildrenOverride = true;\n        push(escapeHtml(props.textContent));\n      } else if (tag === \"textarea\" && props.value) {\n        hasChildrenOverride = true;\n        push(escapeHtml(props.value));\n      }\n    }\n    if (!hasChildrenOverride) {\n      if (shapeFlag & 8) {\n        push(escapeHtml(children));\n      } else if (shapeFlag & 16) {\n        renderVNodeChildren(\n          push,\n          children,\n          parentComponent,\n          slotScopeId\n        );\n      }\n    }\n    push(`</${tag}>`);\n  }\n}\nfunction applySSRDirectives(vnode, rawProps, dirs) {\n  const toMerge = [];\n  for (let i = 0; i < dirs.length; i++) {\n    const binding = dirs[i];\n    const {\n      dir: { getSSRProps }\n    } = binding;\n    if (getSSRProps) {\n      const props = getSSRProps(binding, vnode);\n      if (props) toMerge.push(props);\n    }\n  }\n  return mergeProps(rawProps || {}, ...toMerge);\n}\nfunction renderTeleportVNode(push, vnode, parentComponent, slotScopeId) {\n  const target = vnode.props && vnode.props.to;\n  const disabled = vnode.props && vnode.props.disabled;\n  if (!target) {\n    if (!disabled) {\n      warn$2(`[@vue/server-renderer] Teleport is missing target prop.`);\n    }\n    return [];\n  }\n  if (!isString(target)) {\n    warn$2(\n      `[@vue/server-renderer] Teleport target must be a query selector string.`\n    );\n    return [];\n  }\n  ssrRenderTeleport(\n    push,\n    (push2) => {\n      renderVNodeChildren(\n        push2,\n        vnode.children,\n        parentComponent,\n        slotScopeId\n      );\n    },\n    target,\n    disabled || disabled === \"\",\n    parentComponent\n  );\n}\n\nconst { isVNode: isVNode$1 } = ssrUtils;\nfunction nestedUnrollBuffer(buffer, parentRet, startIndex) {\n  if (!buffer.hasAsync) {\n    return parentRet + unrollBufferSync$1(buffer);\n  }\n  let ret = parentRet;\n  for (let i = startIndex; i < buffer.length; i += 1) {\n    const item = buffer[i];\n    if (isString(item)) {\n      ret += item;\n      continue;\n    }\n    if (isPromise(item)) {\n      return item.then((nestedItem) => {\n        buffer[i] = nestedItem;\n        return nestedUnrollBuffer(buffer, ret, i);\n      });\n    }\n    const result = nestedUnrollBuffer(item, ret, 0);\n    if (isPromise(result)) {\n      return result.then((nestedItem) => {\n        buffer[i] = nestedItem;\n        return nestedUnrollBuffer(buffer, \"\", i);\n      });\n    }\n    ret = result;\n  }\n  return ret;\n}\nfunction unrollBuffer$1(buffer) {\n  return nestedUnrollBuffer(buffer, \"\", 0);\n}\nfunction unrollBufferSync$1(buffer) {\n  let ret = \"\";\n  for (let i = 0; i < buffer.length; i++) {\n    let item = buffer[i];\n    if (isString(item)) {\n      ret += item;\n    } else {\n      ret += unrollBufferSync$1(item);\n    }\n  }\n  return ret;\n}\nasync function renderToString(input, context = {}) {\n  if (isVNode$1(input)) {\n    return renderToString(createApp({ render: () => input }), context);\n  }\n  const vnode = createVNode(input._component, input._props);\n  vnode.appContext = input._context;\n  input.provide(ssrContextKey, context);\n  const buffer = await renderComponentVNode(vnode);\n  const result = await unrollBuffer$1(buffer);\n  await resolveTeleports(context);\n  if (context.__watcherHandles) {\n    for (const unwatch of context.__watcherHandles) {\n      unwatch();\n    }\n  }\n  return result;\n}\nasync function resolveTeleports(context) {\n  if (context.__teleportBuffers) {\n    context.teleports = context.teleports || {};\n    for (const key in context.__teleportBuffers) {\n      context.teleports[key] = await unrollBuffer$1(\n        await Promise.all([context.__teleportBuffers[key]])\n      );\n    }\n  }\n}\n\nconst { isVNode } = ssrUtils;\nasync function unrollBuffer(buffer, stream) {\n  if (buffer.hasAsync) {\n    for (let i = 0; i < buffer.length; i++) {\n      let item = buffer[i];\n      if (isPromise(item)) {\n        item = await item;\n      }\n      if (isString(item)) {\n        stream.push(item);\n      } else {\n        await unrollBuffer(item, stream);\n      }\n    }\n  } else {\n    unrollBufferSync(buffer, stream);\n  }\n}\nfunction unrollBufferSync(buffer, stream) {\n  for (let i = 0; i < buffer.length; i++) {\n    let item = buffer[i];\n    if (isString(item)) {\n      stream.push(item);\n    } else {\n      unrollBufferSync(item, stream);\n    }\n  }\n}\nfunction renderToSimpleStream(input, context, stream) {\n  if (isVNode(input)) {\n    return renderToSimpleStream(\n      createApp({ render: () => input }),\n      context,\n      stream\n    );\n  }\n  const vnode = createVNode(input._component, input._props);\n  vnode.appContext = input._context;\n  input.provide(ssrContextKey, context);\n  Promise.resolve(renderComponentVNode(vnode)).then((buffer) => unrollBuffer(buffer, stream)).then(() => resolveTeleports(context)).then(() => {\n    if (context.__watcherHandles) {\n      for (const unwatch of context.__watcherHandles) {\n        unwatch();\n      }\n    }\n  }).then(() => stream.push(null)).catch((error) => {\n    stream.destroy(error);\n  });\n  return stream;\n}\nfunction renderToStream(input, context = {}) {\n  console.warn(\n    `[@vue/server-renderer] renderToStream is deprecated - use renderToNodeStream instead.`\n  );\n  return renderToNodeStream(input, context);\n}\nfunction renderToNodeStream(input, context = {}) {\n  {\n    throw new Error(\n      `ESM build of renderToStream() does not support renderToNodeStream(). Use pipeToNodeWritable() with an existing Node.js Writable stream instance instead.`\n    );\n  }\n}\nfunction pipeToNodeWritable(input, context = {}, writable) {\n  renderToSimpleStream(input, context, {\n    push(content) {\n      if (content != null) {\n        writable.write(content);\n      } else {\n        writable.end();\n      }\n    },\n    destroy(err) {\n      writable.destroy(err);\n    }\n  });\n}\nfunction renderToWebStream(input, context = {}) {\n  if (typeof ReadableStream !== \"function\") {\n    throw new Error(\n      `ReadableStream constructor is not available in the global scope. If the target environment does support web streams, consider using pipeToWebWritable() with an existing WritableStream instance instead.`\n    );\n  }\n  const encoder = new TextEncoder();\n  let cancelled = false;\n  return new ReadableStream({\n    start(controller) {\n      renderToSimpleStream(input, context, {\n        push(content) {\n          if (cancelled) return;\n          if (content != null) {\n            controller.enqueue(encoder.encode(content));\n          } else {\n            controller.close();\n          }\n        },\n        destroy(err) {\n          controller.error(err);\n        }\n      });\n    },\n    cancel() {\n      cancelled = true;\n    }\n  });\n}\nfunction pipeToWebWritable(input, context = {}, writable) {\n  const writer = writable.getWriter();\n  const encoder = new TextEncoder();\n  let hasReady = false;\n  try {\n    hasReady = isPromise(writer.ready);\n  } catch (e) {\n  }\n  renderToSimpleStream(input, context, {\n    async push(content) {\n      if (hasReady) {\n        await writer.ready;\n      }\n      if (content != null) {\n        return writer.write(encoder.encode(content));\n      } else {\n        return writer.close();\n      }\n    },\n    destroy(err) {\n      console.log(err);\n      writer.close();\n    }\n  });\n}\n\ninitDirectivesForSSR();\n\nexport { pipeToNodeWritable, pipeToWebWritable, renderToNodeStream, renderToSimpleStream, renderToStream, renderToString, renderToWebStream, ssrGetDirectiveProps, ssrGetDynamicModelProps, ssrInterpolate, ssrLooseContain, ssrLooseEqual, ssrRenderAttr, ssrRenderAttrs, ssrRenderClass, ssrRenderComponent, ssrRenderDynamicAttr, ssrRenderDynamicModel, ssrRenderList, ssrRenderSlot, ssrRenderSlotInner, ssrRenderStyle, ssrRenderSuspense, ssrRenderTeleport, renderVNode as ssrRenderVNode };\n"],
  "mappings": "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AE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,IAAG,MAAK,GAAE,KAAI,MAAK,IAAG,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KA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",
  "names": ["_a", "CharCodes", "BinTrieFlags", "EntityDecoderState", "DecodingMode", "EntityDecoder", "decoder", "Position", "constructor", "line", "col", "index", "column", "SourceLocation", "start", "end", "filename", "identifierName", "createPositionWithColumnOffset", "position", "columnOffset", "code", "ModuleErrors", "ImportMetaOutsideModule", "message", "ImportOutsideModule", "NodeDescriptions", "ArrayPattern", "AssignmentExpression", "AssignmentPattern", "ArrowFunctionExpression", "ConditionalExpression", "CatchClause", "ForOfStatement", "ForInStatement", "ForStatement", "FormalParameters", "Identifier", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ObjectPattern", "ParenthesizedExpression", "RestElement", "UpdateExpression", "true", "false", "VariableDeclarator", "YieldExpression", "toNodeDescription", "node", "type", "prefix", "StandardErrors", "AccessorIsGenerator", "kind", "ArgumentsInClass", "AsyncFunctionInSingleStatementContext", "AwaitBindingIdentifier", "AwaitBindingIdentifierInStaticBlock", "AwaitExpressionFormalParameter", "AwaitUsingNotInAsyncContext", "AwaitNotInAsyncContext", "BadGetterArity", "BadSetterArity", "BadSetterRestParameter", "ConstructorClassField", "ConstructorClassPrivateField", "ConstructorIsAccessor", "ConstructorIsAsync", "ConstructorIsGenerator", "DeclarationMissingInitializer", "DecoratorArgumentsOutsideParentheses", "DecoratorBeforeExport", "DecoratorsBeforeAfterExport", "DecoratorConstructor", "DecoratorExportClass", "DecoratorSemicolon", "DecoratorStaticBlock", "DeferImportRequiresNamespace", "DeletePrivateField", "DestructureNamedImport", "DuplicateConstructor", "DuplicateDefaultExport", "DuplicateExport", "exportName", "DuplicateProto", "DuplicateRegExpFlags", "DynamicImportPhaseRequiresImportExpressions", "phase", "ElementAfterRest", "EscapedCharNotAnIdentifier", "ExportBindingIsString", "localName", "ExportDefaultFromAsIdentifier", "ForInOfLoopInitializer", "ForInUsing", "ForOfAsync", "ForOfLet", "GeneratorInSingleStatementContext", "IllegalBreakContinue", "IllegalLanguageModeDirective", "IllegalReturn", "ImportAttributesUseAssert", "ImportBindingIsString", "importName", "ImportCallArity", "ImportCallNotNewExpression", "ImportCallSpreadArgument", "ImportJSONBindingNotDefault", "ImportReflectionHasAssertion", "ImportReflectionNotBinding", "IncompatibleRegExpUVFlags", "InvalidBigIntLiteral", "InvalidCodePoint", "InvalidCoverInitializedName", "InvalidDecimal", "InvalidDigit", "radix", "InvalidEscapeSequence", "InvalidEscapeSequenceTemplate", "InvalidEscapedReservedWord", "reservedWord", "InvalidIdentifier", "InvalidLhs", "ancestor", "InvalidLhsBinding", "InvalidLhsOptionalChaining", "InvalidNumber", "InvalidOrMissingExponent", "InvalidOrUnexpectedToken", "unexpected", "InvalidParenthesizedAssignment", "InvalidPrivateFieldResolution", "InvalidPropertyBindingPattern", "InvalidRecordProperty", "InvalidRestAssignmentPattern", "LabelRedeclaration", "labelName", "LetInLexicalBinding", "LineTerminatorBeforeArrow", "MalformedRegExpFlags", "MissingClassName", "MissingEqInAssignment", "MissingSemicolon", "MissingPlugin", "missingPlugin", "map", "name", "JSON", "stringify", "join", "MissingOneOfPlugins", "MissingUnicodeEscape", "MixingCoalesceWithLogical", "ModuleAttributeDifferentFromType", "ModuleAttributeInvalidValue", "ModuleAttributesWithDuplicateKeys", "key", "ModuleExportNameHasLoneSurrogate", "surrogateCharCode", "toString", "ModuleExportUndefined", "MultipleDefaultsInSwitch", "NewlineAfterThrow", "NoCatchOrFinally", "NumberIdentifier", "NumericSeparatorInEscapeSequence", "ObsoleteAwaitStar", "OptionalChainingNoNew", "OptionalChainingNoTemplate", "OverrideOnConstructor", "ParamDupe", "PatternHasAccessor", "PatternHasMethod", "PrivateInExpectedIn", "PrivateNameRedeclaration", "RecordExpressionBarIncorrectEndSyntaxType", "RecordExpressionBarIncorrectStartSyntaxType", "RecordExpressionHashIncorrectStartSyntaxType", "RecordNoProto", "RestTrailingComma", "SloppyFunction", "SloppyFunctionAnnexB", "SourcePhaseImportRequiresDefault", "StaticPrototype", "SuperNotAllowed", "SuperPrivateField", "TrailingDecorator", "TupleExpressionBarIncorrectEndSyntaxType", "TupleExpressionBarIncorrectStartSyntaxType", "TupleExpressionHashIncorrectStartSyntaxType", "UnexpectedArgumentPlaceholder", "UnexpectedAwaitAfterPipelineBody", "UnexpectedDigitAfterHash", "UnexpectedImportExport", "UnexpectedKeyword", "keyword", "UnexpectedLeadingDecorator", "UnexpectedLexicalDeclaration", "UnexpectedNewTarget", "UnexpectedNumericSeparator", "UnexpectedPrivateField", "UnexpectedReservedWord", "UnexpectedSuper", "UnexpectedToken", "expected", "UnexpectedTokenUnaryExponentiation", "UnexpectedUsingDeclaration", "UnsupportedBind", "UnsupportedDecoratorExport", "UnsupportedDefaultExport", "UnsupportedImport", "UnsupportedMetaProperty", "target", "onlyValidPropertyName", "UnsupportedParameterDecorator", "UnsupportedPropertyDecorator", "UnsupportedSuper", "UnterminatedComment", "UnterminatedRegExp", "UnterminatedString", "UnterminatedTemplate", "UsingDeclarationExport", "UsingDeclarationHasBindingPattern", "VarRedeclaration", "YieldBindingIdentifier", "YieldInParameter", "YieldNotInGeneratorFunction", "ZeroDigitNumericSeparator", "StrictModeErrors", "StrictDelete", "StrictEvalArguments", "referenceName", "StrictEvalArgumentsBinding", "bindingName", "StrictFunction", "StrictNumericEscape", "StrictOctalLiteral", "StrictWith", "UnparenthesizedPipeBodyDescriptions", "Set", "Object", "assign", "PipeBodyIsTighter", "PipeTopicRequiresHackPipes", "PipeTopicUnbound", "PipeTopicUnconfiguredToken", "token", "PipeTopicUnused", "PipeUnparenthesizedBody", "PipelineBodyNoArrow", "PipelineBodySequenceExpression", "PipelineHeadSequenceExpression", "PipelineTopicUnused", "PrimaryTopicNotAllowed", "PrimaryTopicRequiresSmartPipeline", "defineHidden", "obj", "value", "defineProperty", "enumerable", "configurable", "toParseErrorConstructor", "toMessage", "reasonCode", "syntaxPlugin", "hasMissingPlugin", "oldReasonCodes", "AccessorCannotDeclareThisParameter", "AccessorCannotHaveTypeParameters", "ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference", "SetAccessorCannotHaveOptionalParameter", "SetAccessorCannotHaveRestParameter", "SetAccessorCannotHaveReturnType", "loc", "details", "error", "SyntaxError", "pos", "clone", "overrides", "_overrides$loc", "get", "set", "writable", "ParseErrorEnum", "argument", "Array", "isArray", "parseErrorTemplates", "ParseErrorConstructors", "keys", "template", "_ref", "rest", "_objectWithoutPropertiesLoose", "_excluded", "Errors", "PipelineOperatorErrors", "createDefaultOptions", "sourceType", "sourceFilename", "undefined", "startIndex", "startColumn", "startLine", "allowAwaitOutsideFunction", "allowReturnOutsideFunction", "allowNewTargetOutsideFunction", "allowImportExportEverywhere", "allowSuperOutsideMethod", "allowUndeclaredExports", "allowYieldOutsideFunction", "plugins", "strictMode", "ranges", "tokens", "createImportExpressions", "createParenthesizedExpressions", "errorRecovery", "attachComment", "annexB", "getOptions", "opts", "options", "Error", "toUnenumerable", "object", "toESTreeLocation", "estree", "superClass", "ESTreeParserMixin", "parse", "file", "optionFlags", "parseRegExpLiteral", "pattern", "flags", "regex", "RegExp", "_", "estreeParseLiteral", "parseBigIntLiteral", "bigInt", "BigInt", "_unused", "bigint", "String", "parseDecimalLiteral", "decimal", "parseLiteral", "parseStringLiteral", "parseNumericLiteral", "parseNullLiteral", "parseBooleanLiteral", "estreeParseChainExpression", "endLoc", "chain", "startNodeAtNode", "expression", "finishNodeAt", "directiveToStmt", "directive", "castNodeTo", "raw", "extra", "expressionValue", "stmt", "rawValue", "fillOptionalPropertiesForTSESLint", "cloneEstreeStringLiteral", "range", "cloned", "create", "prototype", "initFunction", "isAsync", "checkDeclaration", "isObjectProperty", "getObjectOrClassMethodParams", "method", "params", "isValidDirective", "_stmt$expression$extr", "parenthesized", "parseBlockBody", "allowDirectives", "topLevel", "afterBlockParse", "directiveStatements", "directives", "d", "body", "concat", "parsePrivateName", "getPluginOption", "convertPrivateNameToPrivateIdentifier", "getPrivateNameSV", "id", "isPrivateName", "parseFunctionBody", "allowExpression", "isMethod", "parseMethod", "isGenerator", "isConstructor", "allowDirectSuper", "inClassScope", "funcNode", "startNode", "typeParameters", "resetStartLocationFromNode", "valueNode", "computed", "shorthand", "finishNode", "nameIsConstructor", "parseClassProperty", "args", "propertyNode", "parseClassPrivateProperty", "parseClassAccessorProperty", "accessorPropertyNode", "abstract", "hasPlugin", "parseObjectProperty", "prop", "startLoc", "isPattern", "refExpressionErrors", "finishObjectProperty", "isValidLVal", "isUnparenthesizedInAssign", "binding", "isAssignable", "isBinding", "toAssignable", "isLHS", "classScope", "usePrivateName", "toAssignableObjectExpressionProp", "isLast", "raise", "finishCallExpression", "unfinished", "optional", "callee", "_ref2", "source", "arguments", "attributes", "toReferencedArguments", "parseExport", "decorators", "exportStartLoc", "state", "lastTokStartLoc", "exported", "specifiers", "length", "_declaration$decorato", "declaration", "resetStartLocation", "stopParseSubscript", "base", "optionalChainMember", "parseMember", "isOptionalMemberExpression", "hasPropertyAsPrivateName", "isObjectMethod", "result", "cloneIdentifier", "cloneStringLiteral", "resetEndLocation", "lastTokEndLoc", "TokContext", "preserveSpace", "types", "brace", "j_oTag", "j_cTag", "j_expr", "beforeExpr", "startsExpr", "isLoop", "isAssign", "postfix", "ExportedTokenType", "label", "conf", "rightAssociative", "binop", "updateContext", "keywords", "Map", "createKeyword", "createToken", "createBinop", "tokenTypeCounter", "tokenTypes", "tokenLabels", "tokenBinops", "tokenBeforeExprs", "tokenStartsExprs", "tokenPrefixes", "_options$binop", "_options$beforeExpr", "_options$startsExpr", "_options$prefix", "push", "createKeywordLike", "_options$binop2", "_options$beforeExpr2", "_options$startsExpr2", "_options$prefix2", "tt", "bracketL", "bracketHashL", "bracketBarL", "bracketR", "bracketBarR", "braceL", "braceBarL", "braceHashL", "braceR", "braceBarR", "parenL", "parenR", "comma", "semi", "colon", "doubleColon", "dot", "question", "questionDot", "arrow", "ellipsis", "backQuote", "dollarBraceL", "templateTail", "templateNonTail", "at", "hash", "interpreterDirective", "eq", "slashAssign", "xorAssign", "moduloAssign", "incDec", "bang", "tilde", "doubleCaret", "doubleAt", "pipeline", "nullishCoalescing", "logicalOR", "logicalAND", "bitwiseOR", "bitwiseXOR", "bitwiseAND", "equality", "lt", "gt", "relational", "bitShift", "bitShiftL", "bitShiftR", "plusMin", "modulo", "star", "slash", "exponent", "_in", "_instanceof", "_break", "_case", "_catch", "_continue", "_debugger", "_default", "_else", "_finally", "_function", "_if", "_return", "_switch", "_throw", "_try", "_var", "_const", "_with", "_new", "_this", "_super", "_class", "_extends", "_export", "_import", "_null", "_true", "_false", "_typeof", "_void", "_delete", "_do", "_for", "_while", "_as", "_assert", "_async", "_await", "_defer", "_from", "_get", "_let", "_meta", "_of", "_sent", "_set", "_source", "_static", "_using", "_yield", "_asserts", "_checks", "_exports", "_global", "_implements", "_intrinsic", "_infer", "_is", "_mixins", "_proto", "_require", "_satisfies", "_keyof", "_readonly", "_unique", "_abstract", "_declare", "_enum", "_module", "_namespace", "_interface", "_type", "_opaque", "placeholder", "string", "num", "regexp", "privateName", "eof", "jsxName", "jsxText", "jsxTagStart", "jsxTagEnd", "tokenIsIdentifier", "tokenKeywordOrIdentifierIsKeyword", "tokenIsKeywordOrIdentifier", "tokenIsLiteralPropertyName", "tokenComesBeforeExpression", "tokenCanStartExpression", "tokenIsAssignment", "tokenIsFlowInterfaceOrTypeOrOpaque", "tokenIsLoop", "tokenIsKeyword", "tokenIsOperator", "tokenIsPostfix", "tokenIsPrefix", "tokenIsTSTypeOperator", "tokenIsTSDeclarationStart", "tokenLabelName", "tokenOperatorPrecedence", "tokenIsRightAssociative", "tokenIsTemplate", "getExportedToken", "context", "pop", "tc", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "i", "isIdentifierStart", "test", "fromCharCode", "isIdentifierChar", "reservedWords", "strict", "strictBind", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "isIteratorStart", "current", "next", "next2", "reservedWordLikeSet", "canBeReservedWord", "Scope", "names", "firstLexicalName", "ScopeHandler", "parser", "scopeStack", "undefinedExports", "inTopLevel", "currentScope", "inFunction", "currentVarScopeFlags", "allowSuper", "currentThisScopeFlags", "inClass", "inClassAndNotInNonArrowFunction", "inStaticBlock", "ScopeFlag", "inNonArrowFunction", "treatFunctionsAsVar", "treatFunctionsAsVarInScope", "createScope", "enter", "exit", "scope", "declareName", "bindingType", "checkRedeclarationInScope", "maybeExportDefined", "delete", "isRedeclaredInScope", "checkLocalExport", "topLevelScope", "FlowScope", "declareFunctions", "FlowScopeHandler", "add", "reservedTypes", "FlowErrors", "AmbiguousConditionalArrow", "AmbiguousDeclareModuleKind", "AssignReservedType", "reservedType", "DeclareClassElement", "DeclareClassFieldInitializer", "DuplicateDeclareModuleExports", "EnumBooleanMemberNotInitialized", "memberName", "enumName", "EnumDuplicateMemberName", "EnumInconsistentMemberValues", "EnumInvalidExplicitType", "invalidEnumType", "EnumInvalidExplicitTypeUnknownSupplied", "EnumInvalidMemberInitializerPrimaryType", "explicitType", "EnumInvalidMemberInitializerSymbolType", "EnumInvalidMemberInitializerUnknownType", "EnumInvalidMemberName", "suggestion", "EnumNumberMemberNotInitialized", "EnumStringMemberInconsistentlyInitialized", "GetterMayNotHaveThisParam", "ImportReflectionHasImportType", "ImportTypeShorthandOnlyInPureImport", "InexactInsideExact", "InexactInsideNonObject", "InexactVariance", "InvalidNonTypeImportInDeclareModule", "MissingTypeParamDefault", "NestedDeclareModule", "NestedFlowComment", "PatternIsOptional", "SetterMayNotHaveThisParam", "SpreadVariance", "ThisParamAnnotationRequired", "ThisParamBannedInConstructor", "ThisParamMayNotBeOptional", "ThisParamMustBeFirst", "ThisParamNoDefault", "TypeBeforeInitializer", "TypeCastInPattern", "UnexpectedExplicitInexactInObject", "UnexpectedReservedType", "UnexpectedReservedUnderscore", "UnexpectedSpaceBetweenModuloChecks", "UnexpectedSpreadType", "UnexpectedSubtractionOperand", "UnexpectedTokenAfterTypeParameter", "UnexpectedTypeParameterBeforeAsyncArrowFunction", "UnsupportedDeclareExportKind", "unsupportedExportKind", "UnsupportedStatementInDeclareModule", "UnterminatedFlowComment", "isEsModuleType", "bodyElement", "hasTypeImportKind", "importKind", "exportSuggestions", "const", "let", "interface", "partition", "list", "list1", "list2", "FLOW_PRAGMA_REGEX", "flow", "FlowParserMixin", "flowPragma", "getScopeHandler", "shouldParseTypes", "finishToken", "val", "addComment", "comment", "matches", "exec", "flowParseTypeInitialiser", "tok", "oldInType", "inType", "expect", "flowParseType", "flowParsePredicate", "moduloLoc", "expectContextual", "eat", "parseExpression", "flowParseTypeAndPredicateInitialiser", "predicate", "match", "flowParseDeclareClass", "flowParseInterfaceish", "flowParseDeclareFunction", "parseIdentifier", "typeNode", "typeContainer", "flowParseTypeParameterDeclaration", "tmp", "flowParseFunctionTypeParams", "this", "returnType", "typeAnnotation", "semicolon", "flowParseDeclare", "insideModule", "flowParseDeclareVariable", "eatContextual", "flowParseDeclareModuleExports", "flowParseDeclareModule", "isContextual", "flowParseDeclareTypeAlias", "flowParseDeclareOpaqueType", "flowParseDeclareInterface", "flowParseDeclareExportDeclaration", "flowParseTypeAnnotatableIdentifier", "parseExprAtom", "bodyNode", "parseImport", "hasModuleExport", "forEach", "default", "isLet", "exportKind", "flowParseTypeAnnotation", "finished", "flowParseTypeAlias", "flowParseOpaqueType", "isClass", "flowParseRestrictedIdentifier", "extends", "flowParseInterfaceExtends", "implements", "mixins", "flowParseObjectType", "allowStatic", "allowExact", "allowSpread", "allowProto", "allowInexact", "flowParseQualifiedTypeIdentifier", "flowParseTypeParameterInstantiation", "flowParseInterface", "checkNotUnderscore", "checkReservedType", "liberal", "right", "declare", "supertype", "impltype", "flowParseTypeParameter", "requireDefault", "nodeStartLoc", "variance", "flowParseVariance", "ident", "bound", "defaultRequired", "typeParameter", "flowInTopLevelContext", "cb", "curContext", "oldContext", "flowParseTypeParameterInstantiationInExpression", "reScan_lt", "oldNoAnonFunctionType", "noAnonFunctionType", "reScan_lt_gt", "flowParseTypeParameterInstantiationCallOrNew", "flowParseTypeOrImplicitInstantiation", "flowParseInterfaceType", "flowParseObjectPropertyKey", "flowParseObjectTypeIndexer", "isStatic", "static", "lookahead", "flowParseObjectTypeInternalSlot", "flowParseObjectTypeMethodish", "startNodeAt", "flowParseFunctionTypeParam", "flowParseObjectTypeCallProperty", "nodeStart", "callProperties", "properties", "indexers", "internalSlots", "endDelim", "exact", "inexact", "protoStartLoc", "inexactStartLoc", "propOrInexact", "flowParseObjectTypeProperty", "flowObjectTypeSemicolon", "out", "isInexactToken", "proto", "flowCheckGetterSetterParams", "property", "paramCount", "node2", "qualification", "flowParseGenericType", "flowParseTypeofType", "flowParsePrimaryType", "flowParseTupleType", "first", "lh", "isThis", "reinterpretTypeAsFunctionTypeParam", "flowIdentToTypeAnnotation", "isGroupedType", "parseLiteralAtNode", "createIdentifier", "flowParsePostfixType", "seenOptionalIndexedAccess", "canInsertSemicolon", "elementType", "objectType", "indexType", "flowParsePrefixType", "flowParseAnonFunctionWithoutParens", "param", "flowParseIntersectionType", "flowParseUnionType", "allowPrimitiveOverride", "typeCastToParameter", "allowExpressionBody", "forwardNoArrowParamsConversionAt", "parseFunctionBodyAndFinish", "parseStatementLike", "flowParseEnumDeclaration", "parseExpressionStatement", "expr", "shouldParseExportDeclaration", "containsEsc", "isExportDefaultSpecifier", "parseExportDefaultExpression", "parseConditional", "maybeInArrowParameters", "nextCh", "lookaheadCharCode", "setOptionalParametersError", "originalNoArrowAt", "noArrowAt", "consequent", "failed", "tryParseConditionalConsequent", "valid", "invalid", "getArrowLikeExpressions", "alternate", "parseMaybeAssign", "noArrowParamsConversionAt", "parseMaybeAssignAllowIn", "disallowInvalid", "stack", "arrows", "finishArrowValidation", "every", "_node$extra", "toAssignableList", "trailingCommaLoc", "checkParams", "includes", "offsetToSourcePos", "parseParenItem", "newNode", "typeCastNode", "assertModuleNodeAllowed", "parseExportDeclaration", "declarationNode", "parseExportSpecifiers", "parseExportFrom", "eatExportStar", "maybeParseExportNamespaceSpecifier", "hasNamespace", "parseClassId", "isStatement", "optionalId", "parseClassMember", "classBody", "member", "parseClassMemberFromModifier", "isIterator", "readIterator", "readWord1", "fullWord", "curPosition", "getTokenFromCode", "input", "charCodeAt", "finishOp", "left", "exprList", "toReferencedList", "isParenthesizedExpr", "_expr$extra", "parseArrayLike", "close", "canBePattern", "isTuple", "elements", "isParenthesized", "isClassMethod", "isClassProperty", "isNonstaticConstructor", "pushClassMethod", "allowsDirectSuper", "isThisParam", "pushClassPrivateMethod", "parseClassSuper", "superTypeParameters", "implemented", "checkGetterSetterParams", "parsePropertyNamePrefixOperator", "parseObjPropValue", "isAccessor", "parseFunctionParamType", "parseMaybeDefault", "checkImportReflection", "module", "parseImportSpecifierLocal", "specifier", "local", "finishImportSpecifier", "isPotentialImportPhase", "isExport", "ch", "applyImportPhase", "parseImportSpecifier", "importedIsString", "isInTypeOnlyImport", "isMaybeTypeOnly", "firstIdent", "imported", "specifierTypeKind", "isLookaheadContextual", "as_ident", "specifierIsTypeImport", "checkReservedWord", "parseBindingAtom", "parseFunctionParams", "parseVarId", "decl", "parseAsyncArrowFromCallExpression", "call", "shouldParseAsyncArrow", "afterLeftParse", "_jsx", "jsx", "tryParse", "currentContext", "_jsx2", "_jsx3", "abort", "_arrowExpression$extr", "arrowExpression", "maybeUnwrapTypeCastExpression", "aborted", "async", "failState", "thrown", "parseArrow", "shouldParseArrow", "setArrowFunctionParameters", "allowDuplicates", "isArrowFunction", "strictModeChanged", "parseParenAndDistinguishExpression", "canBeArrow", "sourceToOffsetPos", "parseSubscripts", "noCalls", "parseCallExpressionArguments", "parseAsyncArrowWithTypeParameters", "parseSubscript", "subscriptState", "isLookaheadToken_lt", "stop", "typeArguments", "parseNewCallee", "targs", "parseArrowExpression", "readToken_mult_modulo", "hasFlowComment", "nextToken", "readToken_pipe_amp", "parseTopLevel", "program", "fileNode", "skipBlockComment", "skipFlowComment", "hasFlowCommentCompletion", "commentSkip", "shiftToFirstNonWhiteSpace", "ch2", "ch3", "slice", "indexOf", "flowEnumErrorBooleanMemberNotInitialized", "flowEnumErrorInvalidMemberInitializer", "enumContext", "flowEnumErrorNumberMemberNotInitialized", "flowEnumErrorStringMemberInconsistentlyInitialized", "flowEnumMemberInit", "endOfInit", "literal", "flowEnumMemberRaw", "init", "flowEnumCheckExplicitTypeMismatch", "expectedType", "flowEnumMembers", "seenNames", "members", "booleanMembers", "numberMembers", "stringMembers", "defaultedMembers", "hasUnknownMembers", "memberNode", "toUpperCase", "flowEnumStringMembers", "initializedMembers", "flowEnumParseExplicitType", "flowEnumBody", "nameLoc", "empty", "boolsLen", "numsLen", "strsLen", "defaultedLen", "jsxParseOpeningElementAfterName", "nextTokenStart", "afterNext", "readToken_lt", "readToken_gt", "entities", "__proto__", "quot", "amp", "apos", "nbsp", "iexcl", "cent", "pound", "curren", "yen", "brvbar", "sect", "uml", "copy", "ordf", "laquo", "not", "shy", "reg", "macr", "deg", "plusmn", "sup2", "sup3", "acute", "micro", "para", "middot", "cedil", "sup1", "ordm", "raquo", "frac14", "frac12", "frac34", "iquest", "Agrave", "Aacute", "Acirc", "Atilde", "Auml", "Aring", "AElig", "Ccedil", "Egrave", "Eacute", "Ecirc", "Euml", "Igrave", "Iacute", "Icirc", "Iuml", "ETH", "Ntilde", "Ograve", "Oacute", "Ocirc", "Otilde", "Ouml", "times", "Oslash", "Ugrave", "Uacute", "Ucirc", "Uuml", "Yacute", "THORN", "szlig", "agrave", "aacute", "acirc", "atilde", "auml", "aring", "aelig", "ccedil", "egrave", "eacute", "ecirc", "euml", "igrave", "iacute", "icirc", "iuml", "eth", "ntilde", "ograve", "oacute", "ocirc", "otilde", "ouml", "divide", "oslash", "ugrave", "uacute", "ucirc", "uuml", "yacute", "thorn", "yuml", "OElig", "oelig", "Scaron", "scaron", "Yuml", "fnof", "circ", "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega", "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", "pi", "rho", "sigmaf", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega", "thetasym", "upsih", "piv", "ensp", "emsp", "thinsp", "zwnj", "zwj", "lrm", "rlm", "ndash", "mdash", "lsquo", "rsquo", "sbquo", "ldquo", "rdquo", "bdquo", "dagger", "Dagger", "bull", "hellip", "permil", "prime", "Prime", "lsaquo", "rsaquo", "oline", "frasl", "euro", "image", "weierp", "real", "trade", "alefsym", "larr", "uarr", "rarr", "darr", "harr", "crarr", "lArr", "uArr", "rArr", "dArr", "hArr", "forall", "part", "exist", "nabla", "isin", "notin", "ni", "prod", "sum", "minus", "lowast", "radic", "infin", "ang", "and", "or", "cap", "cup", "int", "there4", "sim", "cong", "asymp", "ne", "equiv", "le", "ge", "sub", "sup", "nsub", "sube", "supe", "oplus", "otimes", "perp", "sdot", "lceil", "rceil", "lfloor", "rfloor", "lang", "rang", "loz", "spades", "clubs", "hearts", "diams", "lineBreak", "lineBreakG", "isNewLine", "hasNewLine", "skipWhiteSpace", "skipWhiteSpaceInLine", "isWhitespace", "JsxErrors", "AttributeIsEmpty", "MissingClosingTagElement", "openingTagName", "MissingClosingTagFragment", "UnexpectedSequenceExpression", "HTMLEntity", "UnsupportedJsxValue", "UnterminatedJsxContent", "UnwrappedAdjacentJSXElements", "isFragment", "getQualifiedJSXName", "namespace", "JSXParserMixin", "jsxReadToken", "chunkStart", "canStartJSXElement", "jsxReadEntity", "jsxReadNewLine", "normalizeCRLF", "curLine", "lineStart", "jsxReadString", "quote", "startPos", "codePointAtPos", "codePoint", "readInt", "fromCodePoint", "count", "desc", "entity", "XHTMLEntities", "jsxReadWord", "jsxParseIdentifier", "jsxParseNamespacedName", "jsxParseElementName", "jsxParseAttributeValue", "setContext", "jsxParseExpressionContainer", "jsxParseEmptyExpression", "jsxParseSpreadChild", "previousContext", "jsxParseAttribute", "jsxParseOpeningElementAt", "selfClosing", "jsxParseClosingElementAt", "jsxParseElementAt", "children", "openingElement", "closingElement", "contents", "openingFragment", "closingFragment", "jsxParseElement", "newContext", "replaceToken", "skipSpace", "prevType", "splice", "TypeScriptScope", "tsNames", "TypeScriptScopeHandler", "importsStack", "hasImport", "allowShadow", "len", "isConst", "wasConst", "ProductionParameterHandler", "stacks", "currentFlags", "hasAwait", "hasYield", "hasReturn", "hasIn", "functionFlags", "BaseParser", "sawUnambiguousESM", "ambiguousScriptDifferentAst", "sourcePos", "offsetPos", "pluginConfig", "pluginName", "pluginOptions", "actualOptions", "plugin", "_this$plugins$get", "setTrailingComments", "comments", "trailingComments", "unshift", "setLeadingComments", "leadingComments", "setInnerComments", "innerComments", "adjustInnerComments", "commentWS", "lastElement", "CommentsParser", "commentsLen", "processComment", "commentStack", "commentStackLength", "lastCommentWS", "leadingNode", "commentEnd", "containingNode", "finalizeComment", "trailingNode", "commentStart", "finalizeRemainingComments", "resetPreviousNodeTrailingComments", "resetPreviousIdentifierLeadingComments", "takeSurroundingComments", "State", "errors", "potentialArrowAt", "topicContext", "maxNumOfResolvableTopics", "maxTopicIndex", "labels", "ct", "firstInvalidTemplateEscapePos", "strictErrors", "tokensLength", "v", "isAmbientContext", "inAbstractClass", "inDisallowConditionalTypesContext", "soloAwait", "inFSharpPipelineDirectBody", "hasTopLevelAwait", "isDigit", "forbiddenNumericSeparatorSiblings", "decBinOct", "hex", "isAllowedNumericSeparatorSibling", "bin", "oct", "dec", "readStringContents", "initialPos", "initialLineStart", "initialCurLine", "firstInvalidLoc", "unterminated", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "readCodePoint", "strictNumericEscape", "octalStr", "octal", "parseInt", "forceLen", "n", "invalidEscapeSequence", "allowNumSeparator", "bailOnError", "forbiddenSiblings", "isAllowedSibling", "total", "e", "Infinity", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "unexpectedNumericSeparator", "_isDigit", "invalidDigit", "invalidCodePoint", "buildPosition", "VALID_REGEX_FLAGS", "Token", "Tokenizer", "isLookahead", "errorHandlers_readInt", "errorBuilder", "errorHandlers_readCodePoint", "errorHandlers_readStringContents_string", "recordStrictModeErrors", "errorHandlers_readStringContents_template", "pushToken", "checkKeywordEscapes", "createLookaheadState", "old", "curr", "nextTokenStartSince", "lastIndex", "lookaheadCharCodeSince", "nextTokenInLineStart", "nextTokenInLineStartSince", "lookaheadInLineCharCode", "cp", "trail", "setStrict", "toParseError", "clear", "skipLineComment", "startSkip", "spaceStart", "loop", "commentWhitespace", "readToken_numberSign", "readToken_interpreter", "nextPos", "expectPlugin", "readToken_dot", "readNumber", "readToken_slash", "width", "readToken_caret", "proposal", "topicToken", "lookaheadCh", "codePointAt", "readToken_atSign", "readToken_plus_min", "size", "readToken_eq_excl", "readToken_question", "readTemplateToken", "readRadixNumber", "readString", "readWord", "readRegexp", "escaped", "content", "mods", "char", "isBigInt", "replace", "startsWithDot", "isFloat", "hasExponent", "isOctal", "hasLeadingZero", "integer", "underscorePos", "isDecimal", "parseFloat", "readTemplateContinuation", "opening", "firstCode", "escStart", "identifierCheck", "esc", "keywordTypes", "raiseOverwrite", "expectOnePlugin", "pluginNames", "some", "ClassScope", "privateNames", "loneAccessors", "undefinedPrivateNames", "ClassScopeHandler", "oldClassScope", "from", "declarePrivateName", "redefined", "accessor", "oldStatic", "newStatic", "oldKind", "newKind", "ExpressionScope", "canBeArrowParameterDeclaration", "isCertainlyParameterDeclaration", "ArrowHeadParsingScope", "declarationErrors", "recordDeclarationError", "ParsingErrorClass", "clearDeclarationError", "iterateErrors", "iterator", "ExpressionScopeHandler", "recordParameterInitializerError", "origin", "recordArrowParameterBindingError", "recordAsyncArrowParametersError", "validateAsPattern", "newParameterDeclarationScope", "newArrowHeadScope", "newAsyncArrowScope", "newExpressionScope", "UtilParser", "addExtra", "isUnparsedContextual", "nameStart", "nameEnd", "hasPrecedingLineBreak", "hasFollowingLineBreak", "isLineTerminator", "allowAsi", "fn", "oldState", "abortSignal", "checkExpressionErrors", "andThrow", "shorthandAssignLoc", "doubleProtoLoc", "privateKeyLoc", "optionalParametersLoc", "hasErrors", "isLiteralPropertyName", "initializeScopes", "oldLabels", "oldExportedIdentifiers", "exportedIdentifiers", "oldInModule", "oldScope", "oldProdParam", "prodParam", "oldExpressionScope", "expressionScope", "enterInitialScopes", "paramFlags", "checkDestructuringPrivate", "ExpressionErrors", "Node", "NodePrototype", "__clone", "NodeUtils", "locationNode", "unwrapParenthesizedExpression", "LValParser", "_node$extra3", "last", "_node$extra2", "operator", "arg", "checkToRestConversion", "elt", "toAssignableListItem", "element", "toReferencedListDeep", "parseSpread", "parseRestBinding", "parseBindingList", "ParseBindingListFlags", "parseObjectLike", "closeCharCode", "allowEmpty", "elts", "checkCommaAfterRest", "parseDecorator", "parseBindingElement", "parseBindingRestProperty", "parseBindingProperty", "parsePropertyName", "checkLVal", "checkClashes", "hasParenthesizedAncestor", "_expression$extra", "checkIdentifier", "validity", "ParseErrorClass", "isParenthesizedExpression", "nextAncestor", "child", "declareNameFromIdentifier", "identifier", "allowPattern", "nonNull", "x", "assert", "TSErrors", "AbstractMethodHasImplementation", "methodName", "AbstractPropertyHasInitializer", "propertyName", "AccessorCannotBeOptional", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "ConstructorHasTypeParameters", "DeclareAccessor", "DeclareClassFieldHasInitializer", "DeclareFunctionHasImplementation", "DuplicateAccessibilityModifier", "modifier", "DuplicateModifier", "EmptyHeritageClauseType", "EmptyTypeArguments", "EmptyTypeParameters", "ExpectedAmbientAfterExportDeclare", "ImportAliasHasImportType", "IncompatibleModifiers", "modifiers", "IndexSignatureHasAbstract", "IndexSignatureHasAccessibility", "IndexSignatureHasDeclare", "IndexSignatureHasOverride", "IndexSignatureHasStatic", "InitializerNotAllowedInAmbientContext", "InvalidHeritageClauseType", "InvalidModifierOnTypeMember", "InvalidModifierOnTypeParameter", "InvalidModifierOnTypeParameterPositions", "InvalidModifiersOrder", "orderedModifiers", "InvalidPropertyAccessAfterInstantiationExpression", "InvalidTupleMemberLabel", "MissingInterfaceName", "NonAbstractClassHasAbstractMethod", "NonClassMethodPropertyHasAbstractModifer", "OptionalTypeBeforeRequired", "OverrideNotInSubClass", "PrivateElementHasAbstract", "PrivateElementHasAccessibility", "ReadonlyForMethodSignature", "ReservedArrowTypeParam", "ReservedTypeAssertion", "SingleTypeParameterWithoutTrailingComma", "typeParameterName", "StaticBlockCannotHaveModifier", "TupleOptionalAfterType", "TypeAnnotationAfterAssign", "TypeImportCannotSpecifyDefaultAndNamed", "TypeModifierIsUsedInTypeExports", "TypeModifierIsUsedInTypeImports", "UnexpectedParameterModifier", "UnexpectedReadonly", "UnexpectedTypeAnnotation", "UnexpectedTypeCastInParameter", "UnsupportedImportTypeArgument", "UnsupportedParameterPropertyKind", "UnsupportedSignatureParameterKind", "keywordTypeFromName", "tsIsAccessModifier", "tsIsVarianceAnnotations", "typescript", "TypeScriptParserMixin", "tsParseInOutModifiers", "tsParseModifiers", "bind", "allowedModifiers", "disallowedModifiers", "errorTemplate", "tsParseConstModifier", "tsParseInOutConstModifiers", "tsIsIdentifier", "tsTokenCanFollowModifier", "tsNextTokenOnSameLineAndCanFollowModifier", "tsNextTokenCanFollowModifier", "tsParseModifier", "stopOnStartOfClassStaticBlock", "tsIsStartOfStaticBlocks", "tsTryParse", "modified", "enforceOrder", "before", "after", "incompatible", "mod1", "mod2", "accessibility", "hasOwnProperty", "tsIsListTerminator", "tsParseList", "parseElement", "tsParseDelimitedList", "refTrailingCommaPos", "tsParseDelimitedListWorker", "expectSuccess", "trailingCommaPos", "tsParseBracketedList", "bracket", "skipFirstToken", "tsParseImportType", "tsParseImportTypeOptions", "qualifier", "tsParseEntityName", "tsParseEntityNameFlags", "tsParseTypeArguments", "withProperty", "tsParseImportTypeWithPropertyValue", "parsePropertyDefinition", "tsParseTypeReference", "typeName", "tsParseThisTypePredicate", "lhs", "parameterName", "tsParseTypeAnnotation", "asserts", "tsParseThisTypeNode", "tsParseTypeQuery", "exprName", "tsParseTypeParameter", "parseModifiers", "tsParseTypeParameterName", "constraint", "tsEatThenParseType", "tsTryParseTypeParameters", "tsParseTypeParameters", "tsFillSignature", "returnToken", "signature", "returnTokenRequired", "paramsKey", "returnTypeKey", "tsParseBindingListForSignature", "tsParseTypeOrTypePredicateAnnotation", "tsParseTypeMemberSemicolon", "tsParseSignatureMember", "tsIsUnambiguouslyIndexSignature", "tsTryParseIndexSignature", "tsLookAhead", "parameters", "tsTryParseTypeAnnotation", "tsParsePropertyOrMethodSignature", "readonly", "firstParameter", "tsParseTypeMember", "idx", "tsParseTypeLiteral", "tsParseObjectTypeMembers", "tsIsStartOfMappedType", "tsParseMappedType", "tsExpectThenParseType", "nameType", "tsParseType", "tsTryParseType", "tsParseTupleType", "elementTypes", "tsParseTupleElementType", "seenOptionalElement", "elementNode", "restStartLoc", "labeled", "isWord", "chAfterWord", "wordName", "typeOrLabel", "tsParseNonArrayType", "labeledNode", "optionalTypeNode", "restNode", "tsParseParenthesizedType", "tsParseFunctionOrConstructorType", "tsInAllowConditionalTypesContext", "tsParseLiteralTypeNode", "tsParseTemplateLiteralType", "parseTemplate", "parseTemplateSubstitution", "tsParseThisTypeOrThisTypePredicate", "thisKeyword", "parseMaybeUnary", "nodeType", "tsParseArrayTypeOrHigher", "tsParseTypeOperator", "tsParseTypeOperatorOrHigher", "tsCheckTypeAnnotationForReadOnly", "tsParseInferType", "tsParseConstraintForInferType", "tsInDisallowConditionalTypesContext", "isTypeOperator", "tsParseUnionOrIntersectionType", "parseConstituentType", "hasLeadingOperator", "tsParseIntersectionTypeOrHigher", "tsParseUnionTypeOrHigher", "tsIsStartOfFunctionType", "tsIsUnambiguouslyStartOfFunctionType", "tsSkipParameterStart", "previousErrorCount", "_unused2", "tsInType", "t", "tsParseTypePredicateAsserts", "thisTypePredicate", "typePredicateVariable", "tsParseTypePredicatePrefix", "tsTryParseTypeOrTypePredicateAnnotation", "eatColon", "tsParseNonConditionalType", "checkType", "extendsType", "trueType", "falseType", "isAbstractConstructorSignature", "tsParseTypeAssertion", "tsParseHeritageClause", "originalStartLoc", "delimitedList", "tsParseInterfaceDeclaration", "tsParseTypeAliasDeclaration", "tsInTopLevelContext", "oldInDisallowConditionalTypesContext", "tsNextThenParseType", "tsParseEnumMember", "initializer", "tsParseEnumDeclaration", "tsParseEnumBody", "tsParseModuleBlock", "parseBlockOrModuleBlockBody", "tsParseModuleOrNamespaceDeclaration", "nested", "inner", "tsParseAmbientExternalModuleDeclaration", "global", "tsParseImportEqualsDeclaration", "maybeDefaultIdentifier", "moduleReference", "tsParseModuleReference", "tsIsExternalModuleReference", "tsParseExternalModuleReference", "f", "tsTryParseAndCatch", "tsTryParseDeclare", "nany", "startType", "tsInAmbientContext", "parseFunctionStatement", "parseClass", "parseVarStatement", "tsParseDeclaration", "tsTryParseExportDeclaration", "tsParseExpressionStatement", "mod", "tsCheckLineTerminator", "tsParseAbstractDeclaration", "tsTryParseGenericAsyncArrowFunction", "oldMaybeInArrowParameters", "tsParseTypeArgumentsInExpression", "tsIsDeclarationStart", "override", "pp", "parameter", "isSimpleParameter", "tsDisallowOptionalPattern", "bodilessType", "registerFunctionStatementId", "tsCheckForInvalidTypeCasts", "items", "isInParens", "nonNullExpression", "isOptionalCall", "missingParenErrorLoc", "atPossibleAsyncArrow", "asyncArrowFn", "parseTaggedTemplateExpression", "tokenType", "_callee$extra", "parseExprOp", "leftStartLoc", "minPrec", "isSatisfies", "checkKeywords", "checkDuplicateExports", "importNode", "parseMaybeImportPhase", "parseImportSpecifiersAndAfter", "nodeImportEquals", "isAbstractClass", "cls", "allowMissingInitializer", "declarations", "isValidAmbientConstInitializer", "parseStatementContent", "parseAccessModifier", "tsHasSomeModifiers", "callParseClassMemberWithIsStatic", "parseClassStaticBlock", "parseClassMemberWithIsStatic", "hadSuperClass", "parsePostMemberNameModifiers", "methodOrProp", "isDeclare", "isIdentifier", "parseClassPropertyAnnotation", "definite", "declareClassPrivateMethodInScope", "_typeCast", "_typeCast2", "typeCast", "_typeParameters", "reportReservedArrowTypeParam", "trailingComma", "sawUnary", "toAssignableParenthesizedExpression", "parseMaybeDecoratorArguments", "canHaveLeadingDecorator", "getGetterSetterExpectedParamCount", "baseCount", "firstParam", "hasContextParam", "parseCatchClauseParam", "oldIsAmbientContext", "oldStrict", "oldInAbstractClass", "maybeTakeDecorators", "hasEstreePlugin", "methodFn", "shouldParseAsAmbientContext", "getExpression", "parseExportSpecifier", "isString", "isInTypeExport", "parseTypeOnlyImportExportSpecifier", "isImport", "isInTypeOnlyImportExport", "leftOfAsKey", "rightOfAsKey", "leftOfAs", "rightOfAs", "hasTypeSpecifier", "canParseAsKeyword", "firstAs", "secondAs", "parseModuleExportName", "kindKey", "_node$directive", "_node$decorators", "_node$optional", "_node$typeAnnotation", "_node$accessibility", "_node$decorators2", "_node$override", "_node$readonly", "_node$static", "_node$declare", "_node$returnType", "_node$typeParameters", "_node$optional2", "_node$optional3", "_node$accessibility2", "_node$readonly2", "_node$static2", "_node$declare2", "_node$definite", "_node$readonly3", "_node$typeAnnotation2", "_node$accessibility3", "_node$decorators3", "_node$override2", "_node$optional4", "_node$id", "_node$abstract", "_node$declare3", "_node$decorators4", "_node$implements", "_node$superTypeArgume", "_node$typeParameters2", "_node$declare4", "_node$definite2", "_node$const", "_node$declare5", "_node$computed", "_node$qualifier", "_node$options", "_node$declare6", "_node$extends", "_node$declare7", "_node$global", "_node$const2", "_node$in", "_node$out", "superTypeArguments", "in", "isPossiblyLiteralEnum", "expressions", "isUncomputedMemberExpressionChain", "isNumber", "isNegativeNumber", "PlaceholderErrors", "ClassNameIsRequired", "UnexpectedSpace", "placeholders", "PlaceholdersParserMixin", "parsePlaceholder", "expectedNode", "assertNoSpace", "finishPlaceholder", "chStartsBindingIdentifier", "verifyBreakContinue", "isBreak", "parseStatementOrSloppyAnnexBFunctionDeclaration", "stmtPlaceholder", "parseBlock", "createNewLexicalScope", "parseFunctionId", "requireId", "parseClassBody", "startsWith", "maybeParseExportDefaultSpecifier", "_specifiers", "checkExport", "filter", "hasStarImport", "maybeParseStarImportSpecifier", "parseNamedImportSpecifiers", "parseImportSource", "v8intrinsic", "V8IntrinsicMixin", "parseV8Intrinsic", "v8IntrinsicStartLoc", "parseIdentifierName", "PIPELINE_PROPOSALS", "TOPIC_TOKENS", "validatePlugins", "pluginsMap", "decoratorsBeforeExport", "allowCallParenthesized", "_pluginsMap$get2", "proposalList", "p", "tokenList", "_pluginsMap$get", "syntaxType", "moduleAttributesVersionPluginOption", "version", "deprecatedAssertSyntax", "RECORD_AND_TUPLE_SYNTAX_TYPES", "missingPlugins", "mixinPlugins", "mixinPluginNames", "ExpressionParser", "checkProto", "isRecord", "sawProto", "shouldExitDescending", "disallowIn", "disallowInAnd", "parseExpressionBase", "allowInAnd", "parseMaybeAssignDisallowIn", "isYield", "parseYield", "ownExpressionErrors", "parseMaybeConditional", "isAmbiguousPrefixOrIdentifier", "parseExprOps", "parseMaybeUnaryOrPrivate", "op", "prec", "checkPipelineAtInfixOperator", "logical", "coalesce", "parseExprOpRightExpr", "finishedNode", "nextOp", "withTopicBindingContext", "parseHackPipeBody", "withSoloAwaitPermittingContext", "parseFSharpPipelineBody", "parseSmartPipelineBodyInStyle", "parseExprOpBaseRightExpr", "_body$extra", "requiredParentheses", "topicReferenceWasUsedInCurrentContext", "checkExponentialAfterUnary", "isAwait", "recordAwaitIfAllowed", "parseAwait", "update", "isDelete", "parseUpdate", "updateExpressionNode", "parseExprSubscripts", "maybeAsyncArrow", "parseBind", "parseCoverCallAndAsyncArrowHead", "parseNoCallExpr", "tag", "quasi", "allowPlaceholder", "nodeForExtra", "oldInFSharpPipelineDirectBody", "addTrailingCommaExtraToNode", "parseExprListItem", "_call$extra", "parseSuper", "parseImportMetaProperty", "parseImportCall", "parseDo", "parseFunctionOrFunctionSent", "parseDecorators", "parseNewOrNewTarget", "parseTopicReferenceThenEqualsSign", "parseTopicReference", "pipeProposal", "parseModuleExpression", "parseAsyncFunctionExpression", "parseAsyncArrowUnaryFunction", "topicTokenType", "topicTokenValue", "finishTopicReference", "testTopicReferenceConfiguration", "topicReferenceIsAllowedInCurrentContext", "registerTopicReference", "meta", "parseMetaProperty", "parseFunction", "isSource", "innerStartLoc", "spreadStartLoc", "optionalCommaStartLoc", "spreadNodeStartLoc", "innerEndLoc", "arrowNode", "wrapParenthesis", "parenExpression", "metaProp", "parseNew", "parseExprList", "parseTemplateElement", "isTagged", "elemStart", "elem", "isTail", "endOffset", "elemEnd", "cooked", "tail", "curElt", "quasis", "substitutions", "maybeAsyncOrAccessorProp", "keyName", "_params", "parseObjectMethod", "finishedProp", "generator", "isExpression", "hasStrictModeDirective", "nonSimple", "isSimpleParamList", "formalParameters", "reservedTest", "isAwaitAllowed", "delegating", "delegate", "childExpr", "isSimpleReference", "checkSmartPipeTopicBodyEarlyErrors", "callback", "outerContextTopicState", "withSmartMixTopicForbiddingContext", "outerContextSoloAwaitState", "prodParamToSet", "ParamKind", "prodParamToClear", "ret", "revertScopes", "parseProgram", "loopLabel", "switchLabel", "loneSurrogate", "keywordRelationalOperator", "babel7CompatTokens", "hashEndPos", "hashEndLoc", "backquoteEnd", "backquoteEndLoc", "startToken", "templateValue", "templateElementEnd", "templateElementEndLoc", "endToken", "StatementParser", "interpreter", "parseInterpreterDirective", "finishedProgram", "stmtToDirective", "directiveLiteral", "hasFollowingBindingAtom", "endCh", "chStartsBindingPattern", "hasInLineFollowingBindingIdentifierOrBrace", "allowsForUsing", "nextCharAfterOf", "startsAwaitUsing", "parseModuleItem", "ParseStatementFlag", "parseStatementListItem", "allowLabeledFunction", "parseStatement", "allowDeclaration", "allowFunctionDeclaration", "parseBreakContinueStatement", "parseDebuggerStatement", "parseDoWhileStatement", "parseForStatement", "parseIfStatement", "parseReturnStatement", "parseSwitchStatement", "parseThrowStatement", "parseTryStatement", "parseWhileStatement", "parseWithStatement", "parseEmptyStatement", "nextTokenCharCode", "isAsyncFunction", "maybeName", "parseLabeledStatement", "decoratorsEnabledBeforeExport", "maybeDecorators", "classNode", "exportNode", "_classNode$decorators", "allowExport", "paramsStartLoc", "lab", "parseHeaderExpression", "awaitAt", "parseFor", "startsWithLet", "startsWithAwaitUsing", "starsWithUsingDeclaration", "isLetOrUsing", "initNode", "parseVar", "isForIn", "parseForIn", "startsWithAsync", "isForOf", "isHangingDeclaration", "ParseFunctionFlag", "discriminant", "cases", "cur", "sawDefault", "isCase", "block", "handler", "clause", "finalizer", "statementStart", "parsedNonDirective", "await", "isFor", "hangingDeclaration", "isDeclaration", "hadConstructor", "publicMethod", "privateMethod", "publicProp", "privateProp", "accessorProp", "publicMember", "parseClassElementName", "maybeContextualKw", "isPrivate", "maybeQuestionTokenStartLoc", "pushClassPrivateProperty", "pushClassProperty", "pushClassAccessorProperty", "_member$decorators", "parseInitializer", "hasDefault", "parseAfterDefault", "hasStar", "parseAfterNamespace", "isFromRequired", "hasSpecifiers", "maybeParseExportNamedSpecifiers", "hasDeclaration", "maybeParseExportDeclaration", "_node2$declaration", "_ref$specifiers", "isTypeExport", "assertions", "nextType", "hasFrom", "nextAfterFrom", "maybeParseImportAttributes", "checkJSONModuleImport", "checkNames", "isDefault", "isFrom", "_node$specifiers", "_declaration$extra", "nodes", "surrogate", "isJSONModuleImport", "singleBindingType", "_node$assertions", "nonDefaultNamedSpecifier", "find", "phaseIdentifier", "isImportPhase", "isPrecedingIdImportPhase", "parseImportSourceAndAttributes", "maybeParseDefaultImportSpecifier", "parseNext", "_node$specifiers2", "parseImportAttributes", "attrs", "attrNames", "parseModuleAttributes", "useWith", "importSpecifier", "Parser", "_options", "getParser", "ast", "moduleError", "generateExportedTokenTypes", "internalTokenTypes", "tokTypes", "getParserClass", "parserClassCache", "pluginList", "exports", "normalize", "sourceFile", "comparator", "needle", "section", "TO_DISPLAY_STRING", "registerRuntimeHelpers", "isComponent", "createObjectProperty", "createSimpleExpression", "createCompoundExpression", "createCallExpression", "stack", "checkCompatEnabled", "createCompilerError", "isStaticExp", "findDir", "findProp", "isStaticArgOf", "hasDynamicKeyVBind", "baseParse", "getConstantType", "isVNode", "isReferenced", "transformOn", "transformModel", "baseCompile", "noopDirectiveTransform", "transformModel$1", "transformOn$1", "warn"]
}
